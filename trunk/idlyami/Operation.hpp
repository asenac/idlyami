// This file was GENERATED by command:
//     pump.py Operation.hpp.pump
// DO NOT EDIT BY HAND!!!

// -*- mode: c++; c-basic-style: "bsd"; c-basic-offset: 4; -*-
/*
 * Operation.hpp
 * Copyright (C) Andr√©s Senac 2011 <andres@senac.es>
 *
 * idlyami is free software: you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as published
 * by the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * idlyami is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#ifndef IDLYAMI_OPERATION_HPP
#define IDLYAMI_OPERATION_HPP

#include <idlyami/detail/mpl.hpp>
#include <idlyami/mapping.hpp>
#include <idlyami/Skel.hpp>

namespace idlyami
{

class Servant;
class Parameters;

struct OperationHandler
{
 virtual void do_call(Servant* _this, ServerRequest* request,
     const char** names) = 0;
};

template< typename Interface, bool IsOneway, typename Return ,
    typename P0 = detail::none , typename P1 = detail::none ,
    typename P2 = detail::none , typename P3 = detail::none ,
    typename P4 = detail::none , typename P5 = detail::none ,
    typename P6 = detail::none , typename P7 = detail::none ,
    typename P8 = detail::none , typename P9 = detail::none ,
    typename P10 = detail::none , typename P11 = detail::none ,
    typename P12 = detail::none , typename P13 = detail::none ,
    typename P14 = detail::none , typename P15 = detail::none ,
    typename P16 = detail::none , typename P17 = detail::none ,
    typename P18 = detail::none , typename P19 = detail::none ,
    typename P20 = detail::none , typename P21 = detail::none ,
    typename P22 = detail::none , typename P23 = detail::none ,
    typename P24 = detail::none , typename P25 = detail::none ,
    typename P26 = detail::none , typename P27 = detail::none ,
    typename P28 = detail::none , typename P29 = detail::none ,
    typename P30 = detail::none , typename P31 = detail::none ,
    typename P32 = detail::none , typename P33 = detail::none ,
    typename P34 = detail::none , typename P35 = detail::none ,
    typename P36 = detail::none , typename P37 = detail::none ,
    typename P38 = detail::none , typename P39 = detail::none ,
    typename P40 = detail::none , typename P41 = detail::none ,
    typename P42 = detail::none , typename P43 = detail::none ,
    typename P44 = detail::none , typename P45 = detail::none ,
    typename P46 = detail::none , typename P47 = detail::none ,
    typename P48 = detail::none , typename P49 = detail::none ,
    typename P50 = detail::none  >
struct Operation
{
    typedef Interface interface_type;
    static const bool isOneway = IsOneway;
    typedef typename mapping::return_type< Return >::type return_type;
    typedef return_type (interface_type::*type)();

    static const unsigned int nparams = 0;

    struct handler_t : public OperationHandler
    {
    	type m_operation;

    	handler_t(type operation) : m_operation(operation)
    	{
    	}

     void do_call(Servant* _this, ServerRequest* request,
         const char** /*unused*/)
    	{
    		(dynamic_cast< interface_type* >(_this)->*m_operation)();
    	}
	};
};

template< typename Interface, bool IsOneway, typename Return , typename P0  >
struct Operation< Interface, IsOneway, Return , P0  , detail::none ,
    detail::none , detail::none , detail::none , detail::none , detail::none ,
    detail::none , detail::none , detail::none , detail::none , detail::none ,
    detail::none , detail::none , detail::none , detail::none , detail::none ,
    detail::none , detail::none , detail::none , detail::none , detail::none ,
    detail::none , detail::none , detail::none , detail::none , detail::none ,
    detail::none , detail::none , detail::none , detail::none , detail::none ,
    detail::none , detail::none , detail::none , detail::none , detail::none ,
    detail::none , detail::none , detail::none , detail::none , detail::none ,
    detail::none , detail::none , detail::none , detail::none , detail::none ,
    detail::none , detail::none , detail::none , detail::none  >
{
    typedef Interface interface_type;
    static const bool isOneway = IsOneway;
    typedef typename mapping::return_type< Return >::type return_type;

    typedef typename mapping::arg_type< P0 >::type p0_type;

	struct parameters_t
	{
    		P0 p0;
    	};

    typedef return_type (interface_type::*type)(p0_type );

    static const unsigned int nparams = 1;

    struct handler_t : public OperationHandler
    {
    	type m_operation;

    	handler_t(type operation) : m_operation(operation)
    	{
    	}

    	void do_call(Servant* _this, ServerRequest* request, const char** names)
    	{

    		typename idlyami::skel::skel_type< P0 >::type __v0(*request, *(names++));
    		    	(dynamic_cast< interface_type* >(_this)->*m_operation)(__v0.val() );
    	}
	};
};

template< typename Interface, bool IsOneway, typename Return , typename P0 ,
    typename P1  >
struct Operation< Interface, IsOneway, Return , P0 , P1  , detail::none ,
    detail::none , detail::none , detail::none , detail::none , detail::none ,
    detail::none , detail::none , detail::none , detail::none , detail::none ,
    detail::none , detail::none , detail::none , detail::none , detail::none ,
    detail::none , detail::none , detail::none , detail::none , detail::none ,
    detail::none , detail::none , detail::none , detail::none , detail::none ,
    detail::none , detail::none , detail::none , detail::none , detail::none ,
    detail::none , detail::none , detail::none , detail::none , detail::none ,
    detail::none , detail::none , detail::none , detail::none , detail::none ,
    detail::none , detail::none , detail::none , detail::none , detail::none ,
    detail::none , detail::none , detail::none  >
{
    typedef Interface interface_type;
    static const bool isOneway = IsOneway;
    typedef typename mapping::return_type< Return >::type return_type;

    typedef typename mapping::arg_type< P0 >::type p0_type;
    typedef typename mapping::arg_type< P1 >::type p1_type;

	struct parameters_t
	{
    		P0 p0;
    		P1 p1;
    	};

    typedef return_type (interface_type::*type)(p0_type , p1_type );

    static const unsigned int nparams = 2;

    struct handler_t : public OperationHandler
    {
    	type m_operation;

    	handler_t(type operation) : m_operation(operation)
    	{
    	}

    	void do_call(Servant* _this, ServerRequest* request, const char** names)
    	{

    		typename idlyami::skel::skel_type< P0 >::type __v0(*request, *(names++));
    		typename idlyami::skel::skel_type< P1 >::type __v1(*request, *(names++));
           (dynamic_cast< interface_type* >(_this)->*m_operation)(__v0.val() ,
               __v1.val() );
    	}
	};
};

template< typename Interface, bool IsOneway, typename Return , typename P0 ,
    typename P1 , typename P2  >
struct Operation< Interface, IsOneway, Return , P0 , P1 , P2  , detail::none ,
    detail::none , detail::none , detail::none , detail::none , detail::none ,
    detail::none , detail::none , detail::none , detail::none , detail::none ,
    detail::none , detail::none , detail::none , detail::none , detail::none ,
    detail::none , detail::none , detail::none , detail::none , detail::none ,
    detail::none , detail::none , detail::none , detail::none , detail::none ,
    detail::none , detail::none , detail::none , detail::none , detail::none ,
    detail::none , detail::none , detail::none , detail::none , detail::none ,
    detail::none , detail::none , detail::none , detail::none , detail::none ,
    detail::none , detail::none , detail::none , detail::none , detail::none ,
    detail::none , detail::none  >
{
    typedef Interface interface_type;
    static const bool isOneway = IsOneway;
    typedef typename mapping::return_type< Return >::type return_type;

    typedef typename mapping::arg_type< P0 >::type p0_type;
    typedef typename mapping::arg_type< P1 >::type p1_type;
    typedef typename mapping::arg_type< P2 >::type p2_type;

	struct parameters_t
	{
    		P0 p0;
    		P1 p1;
    		P2 p2;
    	};

    typedef return_type (interface_type::*type)(p0_type , p1_type , p2_type );

    static const unsigned int nparams = 3;

    struct handler_t : public OperationHandler
    {
    	type m_operation;

    	handler_t(type operation) : m_operation(operation)
    	{
    	}

    	void do_call(Servant* _this, ServerRequest* request, const char** names)
    	{

    		typename idlyami::skel::skel_type< P0 >::type __v0(*request, *(names++));
    		typename idlyami::skel::skel_type< P1 >::type __v1(*request, *(names++));
    		typename idlyami::skel::skel_type< P2 >::type __v2(*request, *(names++));
           (dynamic_cast< interface_type* >(_this)->*m_operation)(__v0.val() ,
               __v1.val() , __v2.val() );
    	}
	};
};

template< typename Interface, bool IsOneway, typename Return , typename P0 ,
    typename P1 , typename P2 , typename P3  >
struct Operation< Interface, IsOneway, Return , P0 , P1 , P2 , P3  ,
    detail::none , detail::none , detail::none , detail::none , detail::none ,
    detail::none , detail::none , detail::none , detail::none , detail::none ,
    detail::none , detail::none , detail::none , detail::none , detail::none ,
    detail::none , detail::none , detail::none , detail::none , detail::none ,
    detail::none , detail::none , detail::none , detail::none , detail::none ,
    detail::none , detail::none , detail::none , detail::none , detail::none ,
    detail::none , detail::none , detail::none , detail::none , detail::none ,
    detail::none , detail::none , detail::none , detail::none , detail::none ,
    detail::none , detail::none , detail::none , detail::none , detail::none ,
    detail::none , detail::none  >
{
    typedef Interface interface_type;
    static const bool isOneway = IsOneway;
    typedef typename mapping::return_type< Return >::type return_type;

    typedef typename mapping::arg_type< P0 >::type p0_type;
    typedef typename mapping::arg_type< P1 >::type p1_type;
    typedef typename mapping::arg_type< P2 >::type p2_type;
    typedef typename mapping::arg_type< P3 >::type p3_type;

	struct parameters_t
	{
    		P0 p0;
    		P1 p1;
    		P2 p2;
    		P3 p3;
    	};

    typedef return_type (interface_type::*type)(p0_type , p1_type , p2_type ,
        p3_type );

    static const unsigned int nparams = 4;

    struct handler_t : public OperationHandler
    {
    	type m_operation;

    	handler_t(type operation) : m_operation(operation)
    	{
    	}

    	void do_call(Servant* _this, ServerRequest* request, const char** names)
    	{

    		typename idlyami::skel::skel_type< P0 >::type __v0(*request, *(names++));
    		typename idlyami::skel::skel_type< P1 >::type __v1(*request, *(names++));
    		typename idlyami::skel::skel_type< P2 >::type __v2(*request, *(names++));
    		typename idlyami::skel::skel_type< P3 >::type __v3(*request, *(names++));
           (dynamic_cast< interface_type* >(_this)->*m_operation)(__v0.val() ,
               __v1.val() , __v2.val() , __v3.val() );
    	}
	};
};

template< typename Interface, bool IsOneway, typename Return , typename P0 ,
    typename P1 , typename P2 , typename P3 , typename P4  >
struct Operation< Interface, IsOneway, Return , P0 , P1 , P2 , P3 , P4  ,
    detail::none , detail::none , detail::none , detail::none , detail::none ,
    detail::none , detail::none , detail::none , detail::none , detail::none ,
    detail::none , detail::none , detail::none , detail::none , detail::none ,
    detail::none , detail::none , detail::none , detail::none , detail::none ,
    detail::none , detail::none , detail::none , detail::none , detail::none ,
    detail::none , detail::none , detail::none , detail::none , detail::none ,
    detail::none , detail::none , detail::none , detail::none , detail::none ,
    detail::none , detail::none , detail::none , detail::none , detail::none ,
    detail::none , detail::none , detail::none , detail::none , detail::none ,
    detail::none  >
{
    typedef Interface interface_type;
    static const bool isOneway = IsOneway;
    typedef typename mapping::return_type< Return >::type return_type;

    typedef typename mapping::arg_type< P0 >::type p0_type;
    typedef typename mapping::arg_type< P1 >::type p1_type;
    typedef typename mapping::arg_type< P2 >::type p2_type;
    typedef typename mapping::arg_type< P3 >::type p3_type;
    typedef typename mapping::arg_type< P4 >::type p4_type;

	struct parameters_t
	{
    		P0 p0;
    		P1 p1;
    		P2 p2;
    		P3 p3;
    		P4 p4;
    	};

    typedef return_type (interface_type::*type)(p0_type , p1_type , p2_type ,
        p3_type , p4_type );

    static const unsigned int nparams = 5;

    struct handler_t : public OperationHandler
    {
    	type m_operation;

    	handler_t(type operation) : m_operation(operation)
    	{
    	}

    	void do_call(Servant* _this, ServerRequest* request, const char** names)
    	{

    		typename idlyami::skel::skel_type< P0 >::type __v0(*request, *(names++));
    		typename idlyami::skel::skel_type< P1 >::type __v1(*request, *(names++));
    		typename idlyami::skel::skel_type< P2 >::type __v2(*request, *(names++));
    		typename idlyami::skel::skel_type< P3 >::type __v3(*request, *(names++));
    		typename idlyami::skel::skel_type< P4 >::type __v4(*request, *(names++));
           (dynamic_cast< interface_type* >(_this)->*m_operation)(__v0.val() ,
               __v1.val() , __v2.val() , __v3.val() , __v4.val() );
    	}
	};
};

template< typename Interface, bool IsOneway, typename Return , typename P0 ,
    typename P1 , typename P2 , typename P3 , typename P4 , typename P5  >
struct Operation< Interface, IsOneway, Return , P0 , P1 , P2 , P3 , P4 , P5  ,
    detail::none , detail::none , detail::none , detail::none , detail::none ,
    detail::none , detail::none , detail::none , detail::none , detail::none ,
    detail::none , detail::none , detail::none , detail::none , detail::none ,
    detail::none , detail::none , detail::none , detail::none , detail::none ,
    detail::none , detail::none , detail::none , detail::none , detail::none ,
    detail::none , detail::none , detail::none , detail::none , detail::none ,
    detail::none , detail::none , detail::none , detail::none , detail::none ,
    detail::none , detail::none , detail::none , detail::none , detail::none ,
    detail::none , detail::none , detail::none , detail::none , detail::none  >
{
    typedef Interface interface_type;
    static const bool isOneway = IsOneway;
    typedef typename mapping::return_type< Return >::type return_type;

    typedef typename mapping::arg_type< P0 >::type p0_type;
    typedef typename mapping::arg_type< P1 >::type p1_type;
    typedef typename mapping::arg_type< P2 >::type p2_type;
    typedef typename mapping::arg_type< P3 >::type p3_type;
    typedef typename mapping::arg_type< P4 >::type p4_type;
    typedef typename mapping::arg_type< P5 >::type p5_type;

	struct parameters_t
	{
    		P0 p0;
    		P1 p1;
    		P2 p2;
    		P3 p3;
    		P4 p4;
    		P5 p5;
    	};

    typedef return_type (interface_type::*type)(p0_type , p1_type , p2_type ,
        p3_type , p4_type , p5_type );

    static const unsigned int nparams = 6;

    struct handler_t : public OperationHandler
    {
    	type m_operation;

    	handler_t(type operation) : m_operation(operation)
    	{
    	}

    	void do_call(Servant* _this, ServerRequest* request, const char** names)
    	{

    		typename idlyami::skel::skel_type< P0 >::type __v0(*request, *(names++));
    		typename idlyami::skel::skel_type< P1 >::type __v1(*request, *(names++));
    		typename idlyami::skel::skel_type< P2 >::type __v2(*request, *(names++));
    		typename idlyami::skel::skel_type< P3 >::type __v3(*request, *(names++));
    		typename idlyami::skel::skel_type< P4 >::type __v4(*request, *(names++));
    		typename idlyami::skel::skel_type< P5 >::type __v5(*request, *(names++));
           (dynamic_cast< interface_type* >(_this)->*m_operation)(__v0.val() ,
               __v1.val() , __v2.val() , __v3.val() , __v4.val() ,
               __v5.val() );
    	}
	};
};

template< typename Interface, bool IsOneway, typename Return , typename P0 ,
    typename P1 , typename P2 , typename P3 , typename P4 , typename P5 ,
    typename P6  >
struct Operation< Interface, IsOneway, Return , P0 , P1 , P2 , P3 , P4 , P5 ,
    P6  , detail::none , detail::none , detail::none , detail::none ,
    detail::none , detail::none , detail::none , detail::none , detail::none ,
    detail::none , detail::none , detail::none , detail::none , detail::none ,
    detail::none , detail::none , detail::none , detail::none , detail::none ,
    detail::none , detail::none , detail::none , detail::none , detail::none ,
    detail::none , detail::none , detail::none , detail::none , detail::none ,
    detail::none , detail::none , detail::none , detail::none , detail::none ,
    detail::none , detail::none , detail::none , detail::none , detail::none ,
    detail::none , detail::none , detail::none , detail::none , detail::none  >
{
    typedef Interface interface_type;
    static const bool isOneway = IsOneway;
    typedef typename mapping::return_type< Return >::type return_type;

    typedef typename mapping::arg_type< P0 >::type p0_type;
    typedef typename mapping::arg_type< P1 >::type p1_type;
    typedef typename mapping::arg_type< P2 >::type p2_type;
    typedef typename mapping::arg_type< P3 >::type p3_type;
    typedef typename mapping::arg_type< P4 >::type p4_type;
    typedef typename mapping::arg_type< P5 >::type p5_type;
    typedef typename mapping::arg_type< P6 >::type p6_type;

	struct parameters_t
	{
    		P0 p0;
    		P1 p1;
    		P2 p2;
    		P3 p3;
    		P4 p4;
    		P5 p5;
    		P6 p6;
    	};

    typedef return_type (interface_type::*type)(p0_type , p1_type , p2_type ,
        p3_type , p4_type , p5_type , p6_type );

    static const unsigned int nparams = 7;

    struct handler_t : public OperationHandler
    {
    	type m_operation;

    	handler_t(type operation) : m_operation(operation)
    	{
    	}

    	void do_call(Servant* _this, ServerRequest* request, const char** names)
    	{

    		typename idlyami::skel::skel_type< P0 >::type __v0(*request, *(names++));
    		typename idlyami::skel::skel_type< P1 >::type __v1(*request, *(names++));
    		typename idlyami::skel::skel_type< P2 >::type __v2(*request, *(names++));
    		typename idlyami::skel::skel_type< P3 >::type __v3(*request, *(names++));
    		typename idlyami::skel::skel_type< P4 >::type __v4(*request, *(names++));
    		typename idlyami::skel::skel_type< P5 >::type __v5(*request, *(names++));
    		typename idlyami::skel::skel_type< P6 >::type __v6(*request, *(names++));
           (dynamic_cast< interface_type* >(_this)->*m_operation)(__v0.val() ,
               __v1.val() , __v2.val() , __v3.val() , __v4.val() , __v5.val() ,
               __v6.val() );
    	}
	};
};

template< typename Interface, bool IsOneway, typename Return , typename P0 ,
    typename P1 , typename P2 , typename P3 , typename P4 , typename P5 ,
    typename P6 , typename P7  >
struct Operation< Interface, IsOneway, Return , P0 , P1 , P2 , P3 , P4 , P5 ,
    P6 , P7  , detail::none , detail::none , detail::none , detail::none ,
    detail::none , detail::none , detail::none , detail::none , detail::none ,
    detail::none , detail::none , detail::none , detail::none , detail::none ,
    detail::none , detail::none , detail::none , detail::none , detail::none ,
    detail::none , detail::none , detail::none , detail::none , detail::none ,
    detail::none , detail::none , detail::none , detail::none , detail::none ,
    detail::none , detail::none , detail::none , detail::none , detail::none ,
    detail::none , detail::none , detail::none , detail::none , detail::none ,
    detail::none , detail::none , detail::none , detail::none  >
{
    typedef Interface interface_type;
    static const bool isOneway = IsOneway;
    typedef typename mapping::return_type< Return >::type return_type;

    typedef typename mapping::arg_type< P0 >::type p0_type;
    typedef typename mapping::arg_type< P1 >::type p1_type;
    typedef typename mapping::arg_type< P2 >::type p2_type;
    typedef typename mapping::arg_type< P3 >::type p3_type;
    typedef typename mapping::arg_type< P4 >::type p4_type;
    typedef typename mapping::arg_type< P5 >::type p5_type;
    typedef typename mapping::arg_type< P6 >::type p6_type;
    typedef typename mapping::arg_type< P7 >::type p7_type;

	struct parameters_t
	{
    		P0 p0;
    		P1 p1;
    		P2 p2;
    		P3 p3;
    		P4 p4;
    		P5 p5;
    		P6 p6;
    		P7 p7;
    	};

    typedef return_type (interface_type::*type)(p0_type , p1_type , p2_type ,
        p3_type , p4_type , p5_type , p6_type , p7_type );

    static const unsigned int nparams = 8;

    struct handler_t : public OperationHandler
    {
    	type m_operation;

    	handler_t(type operation) : m_operation(operation)
    	{
    	}

    	void do_call(Servant* _this, ServerRequest* request, const char** names)
    	{

    		typename idlyami::skel::skel_type< P0 >::type __v0(*request, *(names++));
    		typename idlyami::skel::skel_type< P1 >::type __v1(*request, *(names++));
    		typename idlyami::skel::skel_type< P2 >::type __v2(*request, *(names++));
    		typename idlyami::skel::skel_type< P3 >::type __v3(*request, *(names++));
    		typename idlyami::skel::skel_type< P4 >::type __v4(*request, *(names++));
    		typename idlyami::skel::skel_type< P5 >::type __v5(*request, *(names++));
    		typename idlyami::skel::skel_type< P6 >::type __v6(*request, *(names++));
    		typename idlyami::skel::skel_type< P7 >::type __v7(*request, *(names++));
           (dynamic_cast< interface_type* >(_this)->*m_operation)(__v0.val() ,
               __v1.val() , __v2.val() , __v3.val() , __v4.val() , __v5.val() ,
               __v6.val() , __v7.val() );
    	}
	};
};

template< typename Interface, bool IsOneway, typename Return , typename P0 ,
    typename P1 , typename P2 , typename P3 , typename P4 , typename P5 ,
    typename P6 , typename P7 , typename P8  >
struct Operation< Interface, IsOneway, Return , P0 , P1 , P2 , P3 , P4 , P5 ,
    P6 , P7 , P8  , detail::none , detail::none , detail::none , detail::none ,
    detail::none , detail::none , detail::none , detail::none , detail::none ,
    detail::none , detail::none , detail::none , detail::none , detail::none ,
    detail::none , detail::none , detail::none , detail::none , detail::none ,
    detail::none , detail::none , detail::none , detail::none , detail::none ,
    detail::none , detail::none , detail::none , detail::none , detail::none ,
    detail::none , detail::none , detail::none , detail::none , detail::none ,
    detail::none , detail::none , detail::none , detail::none , detail::none ,
    detail::none , detail::none , detail::none  >
{
    typedef Interface interface_type;
    static const bool isOneway = IsOneway;
    typedef typename mapping::return_type< Return >::type return_type;

    typedef typename mapping::arg_type< P0 >::type p0_type;
    typedef typename mapping::arg_type< P1 >::type p1_type;
    typedef typename mapping::arg_type< P2 >::type p2_type;
    typedef typename mapping::arg_type< P3 >::type p3_type;
    typedef typename mapping::arg_type< P4 >::type p4_type;
    typedef typename mapping::arg_type< P5 >::type p5_type;
    typedef typename mapping::arg_type< P6 >::type p6_type;
    typedef typename mapping::arg_type< P7 >::type p7_type;
    typedef typename mapping::arg_type< P8 >::type p8_type;

	struct parameters_t
	{
    		P0 p0;
    		P1 p1;
    		P2 p2;
    		P3 p3;
    		P4 p4;
    		P5 p5;
    		P6 p6;
    		P7 p7;
    		P8 p8;
    	};

    typedef return_type (interface_type::*type)(p0_type , p1_type , p2_type ,
        p3_type , p4_type , p5_type , p6_type , p7_type , p8_type );

    static const unsigned int nparams = 9;

    struct handler_t : public OperationHandler
    {
    	type m_operation;

    	handler_t(type operation) : m_operation(operation)
    	{
    	}

    	void do_call(Servant* _this, ServerRequest* request, const char** names)
    	{

    		typename idlyami::skel::skel_type< P0 >::type __v0(*request, *(names++));
    		typename idlyami::skel::skel_type< P1 >::type __v1(*request, *(names++));
    		typename idlyami::skel::skel_type< P2 >::type __v2(*request, *(names++));
    		typename idlyami::skel::skel_type< P3 >::type __v3(*request, *(names++));
    		typename idlyami::skel::skel_type< P4 >::type __v4(*request, *(names++));
    		typename idlyami::skel::skel_type< P5 >::type __v5(*request, *(names++));
    		typename idlyami::skel::skel_type< P6 >::type __v6(*request, *(names++));
    		typename idlyami::skel::skel_type< P7 >::type __v7(*request, *(names++));
    		typename idlyami::skel::skel_type< P8 >::type __v8(*request, *(names++));
           (dynamic_cast< interface_type* >(_this)->*m_operation)(__v0.val() ,
               __v1.val() , __v2.val() , __v3.val() , __v4.val() , __v5.val() ,
               __v6.val() , __v7.val() , __v8.val() );
    	}
	};
};

template< typename Interface, bool IsOneway, typename Return , typename P0 ,
    typename P1 , typename P2 , typename P3 , typename P4 , typename P5 ,
    typename P6 , typename P7 , typename P8 , typename P9  >
struct Operation< Interface, IsOneway, Return , P0 , P1 , P2 , P3 , P4 , P5 ,
    P6 , P7 , P8 , P9  , detail::none , detail::none , detail::none ,
    detail::none , detail::none , detail::none , detail::none , detail::none ,
    detail::none , detail::none , detail::none , detail::none , detail::none ,
    detail::none , detail::none , detail::none , detail::none , detail::none ,
    detail::none , detail::none , detail::none , detail::none , detail::none ,
    detail::none , detail::none , detail::none , detail::none , detail::none ,
    detail::none , detail::none , detail::none , detail::none , detail::none ,
    detail::none , detail::none , detail::none , detail::none , detail::none ,
    detail::none , detail::none , detail::none  >
{
    typedef Interface interface_type;
    static const bool isOneway = IsOneway;
    typedef typename mapping::return_type< Return >::type return_type;

    typedef typename mapping::arg_type< P0 >::type p0_type;
    typedef typename mapping::arg_type< P1 >::type p1_type;
    typedef typename mapping::arg_type< P2 >::type p2_type;
    typedef typename mapping::arg_type< P3 >::type p3_type;
    typedef typename mapping::arg_type< P4 >::type p4_type;
    typedef typename mapping::arg_type< P5 >::type p5_type;
    typedef typename mapping::arg_type< P6 >::type p6_type;
    typedef typename mapping::arg_type< P7 >::type p7_type;
    typedef typename mapping::arg_type< P8 >::type p8_type;
    typedef typename mapping::arg_type< P9 >::type p9_type;

	struct parameters_t
	{
    		P0 p0;
    		P1 p1;
    		P2 p2;
    		P3 p3;
    		P4 p4;
    		P5 p5;
    		P6 p6;
    		P7 p7;
    		P8 p8;
    		P9 p9;
    	};

    typedef return_type (interface_type::*type)(p0_type , p1_type , p2_type ,
        p3_type , p4_type , p5_type , p6_type , p7_type , p8_type , p9_type );

    static const unsigned int nparams = 10;

    struct handler_t : public OperationHandler
    {
    	type m_operation;

    	handler_t(type operation) : m_operation(operation)
    	{
    	}

    	void do_call(Servant* _this, ServerRequest* request, const char** names)
    	{

    		typename idlyami::skel::skel_type< P0 >::type __v0(*request, *(names++));
    		typename idlyami::skel::skel_type< P1 >::type __v1(*request, *(names++));
    		typename idlyami::skel::skel_type< P2 >::type __v2(*request, *(names++));
    		typename idlyami::skel::skel_type< P3 >::type __v3(*request, *(names++));
    		typename idlyami::skel::skel_type< P4 >::type __v4(*request, *(names++));
    		typename idlyami::skel::skel_type< P5 >::type __v5(*request, *(names++));
    		typename idlyami::skel::skel_type< P6 >::type __v6(*request, *(names++));
    		typename idlyami::skel::skel_type< P7 >::type __v7(*request, *(names++));
    		typename idlyami::skel::skel_type< P8 >::type __v8(*request, *(names++));
    		typename idlyami::skel::skel_type< P9 >::type __v9(*request, *(names++));
           (dynamic_cast< interface_type* >(_this)->*m_operation)(__v0.val() ,
               __v1.val() , __v2.val() , __v3.val() , __v4.val() , __v5.val() ,
               __v6.val() , __v7.val() , __v8.val() , __v9.val() );
    	}
	};
};

template< typename Interface, bool IsOneway, typename Return , typename P0 ,
    typename P1 , typename P2 , typename P3 , typename P4 , typename P5 ,
    typename P6 , typename P7 , typename P8 , typename P9 , typename P10  >
struct Operation< Interface, IsOneway, Return , P0 , P1 , P2 , P3 , P4 , P5 ,
    P6 , P7 , P8 , P9 , P10  , detail::none , detail::none , detail::none ,
    detail::none , detail::none , detail::none , detail::none , detail::none ,
    detail::none , detail::none , detail::none , detail::none , detail::none ,
    detail::none , detail::none , detail::none , detail::none , detail::none ,
    detail::none , detail::none , detail::none , detail::none , detail::none ,
    detail::none , detail::none , detail::none , detail::none , detail::none ,
    detail::none , detail::none , detail::none , detail::none , detail::none ,
    detail::none , detail::none , detail::none , detail::none , detail::none ,
    detail::none , detail::none  >
{
    typedef Interface interface_type;
    static const bool isOneway = IsOneway;
    typedef typename mapping::return_type< Return >::type return_type;

    typedef typename mapping::arg_type< P0 >::type p0_type;
    typedef typename mapping::arg_type< P1 >::type p1_type;
    typedef typename mapping::arg_type< P2 >::type p2_type;
    typedef typename mapping::arg_type< P3 >::type p3_type;
    typedef typename mapping::arg_type< P4 >::type p4_type;
    typedef typename mapping::arg_type< P5 >::type p5_type;
    typedef typename mapping::arg_type< P6 >::type p6_type;
    typedef typename mapping::arg_type< P7 >::type p7_type;
    typedef typename mapping::arg_type< P8 >::type p8_type;
    typedef typename mapping::arg_type< P9 >::type p9_type;
    typedef typename mapping::arg_type< P10 >::type p10_type;

	struct parameters_t
	{
    		P0 p0;
    		P1 p1;
    		P2 p2;
    		P3 p3;
    		P4 p4;
    		P5 p5;
    		P6 p6;
    		P7 p7;
    		P8 p8;
    		P9 p9;
    		P10 p10;
    	};

    typedef return_type (interface_type::*type)(p0_type , p1_type , p2_type ,
        p3_type , p4_type , p5_type , p6_type , p7_type , p8_type , p9_type ,
        p10_type );

    static const unsigned int nparams = 11;

    struct handler_t : public OperationHandler
    {
    	type m_operation;

    	handler_t(type operation) : m_operation(operation)
    	{
    	}

    	void do_call(Servant* _this, ServerRequest* request, const char** names)
    	{

    		typename idlyami::skel::skel_type< P0 >::type __v0(*request, *(names++));
    		typename idlyami::skel::skel_type< P1 >::type __v1(*request, *(names++));
    		typename idlyami::skel::skel_type< P2 >::type __v2(*request, *(names++));
    		typename idlyami::skel::skel_type< P3 >::type __v3(*request, *(names++));
    		typename idlyami::skel::skel_type< P4 >::type __v4(*request, *(names++));
    		typename idlyami::skel::skel_type< P5 >::type __v5(*request, *(names++));
    		typename idlyami::skel::skel_type< P6 >::type __v6(*request, *(names++));
    		typename idlyami::skel::skel_type< P7 >::type __v7(*request, *(names++));
    		typename idlyami::skel::skel_type< P8 >::type __v8(*request, *(names++));
    		typename idlyami::skel::skel_type< P9 >::type __v9(*request, *(names++));
      typename idlyami::skel::skel_type< P10 >::type __v10(*request,
          *(names++));
           (dynamic_cast< interface_type* >(_this)->*m_operation)(__v0.val() ,
               __v1.val() , __v2.val() , __v3.val() , __v4.val() , __v5.val() ,
               __v6.val() , __v7.val() , __v8.val() , __v9.val() ,
               __v10.val() );
    	}
	};
};

template< typename Interface, bool IsOneway, typename Return , typename P0 ,
    typename P1 , typename P2 , typename P3 , typename P4 , typename P5 ,
    typename P6 , typename P7 , typename P8 , typename P9 , typename P10 ,
    typename P11  >
struct Operation< Interface, IsOneway, Return , P0 , P1 , P2 , P3 , P4 , P5 ,
    P6 , P7 , P8 , P9 , P10 , P11  , detail::none , detail::none ,
    detail::none , detail::none , detail::none , detail::none , detail::none ,
    detail::none , detail::none , detail::none , detail::none , detail::none ,
    detail::none , detail::none , detail::none , detail::none , detail::none ,
    detail::none , detail::none , detail::none , detail::none , detail::none ,
    detail::none , detail::none , detail::none , detail::none , detail::none ,
    detail::none , detail::none , detail::none , detail::none , detail::none ,
    detail::none , detail::none , detail::none , detail::none , detail::none ,
    detail::none , detail::none  >
{
    typedef Interface interface_type;
    static const bool isOneway = IsOneway;
    typedef typename mapping::return_type< Return >::type return_type;

    typedef typename mapping::arg_type< P0 >::type p0_type;
    typedef typename mapping::arg_type< P1 >::type p1_type;
    typedef typename mapping::arg_type< P2 >::type p2_type;
    typedef typename mapping::arg_type< P3 >::type p3_type;
    typedef typename mapping::arg_type< P4 >::type p4_type;
    typedef typename mapping::arg_type< P5 >::type p5_type;
    typedef typename mapping::arg_type< P6 >::type p6_type;
    typedef typename mapping::arg_type< P7 >::type p7_type;
    typedef typename mapping::arg_type< P8 >::type p8_type;
    typedef typename mapping::arg_type< P9 >::type p9_type;
    typedef typename mapping::arg_type< P10 >::type p10_type;
    typedef typename mapping::arg_type< P11 >::type p11_type;

	struct parameters_t
	{
    		P0 p0;
    		P1 p1;
    		P2 p2;
    		P3 p3;
    		P4 p4;
    		P5 p5;
    		P6 p6;
    		P7 p7;
    		P8 p8;
    		P9 p9;
    		P10 p10;
    		P11 p11;
    	};

    typedef return_type (interface_type::*type)(p0_type , p1_type , p2_type ,
        p3_type , p4_type , p5_type , p6_type , p7_type , p8_type , p9_type ,
        p10_type , p11_type );

    static const unsigned int nparams = 12;

    struct handler_t : public OperationHandler
    {
    	type m_operation;

    	handler_t(type operation) : m_operation(operation)
    	{
    	}

    	void do_call(Servant* _this, ServerRequest* request, const char** names)
    	{

    		typename idlyami::skel::skel_type< P0 >::type __v0(*request, *(names++));
    		typename idlyami::skel::skel_type< P1 >::type __v1(*request, *(names++));
    		typename idlyami::skel::skel_type< P2 >::type __v2(*request, *(names++));
    		typename idlyami::skel::skel_type< P3 >::type __v3(*request, *(names++));
    		typename idlyami::skel::skel_type< P4 >::type __v4(*request, *(names++));
    		typename idlyami::skel::skel_type< P5 >::type __v5(*request, *(names++));
    		typename idlyami::skel::skel_type< P6 >::type __v6(*request, *(names++));
    		typename idlyami::skel::skel_type< P7 >::type __v7(*request, *(names++));
    		typename idlyami::skel::skel_type< P8 >::type __v8(*request, *(names++));
    		typename idlyami::skel::skel_type< P9 >::type __v9(*request, *(names++));
      typename idlyami::skel::skel_type< P10 >::type __v10(*request,
          *(names++));
      typename idlyami::skel::skel_type< P11 >::type __v11(*request,
          *(names++));
           (dynamic_cast< interface_type* >(_this)->*m_operation)(__v0.val() ,
               __v1.val() , __v2.val() , __v3.val() , __v4.val() , __v5.val() ,
               __v6.val() , __v7.val() , __v8.val() , __v9.val() ,
               __v10.val() , __v11.val() );
    	}
	};
};

template< typename Interface, bool IsOneway, typename Return , typename P0 ,
    typename P1 , typename P2 , typename P3 , typename P4 , typename P5 ,
    typename P6 , typename P7 , typename P8 , typename P9 , typename P10 ,
    typename P11 , typename P12  >
struct Operation< Interface, IsOneway, Return , P0 , P1 , P2 , P3 , P4 , P5 ,
    P6 , P7 , P8 , P9 , P10 , P11 , P12  , detail::none , detail::none ,
    detail::none , detail::none , detail::none , detail::none , detail::none ,
    detail::none , detail::none , detail::none , detail::none , detail::none ,
    detail::none , detail::none , detail::none , detail::none , detail::none ,
    detail::none , detail::none , detail::none , detail::none , detail::none ,
    detail::none , detail::none , detail::none , detail::none , detail::none ,
    detail::none , detail::none , detail::none , detail::none , detail::none ,
    detail::none , detail::none , detail::none , detail::none , detail::none ,
    detail::none  >
{
    typedef Interface interface_type;
    static const bool isOneway = IsOneway;
    typedef typename mapping::return_type< Return >::type return_type;

    typedef typename mapping::arg_type< P0 >::type p0_type;
    typedef typename mapping::arg_type< P1 >::type p1_type;
    typedef typename mapping::arg_type< P2 >::type p2_type;
    typedef typename mapping::arg_type< P3 >::type p3_type;
    typedef typename mapping::arg_type< P4 >::type p4_type;
    typedef typename mapping::arg_type< P5 >::type p5_type;
    typedef typename mapping::arg_type< P6 >::type p6_type;
    typedef typename mapping::arg_type< P7 >::type p7_type;
    typedef typename mapping::arg_type< P8 >::type p8_type;
    typedef typename mapping::arg_type< P9 >::type p9_type;
    typedef typename mapping::arg_type< P10 >::type p10_type;
    typedef typename mapping::arg_type< P11 >::type p11_type;
    typedef typename mapping::arg_type< P12 >::type p12_type;

	struct parameters_t
	{
    		P0 p0;
    		P1 p1;
    		P2 p2;
    		P3 p3;
    		P4 p4;
    		P5 p5;
    		P6 p6;
    		P7 p7;
    		P8 p8;
    		P9 p9;
    		P10 p10;
    		P11 p11;
    		P12 p12;
    	};

    typedef return_type (interface_type::*type)(p0_type , p1_type , p2_type ,
        p3_type , p4_type , p5_type , p6_type , p7_type , p8_type , p9_type ,
        p10_type , p11_type , p12_type );

    static const unsigned int nparams = 13;

    struct handler_t : public OperationHandler
    {
    	type m_operation;

    	handler_t(type operation) : m_operation(operation)
    	{
    	}

    	void do_call(Servant* _this, ServerRequest* request, const char** names)
    	{

    		typename idlyami::skel::skel_type< P0 >::type __v0(*request, *(names++));
    		typename idlyami::skel::skel_type< P1 >::type __v1(*request, *(names++));
    		typename idlyami::skel::skel_type< P2 >::type __v2(*request, *(names++));
    		typename idlyami::skel::skel_type< P3 >::type __v3(*request, *(names++));
    		typename idlyami::skel::skel_type< P4 >::type __v4(*request, *(names++));
    		typename idlyami::skel::skel_type< P5 >::type __v5(*request, *(names++));
    		typename idlyami::skel::skel_type< P6 >::type __v6(*request, *(names++));
    		typename idlyami::skel::skel_type< P7 >::type __v7(*request, *(names++));
    		typename idlyami::skel::skel_type< P8 >::type __v8(*request, *(names++));
    		typename idlyami::skel::skel_type< P9 >::type __v9(*request, *(names++));
      typename idlyami::skel::skel_type< P10 >::type __v10(*request,
          *(names++));
      typename idlyami::skel::skel_type< P11 >::type __v11(*request,
          *(names++));
      typename idlyami::skel::skel_type< P12 >::type __v12(*request,
          *(names++));
           (dynamic_cast< interface_type* >(_this)->*m_operation)(__v0.val() ,
               __v1.val() , __v2.val() , __v3.val() , __v4.val() , __v5.val() ,
               __v6.val() , __v7.val() , __v8.val() , __v9.val() ,
               __v10.val() , __v11.val() , __v12.val() );
    	}
	};
};

template< typename Interface, bool IsOneway, typename Return , typename P0 ,
    typename P1 , typename P2 , typename P3 , typename P4 , typename P5 ,
    typename P6 , typename P7 , typename P8 , typename P9 , typename P10 ,
    typename P11 , typename P12 , typename P13  >
struct Operation< Interface, IsOneway, Return , P0 , P1 , P2 , P3 , P4 , P5 ,
    P6 , P7 , P8 , P9 , P10 , P11 , P12 , P13  , detail::none , detail::none ,
    detail::none , detail::none , detail::none , detail::none , detail::none ,
    detail::none , detail::none , detail::none , detail::none , detail::none ,
    detail::none , detail::none , detail::none , detail::none , detail::none ,
    detail::none , detail::none , detail::none , detail::none , detail::none ,
    detail::none , detail::none , detail::none , detail::none , detail::none ,
    detail::none , detail::none , detail::none , detail::none , detail::none ,
    detail::none , detail::none , detail::none , detail::none , detail::none  >
{
    typedef Interface interface_type;
    static const bool isOneway = IsOneway;
    typedef typename mapping::return_type< Return >::type return_type;

    typedef typename mapping::arg_type< P0 >::type p0_type;
    typedef typename mapping::arg_type< P1 >::type p1_type;
    typedef typename mapping::arg_type< P2 >::type p2_type;
    typedef typename mapping::arg_type< P3 >::type p3_type;
    typedef typename mapping::arg_type< P4 >::type p4_type;
    typedef typename mapping::arg_type< P5 >::type p5_type;
    typedef typename mapping::arg_type< P6 >::type p6_type;
    typedef typename mapping::arg_type< P7 >::type p7_type;
    typedef typename mapping::arg_type< P8 >::type p8_type;
    typedef typename mapping::arg_type< P9 >::type p9_type;
    typedef typename mapping::arg_type< P10 >::type p10_type;
    typedef typename mapping::arg_type< P11 >::type p11_type;
    typedef typename mapping::arg_type< P12 >::type p12_type;
    typedef typename mapping::arg_type< P13 >::type p13_type;

	struct parameters_t
	{
    		P0 p0;
    		P1 p1;
    		P2 p2;
    		P3 p3;
    		P4 p4;
    		P5 p5;
    		P6 p6;
    		P7 p7;
    		P8 p8;
    		P9 p9;
    		P10 p10;
    		P11 p11;
    		P12 p12;
    		P13 p13;
    	};

    typedef return_type (interface_type::*type)(p0_type , p1_type , p2_type ,
        p3_type , p4_type , p5_type , p6_type , p7_type , p8_type , p9_type ,
        p10_type , p11_type , p12_type , p13_type );

    static const unsigned int nparams = 14;

    struct handler_t : public OperationHandler
    {
    	type m_operation;

    	handler_t(type operation) : m_operation(operation)
    	{
    	}

    	void do_call(Servant* _this, ServerRequest* request, const char** names)
    	{

    		typename idlyami::skel::skel_type< P0 >::type __v0(*request, *(names++));
    		typename idlyami::skel::skel_type< P1 >::type __v1(*request, *(names++));
    		typename idlyami::skel::skel_type< P2 >::type __v2(*request, *(names++));
    		typename idlyami::skel::skel_type< P3 >::type __v3(*request, *(names++));
    		typename idlyami::skel::skel_type< P4 >::type __v4(*request, *(names++));
    		typename idlyami::skel::skel_type< P5 >::type __v5(*request, *(names++));
    		typename idlyami::skel::skel_type< P6 >::type __v6(*request, *(names++));
    		typename idlyami::skel::skel_type< P7 >::type __v7(*request, *(names++));
    		typename idlyami::skel::skel_type< P8 >::type __v8(*request, *(names++));
    		typename idlyami::skel::skel_type< P9 >::type __v9(*request, *(names++));
      typename idlyami::skel::skel_type< P10 >::type __v10(*request,
          *(names++));
      typename idlyami::skel::skel_type< P11 >::type __v11(*request,
          *(names++));
      typename idlyami::skel::skel_type< P12 >::type __v12(*request,
          *(names++));
      typename idlyami::skel::skel_type< P13 >::type __v13(*request,
          *(names++));
           (dynamic_cast< interface_type* >(_this)->*m_operation)(__v0.val() ,
               __v1.val() , __v2.val() , __v3.val() , __v4.val() , __v5.val() ,
               __v6.val() , __v7.val() , __v8.val() , __v9.val() ,
               __v10.val() , __v11.val() , __v12.val() , __v13.val() );
    	}
	};
};

template< typename Interface, bool IsOneway, typename Return , typename P0 ,
    typename P1 , typename P2 , typename P3 , typename P4 , typename P5 ,
    typename P6 , typename P7 , typename P8 , typename P9 , typename P10 ,
    typename P11 , typename P12 , typename P13 , typename P14  >
struct Operation< Interface, IsOneway, Return , P0 , P1 , P2 , P3 , P4 , P5 ,
    P6 , P7 , P8 , P9 , P10 , P11 , P12 , P13 , P14  , detail::none ,
    detail::none , detail::none , detail::none , detail::none , detail::none ,
    detail::none , detail::none , detail::none , detail::none , detail::none ,
    detail::none , detail::none , detail::none , detail::none , detail::none ,
    detail::none , detail::none , detail::none , detail::none , detail::none ,
    detail::none , detail::none , detail::none , detail::none , detail::none ,
    detail::none , detail::none , detail::none , detail::none , detail::none ,
    detail::none , detail::none , detail::none , detail::none , detail::none  >
{
    typedef Interface interface_type;
    static const bool isOneway = IsOneway;
    typedef typename mapping::return_type< Return >::type return_type;

    typedef typename mapping::arg_type< P0 >::type p0_type;
    typedef typename mapping::arg_type< P1 >::type p1_type;
    typedef typename mapping::arg_type< P2 >::type p2_type;
    typedef typename mapping::arg_type< P3 >::type p3_type;
    typedef typename mapping::arg_type< P4 >::type p4_type;
    typedef typename mapping::arg_type< P5 >::type p5_type;
    typedef typename mapping::arg_type< P6 >::type p6_type;
    typedef typename mapping::arg_type< P7 >::type p7_type;
    typedef typename mapping::arg_type< P8 >::type p8_type;
    typedef typename mapping::arg_type< P9 >::type p9_type;
    typedef typename mapping::arg_type< P10 >::type p10_type;
    typedef typename mapping::arg_type< P11 >::type p11_type;
    typedef typename mapping::arg_type< P12 >::type p12_type;
    typedef typename mapping::arg_type< P13 >::type p13_type;
    typedef typename mapping::arg_type< P14 >::type p14_type;

	struct parameters_t
	{
    		P0 p0;
    		P1 p1;
    		P2 p2;
    		P3 p3;
    		P4 p4;
    		P5 p5;
    		P6 p6;
    		P7 p7;
    		P8 p8;
    		P9 p9;
    		P10 p10;
    		P11 p11;
    		P12 p12;
    		P13 p13;
    		P14 p14;
    	};

    typedef return_type (interface_type::*type)(p0_type , p1_type , p2_type ,
        p3_type , p4_type , p5_type , p6_type , p7_type , p8_type , p9_type ,
        p10_type , p11_type , p12_type , p13_type , p14_type );

    static const unsigned int nparams = 15;

    struct handler_t : public OperationHandler
    {
    	type m_operation;

    	handler_t(type operation) : m_operation(operation)
    	{
    	}

    	void do_call(Servant* _this, ServerRequest* request, const char** names)
    	{

    		typename idlyami::skel::skel_type< P0 >::type __v0(*request, *(names++));
    		typename idlyami::skel::skel_type< P1 >::type __v1(*request, *(names++));
    		typename idlyami::skel::skel_type< P2 >::type __v2(*request, *(names++));
    		typename idlyami::skel::skel_type< P3 >::type __v3(*request, *(names++));
    		typename idlyami::skel::skel_type< P4 >::type __v4(*request, *(names++));
    		typename idlyami::skel::skel_type< P5 >::type __v5(*request, *(names++));
    		typename idlyami::skel::skel_type< P6 >::type __v6(*request, *(names++));
    		typename idlyami::skel::skel_type< P7 >::type __v7(*request, *(names++));
    		typename idlyami::skel::skel_type< P8 >::type __v8(*request, *(names++));
    		typename idlyami::skel::skel_type< P9 >::type __v9(*request, *(names++));
      typename idlyami::skel::skel_type< P10 >::type __v10(*request,
          *(names++));
      typename idlyami::skel::skel_type< P11 >::type __v11(*request,
          *(names++));
      typename idlyami::skel::skel_type< P12 >::type __v12(*request,
          *(names++));
      typename idlyami::skel::skel_type< P13 >::type __v13(*request,
          *(names++));
      typename idlyami::skel::skel_type< P14 >::type __v14(*request,
          *(names++));
           (dynamic_cast< interface_type* >(_this)->*m_operation)(__v0.val() ,
               __v1.val() , __v2.val() , __v3.val() , __v4.val() , __v5.val() ,
               __v6.val() , __v7.val() , __v8.val() , __v9.val() ,
               __v10.val() , __v11.val() , __v12.val() , __v13.val() ,
               __v14.val() );
    	}
	};
};

template< typename Interface, bool IsOneway, typename Return , typename P0 ,
    typename P1 , typename P2 , typename P3 , typename P4 , typename P5 ,
    typename P6 , typename P7 , typename P8 , typename P9 , typename P10 ,
    typename P11 , typename P12 , typename P13 , typename P14 , typename P15  >
struct Operation< Interface, IsOneway, Return , P0 , P1 , P2 , P3 , P4 , P5 ,
    P6 , P7 , P8 , P9 , P10 , P11 , P12 , P13 , P14 , P15  , detail::none ,
    detail::none , detail::none , detail::none , detail::none , detail::none ,
    detail::none , detail::none , detail::none , detail::none , detail::none ,
    detail::none , detail::none , detail::none , detail::none , detail::none ,
    detail::none , detail::none , detail::none , detail::none , detail::none ,
    detail::none , detail::none , detail::none , detail::none , detail::none ,
    detail::none , detail::none , detail::none , detail::none , detail::none ,
    detail::none , detail::none , detail::none , detail::none  >
{
    typedef Interface interface_type;
    static const bool isOneway = IsOneway;
    typedef typename mapping::return_type< Return >::type return_type;

    typedef typename mapping::arg_type< P0 >::type p0_type;
    typedef typename mapping::arg_type< P1 >::type p1_type;
    typedef typename mapping::arg_type< P2 >::type p2_type;
    typedef typename mapping::arg_type< P3 >::type p3_type;
    typedef typename mapping::arg_type< P4 >::type p4_type;
    typedef typename mapping::arg_type< P5 >::type p5_type;
    typedef typename mapping::arg_type< P6 >::type p6_type;
    typedef typename mapping::arg_type< P7 >::type p7_type;
    typedef typename mapping::arg_type< P8 >::type p8_type;
    typedef typename mapping::arg_type< P9 >::type p9_type;
    typedef typename mapping::arg_type< P10 >::type p10_type;
    typedef typename mapping::arg_type< P11 >::type p11_type;
    typedef typename mapping::arg_type< P12 >::type p12_type;
    typedef typename mapping::arg_type< P13 >::type p13_type;
    typedef typename mapping::arg_type< P14 >::type p14_type;
    typedef typename mapping::arg_type< P15 >::type p15_type;

	struct parameters_t
	{
    		P0 p0;
    		P1 p1;
    		P2 p2;
    		P3 p3;
    		P4 p4;
    		P5 p5;
    		P6 p6;
    		P7 p7;
    		P8 p8;
    		P9 p9;
    		P10 p10;
    		P11 p11;
    		P12 p12;
    		P13 p13;
    		P14 p14;
    		P15 p15;
    	};

    typedef return_type (interface_type::*type)(p0_type , p1_type , p2_type ,
        p3_type , p4_type , p5_type , p6_type , p7_type , p8_type , p9_type ,
        p10_type , p11_type , p12_type , p13_type , p14_type , p15_type );

    static const unsigned int nparams = 16;

    struct handler_t : public OperationHandler
    {
    	type m_operation;

    	handler_t(type operation) : m_operation(operation)
    	{
    	}

    	void do_call(Servant* _this, ServerRequest* request, const char** names)
    	{

    		typename idlyami::skel::skel_type< P0 >::type __v0(*request, *(names++));
    		typename idlyami::skel::skel_type< P1 >::type __v1(*request, *(names++));
    		typename idlyami::skel::skel_type< P2 >::type __v2(*request, *(names++));
    		typename idlyami::skel::skel_type< P3 >::type __v3(*request, *(names++));
    		typename idlyami::skel::skel_type< P4 >::type __v4(*request, *(names++));
    		typename idlyami::skel::skel_type< P5 >::type __v5(*request, *(names++));
    		typename idlyami::skel::skel_type< P6 >::type __v6(*request, *(names++));
    		typename idlyami::skel::skel_type< P7 >::type __v7(*request, *(names++));
    		typename idlyami::skel::skel_type< P8 >::type __v8(*request, *(names++));
    		typename idlyami::skel::skel_type< P9 >::type __v9(*request, *(names++));
      typename idlyami::skel::skel_type< P10 >::type __v10(*request,
          *(names++));
      typename idlyami::skel::skel_type< P11 >::type __v11(*request,
          *(names++));
      typename idlyami::skel::skel_type< P12 >::type __v12(*request,
          *(names++));
      typename idlyami::skel::skel_type< P13 >::type __v13(*request,
          *(names++));
      typename idlyami::skel::skel_type< P14 >::type __v14(*request,
          *(names++));
      typename idlyami::skel::skel_type< P15 >::type __v15(*request,
          *(names++));
           (dynamic_cast< interface_type* >(_this)->*m_operation)(__v0.val() ,
               __v1.val() , __v2.val() , __v3.val() , __v4.val() , __v5.val() ,
               __v6.val() , __v7.val() , __v8.val() , __v9.val() ,
               __v10.val() , __v11.val() , __v12.val() , __v13.val() ,
               __v14.val() , __v15.val() );
    	}
	};
};

template< typename Interface, bool IsOneway, typename Return , typename P0 ,
    typename P1 , typename P2 , typename P3 , typename P4 , typename P5 ,
    typename P6 , typename P7 , typename P8 , typename P9 , typename P10 ,
    typename P11 , typename P12 , typename P13 , typename P14 , typename P15 ,
    typename P16  >
struct Operation< Interface, IsOneway, Return , P0 , P1 , P2 , P3 , P4 , P5 ,
    P6 , P7 , P8 , P9 , P10 , P11 , P12 , P13 , P14 , P15 , P16  ,
    detail::none , detail::none , detail::none , detail::none , detail::none ,
    detail::none , detail::none , detail::none , detail::none , detail::none ,
    detail::none , detail::none , detail::none , detail::none , detail::none ,
    detail::none , detail::none , detail::none , detail::none , detail::none ,
    detail::none , detail::none , detail::none , detail::none , detail::none ,
    detail::none , detail::none , detail::none , detail::none , detail::none ,
    detail::none , detail::none , detail::none , detail::none  >
{
    typedef Interface interface_type;
    static const bool isOneway = IsOneway;
    typedef typename mapping::return_type< Return >::type return_type;

    typedef typename mapping::arg_type< P0 >::type p0_type;
    typedef typename mapping::arg_type< P1 >::type p1_type;
    typedef typename mapping::arg_type< P2 >::type p2_type;
    typedef typename mapping::arg_type< P3 >::type p3_type;
    typedef typename mapping::arg_type< P4 >::type p4_type;
    typedef typename mapping::arg_type< P5 >::type p5_type;
    typedef typename mapping::arg_type< P6 >::type p6_type;
    typedef typename mapping::arg_type< P7 >::type p7_type;
    typedef typename mapping::arg_type< P8 >::type p8_type;
    typedef typename mapping::arg_type< P9 >::type p9_type;
    typedef typename mapping::arg_type< P10 >::type p10_type;
    typedef typename mapping::arg_type< P11 >::type p11_type;
    typedef typename mapping::arg_type< P12 >::type p12_type;
    typedef typename mapping::arg_type< P13 >::type p13_type;
    typedef typename mapping::arg_type< P14 >::type p14_type;
    typedef typename mapping::arg_type< P15 >::type p15_type;
    typedef typename mapping::arg_type< P16 >::type p16_type;

	struct parameters_t
	{
    		P0 p0;
    		P1 p1;
    		P2 p2;
    		P3 p3;
    		P4 p4;
    		P5 p5;
    		P6 p6;
    		P7 p7;
    		P8 p8;
    		P9 p9;
    		P10 p10;
    		P11 p11;
    		P12 p12;
    		P13 p13;
    		P14 p14;
    		P15 p15;
    		P16 p16;
    	};

    typedef return_type (interface_type::*type)(p0_type , p1_type , p2_type ,
        p3_type , p4_type , p5_type , p6_type , p7_type , p8_type , p9_type ,
        p10_type , p11_type , p12_type , p13_type , p14_type , p15_type ,
        p16_type );

    static const unsigned int nparams = 17;

    struct handler_t : public OperationHandler
    {
    	type m_operation;

    	handler_t(type operation) : m_operation(operation)
    	{
    	}

    	void do_call(Servant* _this, ServerRequest* request, const char** names)
    	{

    		typename idlyami::skel::skel_type< P0 >::type __v0(*request, *(names++));
    		typename idlyami::skel::skel_type< P1 >::type __v1(*request, *(names++));
    		typename idlyami::skel::skel_type< P2 >::type __v2(*request, *(names++));
    		typename idlyami::skel::skel_type< P3 >::type __v3(*request, *(names++));
    		typename idlyami::skel::skel_type< P4 >::type __v4(*request, *(names++));
    		typename idlyami::skel::skel_type< P5 >::type __v5(*request, *(names++));
    		typename idlyami::skel::skel_type< P6 >::type __v6(*request, *(names++));
    		typename idlyami::skel::skel_type< P7 >::type __v7(*request, *(names++));
    		typename idlyami::skel::skel_type< P8 >::type __v8(*request, *(names++));
    		typename idlyami::skel::skel_type< P9 >::type __v9(*request, *(names++));
      typename idlyami::skel::skel_type< P10 >::type __v10(*request,
          *(names++));
      typename idlyami::skel::skel_type< P11 >::type __v11(*request,
          *(names++));
      typename idlyami::skel::skel_type< P12 >::type __v12(*request,
          *(names++));
      typename idlyami::skel::skel_type< P13 >::type __v13(*request,
          *(names++));
      typename idlyami::skel::skel_type< P14 >::type __v14(*request,
          *(names++));
      typename idlyami::skel::skel_type< P15 >::type __v15(*request,
          *(names++));
      typename idlyami::skel::skel_type< P16 >::type __v16(*request,
          *(names++));
           (dynamic_cast< interface_type* >(_this)->*m_operation)(__v0.val() ,
               __v1.val() , __v2.val() , __v3.val() , __v4.val() , __v5.val() ,
               __v6.val() , __v7.val() , __v8.val() , __v9.val() ,
               __v10.val() , __v11.val() , __v12.val() , __v13.val() ,
               __v14.val() , __v15.val() , __v16.val() );
    	}
	};
};

template< typename Interface, bool IsOneway, typename Return , typename P0 ,
    typename P1 , typename P2 , typename P3 , typename P4 , typename P5 ,
    typename P6 , typename P7 , typename P8 , typename P9 , typename P10 ,
    typename P11 , typename P12 , typename P13 , typename P14 , typename P15 ,
    typename P16 , typename P17  >
struct Operation< Interface, IsOneway, Return , P0 , P1 , P2 , P3 , P4 , P5 ,
    P6 , P7 , P8 , P9 , P10 , P11 , P12 , P13 , P14 , P15 , P16 , P17  ,
    detail::none , detail::none , detail::none , detail::none , detail::none ,
    detail::none , detail::none , detail::none , detail::none , detail::none ,
    detail::none , detail::none , detail::none , detail::none , detail::none ,
    detail::none , detail::none , detail::none , detail::none , detail::none ,
    detail::none , detail::none , detail::none , detail::none , detail::none ,
    detail::none , detail::none , detail::none , detail::none , detail::none ,
    detail::none , detail::none , detail::none  >
{
    typedef Interface interface_type;
    static const bool isOneway = IsOneway;
    typedef typename mapping::return_type< Return >::type return_type;

    typedef typename mapping::arg_type< P0 >::type p0_type;
    typedef typename mapping::arg_type< P1 >::type p1_type;
    typedef typename mapping::arg_type< P2 >::type p2_type;
    typedef typename mapping::arg_type< P3 >::type p3_type;
    typedef typename mapping::arg_type< P4 >::type p4_type;
    typedef typename mapping::arg_type< P5 >::type p5_type;
    typedef typename mapping::arg_type< P6 >::type p6_type;
    typedef typename mapping::arg_type< P7 >::type p7_type;
    typedef typename mapping::arg_type< P8 >::type p8_type;
    typedef typename mapping::arg_type< P9 >::type p9_type;
    typedef typename mapping::arg_type< P10 >::type p10_type;
    typedef typename mapping::arg_type< P11 >::type p11_type;
    typedef typename mapping::arg_type< P12 >::type p12_type;
    typedef typename mapping::arg_type< P13 >::type p13_type;
    typedef typename mapping::arg_type< P14 >::type p14_type;
    typedef typename mapping::arg_type< P15 >::type p15_type;
    typedef typename mapping::arg_type< P16 >::type p16_type;
    typedef typename mapping::arg_type< P17 >::type p17_type;

	struct parameters_t
	{
    		P0 p0;
    		P1 p1;
    		P2 p2;
    		P3 p3;
    		P4 p4;
    		P5 p5;
    		P6 p6;
    		P7 p7;
    		P8 p8;
    		P9 p9;
    		P10 p10;
    		P11 p11;
    		P12 p12;
    		P13 p13;
    		P14 p14;
    		P15 p15;
    		P16 p16;
    		P17 p17;
    	};

    typedef return_type (interface_type::*type)(p0_type , p1_type , p2_type ,
        p3_type , p4_type , p5_type , p6_type , p7_type , p8_type , p9_type ,
        p10_type , p11_type , p12_type , p13_type , p14_type , p15_type ,
        p16_type , p17_type );

    static const unsigned int nparams = 18;

    struct handler_t : public OperationHandler
    {
    	type m_operation;

    	handler_t(type operation) : m_operation(operation)
    	{
    	}

    	void do_call(Servant* _this, ServerRequest* request, const char** names)
    	{

    		typename idlyami::skel::skel_type< P0 >::type __v0(*request, *(names++));
    		typename idlyami::skel::skel_type< P1 >::type __v1(*request, *(names++));
    		typename idlyami::skel::skel_type< P2 >::type __v2(*request, *(names++));
    		typename idlyami::skel::skel_type< P3 >::type __v3(*request, *(names++));
    		typename idlyami::skel::skel_type< P4 >::type __v4(*request, *(names++));
    		typename idlyami::skel::skel_type< P5 >::type __v5(*request, *(names++));
    		typename idlyami::skel::skel_type< P6 >::type __v6(*request, *(names++));
    		typename idlyami::skel::skel_type< P7 >::type __v7(*request, *(names++));
    		typename idlyami::skel::skel_type< P8 >::type __v8(*request, *(names++));
    		typename idlyami::skel::skel_type< P9 >::type __v9(*request, *(names++));
      typename idlyami::skel::skel_type< P10 >::type __v10(*request,
          *(names++));
      typename idlyami::skel::skel_type< P11 >::type __v11(*request,
          *(names++));
      typename idlyami::skel::skel_type< P12 >::type __v12(*request,
          *(names++));
      typename idlyami::skel::skel_type< P13 >::type __v13(*request,
          *(names++));
      typename idlyami::skel::skel_type< P14 >::type __v14(*request,
          *(names++));
      typename idlyami::skel::skel_type< P15 >::type __v15(*request,
          *(names++));
      typename idlyami::skel::skel_type< P16 >::type __v16(*request,
          *(names++));
      typename idlyami::skel::skel_type< P17 >::type __v17(*request,
          *(names++));
           (dynamic_cast< interface_type* >(_this)->*m_operation)(__v0.val() ,
               __v1.val() , __v2.val() , __v3.val() , __v4.val() , __v5.val() ,
               __v6.val() , __v7.val() , __v8.val() , __v9.val() ,
               __v10.val() , __v11.val() , __v12.val() , __v13.val() ,
               __v14.val() , __v15.val() , __v16.val() , __v17.val() );
    	}
	};
};

template< typename Interface, bool IsOneway, typename Return , typename P0 ,
    typename P1 , typename P2 , typename P3 , typename P4 , typename P5 ,
    typename P6 , typename P7 , typename P8 , typename P9 , typename P10 ,
    typename P11 , typename P12 , typename P13 , typename P14 , typename P15 ,
    typename P16 , typename P17 , typename P18  >
struct Operation< Interface, IsOneway, Return , P0 , P1 , P2 , P3 , P4 , P5 ,
    P6 , P7 , P8 , P9 , P10 , P11 , P12 , P13 , P14 , P15 , P16 , P17 , P18  ,
    detail::none , detail::none , detail::none , detail::none , detail::none ,
    detail::none , detail::none , detail::none , detail::none , detail::none ,
    detail::none , detail::none , detail::none , detail::none , detail::none ,
    detail::none , detail::none , detail::none , detail::none , detail::none ,
    detail::none , detail::none , detail::none , detail::none , detail::none ,
    detail::none , detail::none , detail::none , detail::none , detail::none ,
    detail::none , detail::none  >
{
    typedef Interface interface_type;
    static const bool isOneway = IsOneway;
    typedef typename mapping::return_type< Return >::type return_type;

    typedef typename mapping::arg_type< P0 >::type p0_type;
    typedef typename mapping::arg_type< P1 >::type p1_type;
    typedef typename mapping::arg_type< P2 >::type p2_type;
    typedef typename mapping::arg_type< P3 >::type p3_type;
    typedef typename mapping::arg_type< P4 >::type p4_type;
    typedef typename mapping::arg_type< P5 >::type p5_type;
    typedef typename mapping::arg_type< P6 >::type p6_type;
    typedef typename mapping::arg_type< P7 >::type p7_type;
    typedef typename mapping::arg_type< P8 >::type p8_type;
    typedef typename mapping::arg_type< P9 >::type p9_type;
    typedef typename mapping::arg_type< P10 >::type p10_type;
    typedef typename mapping::arg_type< P11 >::type p11_type;
    typedef typename mapping::arg_type< P12 >::type p12_type;
    typedef typename mapping::arg_type< P13 >::type p13_type;
    typedef typename mapping::arg_type< P14 >::type p14_type;
    typedef typename mapping::arg_type< P15 >::type p15_type;
    typedef typename mapping::arg_type< P16 >::type p16_type;
    typedef typename mapping::arg_type< P17 >::type p17_type;
    typedef typename mapping::arg_type< P18 >::type p18_type;

	struct parameters_t
	{
    		P0 p0;
    		P1 p1;
    		P2 p2;
    		P3 p3;
    		P4 p4;
    		P5 p5;
    		P6 p6;
    		P7 p7;
    		P8 p8;
    		P9 p9;
    		P10 p10;
    		P11 p11;
    		P12 p12;
    		P13 p13;
    		P14 p14;
    		P15 p15;
    		P16 p16;
    		P17 p17;
    		P18 p18;
    	};

    typedef return_type (interface_type::*type)(p0_type , p1_type , p2_type ,
        p3_type , p4_type , p5_type , p6_type , p7_type , p8_type , p9_type ,
        p10_type , p11_type , p12_type , p13_type , p14_type , p15_type ,
        p16_type , p17_type , p18_type );

    static const unsigned int nparams = 19;

    struct handler_t : public OperationHandler
    {
    	type m_operation;

    	handler_t(type operation) : m_operation(operation)
    	{
    	}

    	void do_call(Servant* _this, ServerRequest* request, const char** names)
    	{

    		typename idlyami::skel::skel_type< P0 >::type __v0(*request, *(names++));
    		typename idlyami::skel::skel_type< P1 >::type __v1(*request, *(names++));
    		typename idlyami::skel::skel_type< P2 >::type __v2(*request, *(names++));
    		typename idlyami::skel::skel_type< P3 >::type __v3(*request, *(names++));
    		typename idlyami::skel::skel_type< P4 >::type __v4(*request, *(names++));
    		typename idlyami::skel::skel_type< P5 >::type __v5(*request, *(names++));
    		typename idlyami::skel::skel_type< P6 >::type __v6(*request, *(names++));
    		typename idlyami::skel::skel_type< P7 >::type __v7(*request, *(names++));
    		typename idlyami::skel::skel_type< P8 >::type __v8(*request, *(names++));
    		typename idlyami::skel::skel_type< P9 >::type __v9(*request, *(names++));
      typename idlyami::skel::skel_type< P10 >::type __v10(*request,
          *(names++));
      typename idlyami::skel::skel_type< P11 >::type __v11(*request,
          *(names++));
      typename idlyami::skel::skel_type< P12 >::type __v12(*request,
          *(names++));
      typename idlyami::skel::skel_type< P13 >::type __v13(*request,
          *(names++));
      typename idlyami::skel::skel_type< P14 >::type __v14(*request,
          *(names++));
      typename idlyami::skel::skel_type< P15 >::type __v15(*request,
          *(names++));
      typename idlyami::skel::skel_type< P16 >::type __v16(*request,
          *(names++));
      typename idlyami::skel::skel_type< P17 >::type __v17(*request,
          *(names++));
      typename idlyami::skel::skel_type< P18 >::type __v18(*request,
          *(names++));
           (dynamic_cast< interface_type* >(_this)->*m_operation)(__v0.val() ,
               __v1.val() , __v2.val() , __v3.val() , __v4.val() , __v5.val() ,
               __v6.val() , __v7.val() , __v8.val() , __v9.val() ,
               __v10.val() , __v11.val() , __v12.val() , __v13.val() ,
               __v14.val() , __v15.val() , __v16.val() , __v17.val() ,
               __v18.val() );
    	}
	};
};

template< typename Interface, bool IsOneway, typename Return , typename P0 ,
    typename P1 , typename P2 , typename P3 , typename P4 , typename P5 ,
    typename P6 , typename P7 , typename P8 , typename P9 , typename P10 ,
    typename P11 , typename P12 , typename P13 , typename P14 , typename P15 ,
    typename P16 , typename P17 , typename P18 , typename P19  >
struct Operation< Interface, IsOneway, Return , P0 , P1 , P2 , P3 , P4 , P5 ,
    P6 , P7 , P8 , P9 , P10 , P11 , P12 , P13 , P14 , P15 , P16 , P17 , P18 ,
    P19  , detail::none , detail::none , detail::none , detail::none ,
    detail::none , detail::none , detail::none , detail::none , detail::none ,
    detail::none , detail::none , detail::none , detail::none , detail::none ,
    detail::none , detail::none , detail::none , detail::none , detail::none ,
    detail::none , detail::none , detail::none , detail::none , detail::none ,
    detail::none , detail::none , detail::none , detail::none , detail::none ,
    detail::none , detail::none  >
{
    typedef Interface interface_type;
    static const bool isOneway = IsOneway;
    typedef typename mapping::return_type< Return >::type return_type;

    typedef typename mapping::arg_type< P0 >::type p0_type;
    typedef typename mapping::arg_type< P1 >::type p1_type;
    typedef typename mapping::arg_type< P2 >::type p2_type;
    typedef typename mapping::arg_type< P3 >::type p3_type;
    typedef typename mapping::arg_type< P4 >::type p4_type;
    typedef typename mapping::arg_type< P5 >::type p5_type;
    typedef typename mapping::arg_type< P6 >::type p6_type;
    typedef typename mapping::arg_type< P7 >::type p7_type;
    typedef typename mapping::arg_type< P8 >::type p8_type;
    typedef typename mapping::arg_type< P9 >::type p9_type;
    typedef typename mapping::arg_type< P10 >::type p10_type;
    typedef typename mapping::arg_type< P11 >::type p11_type;
    typedef typename mapping::arg_type< P12 >::type p12_type;
    typedef typename mapping::arg_type< P13 >::type p13_type;
    typedef typename mapping::arg_type< P14 >::type p14_type;
    typedef typename mapping::arg_type< P15 >::type p15_type;
    typedef typename mapping::arg_type< P16 >::type p16_type;
    typedef typename mapping::arg_type< P17 >::type p17_type;
    typedef typename mapping::arg_type< P18 >::type p18_type;
    typedef typename mapping::arg_type< P19 >::type p19_type;

	struct parameters_t
	{
    		P0 p0;
    		P1 p1;
    		P2 p2;
    		P3 p3;
    		P4 p4;
    		P5 p5;
    		P6 p6;
    		P7 p7;
    		P8 p8;
    		P9 p9;
    		P10 p10;
    		P11 p11;
    		P12 p12;
    		P13 p13;
    		P14 p14;
    		P15 p15;
    		P16 p16;
    		P17 p17;
    		P18 p18;
    		P19 p19;
    	};

    typedef return_type (interface_type::*type)(p0_type , p1_type , p2_type ,
        p3_type , p4_type , p5_type , p6_type , p7_type , p8_type , p9_type ,
        p10_type , p11_type , p12_type , p13_type , p14_type , p15_type ,
        p16_type , p17_type , p18_type , p19_type );

    static const unsigned int nparams = 20;

    struct handler_t : public OperationHandler
    {
    	type m_operation;

    	handler_t(type operation) : m_operation(operation)
    	{
    	}

    	void do_call(Servant* _this, ServerRequest* request, const char** names)
    	{

    		typename idlyami::skel::skel_type< P0 >::type __v0(*request, *(names++));
    		typename idlyami::skel::skel_type< P1 >::type __v1(*request, *(names++));
    		typename idlyami::skel::skel_type< P2 >::type __v2(*request, *(names++));
    		typename idlyami::skel::skel_type< P3 >::type __v3(*request, *(names++));
    		typename idlyami::skel::skel_type< P4 >::type __v4(*request, *(names++));
    		typename idlyami::skel::skel_type< P5 >::type __v5(*request, *(names++));
    		typename idlyami::skel::skel_type< P6 >::type __v6(*request, *(names++));
    		typename idlyami::skel::skel_type< P7 >::type __v7(*request, *(names++));
    		typename idlyami::skel::skel_type< P8 >::type __v8(*request, *(names++));
    		typename idlyami::skel::skel_type< P9 >::type __v9(*request, *(names++));
      typename idlyami::skel::skel_type< P10 >::type __v10(*request,
          *(names++));
      typename idlyami::skel::skel_type< P11 >::type __v11(*request,
          *(names++));
      typename idlyami::skel::skel_type< P12 >::type __v12(*request,
          *(names++));
      typename idlyami::skel::skel_type< P13 >::type __v13(*request,
          *(names++));
      typename idlyami::skel::skel_type< P14 >::type __v14(*request,
          *(names++));
      typename idlyami::skel::skel_type< P15 >::type __v15(*request,
          *(names++));
      typename idlyami::skel::skel_type< P16 >::type __v16(*request,
          *(names++));
      typename idlyami::skel::skel_type< P17 >::type __v17(*request,
          *(names++));
      typename idlyami::skel::skel_type< P18 >::type __v18(*request,
          *(names++));
      typename idlyami::skel::skel_type< P19 >::type __v19(*request,
          *(names++));
           (dynamic_cast< interface_type* >(_this)->*m_operation)(__v0.val() ,
               __v1.val() , __v2.val() , __v3.val() , __v4.val() , __v5.val() ,
               __v6.val() , __v7.val() , __v8.val() , __v9.val() ,
               __v10.val() , __v11.val() , __v12.val() , __v13.val() ,
               __v14.val() , __v15.val() , __v16.val() , __v17.val() ,
               __v18.val() , __v19.val() );
    	}
	};
};

template< typename Interface, bool IsOneway, typename Return , typename P0 ,
    typename P1 , typename P2 , typename P3 , typename P4 , typename P5 ,
    typename P6 , typename P7 , typename P8 , typename P9 , typename P10 ,
    typename P11 , typename P12 , typename P13 , typename P14 , typename P15 ,
    typename P16 , typename P17 , typename P18 , typename P19 , typename P20  >
struct Operation< Interface, IsOneway, Return , P0 , P1 , P2 , P3 , P4 , P5 ,
    P6 , P7 , P8 , P9 , P10 , P11 , P12 , P13 , P14 , P15 , P16 , P17 , P18 ,
    P19 , P20  , detail::none , detail::none , detail::none , detail::none ,
    detail::none , detail::none , detail::none , detail::none , detail::none ,
    detail::none , detail::none , detail::none , detail::none , detail::none ,
    detail::none , detail::none , detail::none , detail::none , detail::none ,
    detail::none , detail::none , detail::none , detail::none , detail::none ,
    detail::none , detail::none , detail::none , detail::none , detail::none ,
    detail::none  >
{
    typedef Interface interface_type;
    static const bool isOneway = IsOneway;
    typedef typename mapping::return_type< Return >::type return_type;

    typedef typename mapping::arg_type< P0 >::type p0_type;
    typedef typename mapping::arg_type< P1 >::type p1_type;
    typedef typename mapping::arg_type< P2 >::type p2_type;
    typedef typename mapping::arg_type< P3 >::type p3_type;
    typedef typename mapping::arg_type< P4 >::type p4_type;
    typedef typename mapping::arg_type< P5 >::type p5_type;
    typedef typename mapping::arg_type< P6 >::type p6_type;
    typedef typename mapping::arg_type< P7 >::type p7_type;
    typedef typename mapping::arg_type< P8 >::type p8_type;
    typedef typename mapping::arg_type< P9 >::type p9_type;
    typedef typename mapping::arg_type< P10 >::type p10_type;
    typedef typename mapping::arg_type< P11 >::type p11_type;
    typedef typename mapping::arg_type< P12 >::type p12_type;
    typedef typename mapping::arg_type< P13 >::type p13_type;
    typedef typename mapping::arg_type< P14 >::type p14_type;
    typedef typename mapping::arg_type< P15 >::type p15_type;
    typedef typename mapping::arg_type< P16 >::type p16_type;
    typedef typename mapping::arg_type< P17 >::type p17_type;
    typedef typename mapping::arg_type< P18 >::type p18_type;
    typedef typename mapping::arg_type< P19 >::type p19_type;
    typedef typename mapping::arg_type< P20 >::type p20_type;

	struct parameters_t
	{
    		P0 p0;
    		P1 p1;
    		P2 p2;
    		P3 p3;
    		P4 p4;
    		P5 p5;
    		P6 p6;
    		P7 p7;
    		P8 p8;
    		P9 p9;
    		P10 p10;
    		P11 p11;
    		P12 p12;
    		P13 p13;
    		P14 p14;
    		P15 p15;
    		P16 p16;
    		P17 p17;
    		P18 p18;
    		P19 p19;
    		P20 p20;
    	};

    typedef return_type (interface_type::*type)(p0_type , p1_type , p2_type ,
        p3_type , p4_type , p5_type , p6_type , p7_type , p8_type , p9_type ,
        p10_type , p11_type , p12_type , p13_type , p14_type , p15_type ,
        p16_type , p17_type , p18_type , p19_type , p20_type );

    static const unsigned int nparams = 21;

    struct handler_t : public OperationHandler
    {
    	type m_operation;

    	handler_t(type operation) : m_operation(operation)
    	{
    	}

    	void do_call(Servant* _this, ServerRequest* request, const char** names)
    	{

    		typename idlyami::skel::skel_type< P0 >::type __v0(*request, *(names++));
    		typename idlyami::skel::skel_type< P1 >::type __v1(*request, *(names++));
    		typename idlyami::skel::skel_type< P2 >::type __v2(*request, *(names++));
    		typename idlyami::skel::skel_type< P3 >::type __v3(*request, *(names++));
    		typename idlyami::skel::skel_type< P4 >::type __v4(*request, *(names++));
    		typename idlyami::skel::skel_type< P5 >::type __v5(*request, *(names++));
    		typename idlyami::skel::skel_type< P6 >::type __v6(*request, *(names++));
    		typename idlyami::skel::skel_type< P7 >::type __v7(*request, *(names++));
    		typename idlyami::skel::skel_type< P8 >::type __v8(*request, *(names++));
    		typename idlyami::skel::skel_type< P9 >::type __v9(*request, *(names++));
      typename idlyami::skel::skel_type< P10 >::type __v10(*request,
          *(names++));
      typename idlyami::skel::skel_type< P11 >::type __v11(*request,
          *(names++));
      typename idlyami::skel::skel_type< P12 >::type __v12(*request,
          *(names++));
      typename idlyami::skel::skel_type< P13 >::type __v13(*request,
          *(names++));
      typename idlyami::skel::skel_type< P14 >::type __v14(*request,
          *(names++));
      typename idlyami::skel::skel_type< P15 >::type __v15(*request,
          *(names++));
      typename idlyami::skel::skel_type< P16 >::type __v16(*request,
          *(names++));
      typename idlyami::skel::skel_type< P17 >::type __v17(*request,
          *(names++));
      typename idlyami::skel::skel_type< P18 >::type __v18(*request,
          *(names++));
      typename idlyami::skel::skel_type< P19 >::type __v19(*request,
          *(names++));
      typename idlyami::skel::skel_type< P20 >::type __v20(*request,
          *(names++));
           (dynamic_cast< interface_type* >(_this)->*m_operation)(__v0.val() ,
               __v1.val() , __v2.val() , __v3.val() , __v4.val() , __v5.val() ,
               __v6.val() , __v7.val() , __v8.val() , __v9.val() ,
               __v10.val() , __v11.val() , __v12.val() , __v13.val() ,
               __v14.val() , __v15.val() , __v16.val() , __v17.val() ,
               __v18.val() , __v19.val() , __v20.val() );
    	}
	};
};

template< typename Interface, bool IsOneway, typename Return , typename P0 ,
    typename P1 , typename P2 , typename P3 , typename P4 , typename P5 ,
    typename P6 , typename P7 , typename P8 , typename P9 , typename P10 ,
    typename P11 , typename P12 , typename P13 , typename P14 , typename P15 ,
    typename P16 , typename P17 , typename P18 , typename P19 , typename P20 ,
    typename P21  >
struct Operation< Interface, IsOneway, Return , P0 , P1 , P2 , P3 , P4 , P5 ,
    P6 , P7 , P8 , P9 , P10 , P11 , P12 , P13 , P14 , P15 , P16 , P17 , P18 ,
    P19 , P20 , P21  , detail::none , detail::none , detail::none ,
    detail::none , detail::none , detail::none , detail::none , detail::none ,
    detail::none , detail::none , detail::none , detail::none , detail::none ,
    detail::none , detail::none , detail::none , detail::none , detail::none ,
    detail::none , detail::none , detail::none , detail::none , detail::none ,
    detail::none , detail::none , detail::none , detail::none , detail::none ,
    detail::none  >
{
    typedef Interface interface_type;
    static const bool isOneway = IsOneway;
    typedef typename mapping::return_type< Return >::type return_type;

    typedef typename mapping::arg_type< P0 >::type p0_type;
    typedef typename mapping::arg_type< P1 >::type p1_type;
    typedef typename mapping::arg_type< P2 >::type p2_type;
    typedef typename mapping::arg_type< P3 >::type p3_type;
    typedef typename mapping::arg_type< P4 >::type p4_type;
    typedef typename mapping::arg_type< P5 >::type p5_type;
    typedef typename mapping::arg_type< P6 >::type p6_type;
    typedef typename mapping::arg_type< P7 >::type p7_type;
    typedef typename mapping::arg_type< P8 >::type p8_type;
    typedef typename mapping::arg_type< P9 >::type p9_type;
    typedef typename mapping::arg_type< P10 >::type p10_type;
    typedef typename mapping::arg_type< P11 >::type p11_type;
    typedef typename mapping::arg_type< P12 >::type p12_type;
    typedef typename mapping::arg_type< P13 >::type p13_type;
    typedef typename mapping::arg_type< P14 >::type p14_type;
    typedef typename mapping::arg_type< P15 >::type p15_type;
    typedef typename mapping::arg_type< P16 >::type p16_type;
    typedef typename mapping::arg_type< P17 >::type p17_type;
    typedef typename mapping::arg_type< P18 >::type p18_type;
    typedef typename mapping::arg_type< P19 >::type p19_type;
    typedef typename mapping::arg_type< P20 >::type p20_type;
    typedef typename mapping::arg_type< P21 >::type p21_type;

	struct parameters_t
	{
    		P0 p0;
    		P1 p1;
    		P2 p2;
    		P3 p3;
    		P4 p4;
    		P5 p5;
    		P6 p6;
    		P7 p7;
    		P8 p8;
    		P9 p9;
    		P10 p10;
    		P11 p11;
    		P12 p12;
    		P13 p13;
    		P14 p14;
    		P15 p15;
    		P16 p16;
    		P17 p17;
    		P18 p18;
    		P19 p19;
    		P20 p20;
    		P21 p21;
    	};

    typedef return_type (interface_type::*type)(p0_type , p1_type , p2_type ,
        p3_type , p4_type , p5_type , p6_type , p7_type , p8_type , p9_type ,
        p10_type , p11_type , p12_type , p13_type , p14_type , p15_type ,
        p16_type , p17_type , p18_type , p19_type , p20_type , p21_type );

    static const unsigned int nparams = 22;

    struct handler_t : public OperationHandler
    {
    	type m_operation;

    	handler_t(type operation) : m_operation(operation)
    	{
    	}

    	void do_call(Servant* _this, ServerRequest* request, const char** names)
    	{

    		typename idlyami::skel::skel_type< P0 >::type __v0(*request, *(names++));
    		typename idlyami::skel::skel_type< P1 >::type __v1(*request, *(names++));
    		typename idlyami::skel::skel_type< P2 >::type __v2(*request, *(names++));
    		typename idlyami::skel::skel_type< P3 >::type __v3(*request, *(names++));
    		typename idlyami::skel::skel_type< P4 >::type __v4(*request, *(names++));
    		typename idlyami::skel::skel_type< P5 >::type __v5(*request, *(names++));
    		typename idlyami::skel::skel_type< P6 >::type __v6(*request, *(names++));
    		typename idlyami::skel::skel_type< P7 >::type __v7(*request, *(names++));
    		typename idlyami::skel::skel_type< P8 >::type __v8(*request, *(names++));
    		typename idlyami::skel::skel_type< P9 >::type __v9(*request, *(names++));
      typename idlyami::skel::skel_type< P10 >::type __v10(*request,
          *(names++));
      typename idlyami::skel::skel_type< P11 >::type __v11(*request,
          *(names++));
      typename idlyami::skel::skel_type< P12 >::type __v12(*request,
          *(names++));
      typename idlyami::skel::skel_type< P13 >::type __v13(*request,
          *(names++));
      typename idlyami::skel::skel_type< P14 >::type __v14(*request,
          *(names++));
      typename idlyami::skel::skel_type< P15 >::type __v15(*request,
          *(names++));
      typename idlyami::skel::skel_type< P16 >::type __v16(*request,
          *(names++));
      typename idlyami::skel::skel_type< P17 >::type __v17(*request,
          *(names++));
      typename idlyami::skel::skel_type< P18 >::type __v18(*request,
          *(names++));
      typename idlyami::skel::skel_type< P19 >::type __v19(*request,
          *(names++));
      typename idlyami::skel::skel_type< P20 >::type __v20(*request,
          *(names++));
      typename idlyami::skel::skel_type< P21 >::type __v21(*request,
          *(names++));
           (dynamic_cast< interface_type* >(_this)->*m_operation)(__v0.val() ,
               __v1.val() , __v2.val() , __v3.val() , __v4.val() , __v5.val() ,
               __v6.val() , __v7.val() , __v8.val() , __v9.val() ,
               __v10.val() , __v11.val() , __v12.val() , __v13.val() ,
               __v14.val() , __v15.val() , __v16.val() , __v17.val() ,
               __v18.val() , __v19.val() , __v20.val() , __v21.val() );
    	}
	};
};

template< typename Interface, bool IsOneway, typename Return , typename P0 ,
    typename P1 , typename P2 , typename P3 , typename P4 , typename P5 ,
    typename P6 , typename P7 , typename P8 , typename P9 , typename P10 ,
    typename P11 , typename P12 , typename P13 , typename P14 , typename P15 ,
    typename P16 , typename P17 , typename P18 , typename P19 , typename P20 ,
    typename P21 , typename P22  >
struct Operation< Interface, IsOneway, Return , P0 , P1 , P2 , P3 , P4 , P5 ,
    P6 , P7 , P8 , P9 , P10 , P11 , P12 , P13 , P14 , P15 , P16 , P17 , P18 ,
    P19 , P20 , P21 , P22  , detail::none , detail::none , detail::none ,
    detail::none , detail::none , detail::none , detail::none , detail::none ,
    detail::none , detail::none , detail::none , detail::none , detail::none ,
    detail::none , detail::none , detail::none , detail::none , detail::none ,
    detail::none , detail::none , detail::none , detail::none , detail::none ,
    detail::none , detail::none , detail::none , detail::none , detail::none  >
{
    typedef Interface interface_type;
    static const bool isOneway = IsOneway;
    typedef typename mapping::return_type< Return >::type return_type;

    typedef typename mapping::arg_type< P0 >::type p0_type;
    typedef typename mapping::arg_type< P1 >::type p1_type;
    typedef typename mapping::arg_type< P2 >::type p2_type;
    typedef typename mapping::arg_type< P3 >::type p3_type;
    typedef typename mapping::arg_type< P4 >::type p4_type;
    typedef typename mapping::arg_type< P5 >::type p5_type;
    typedef typename mapping::arg_type< P6 >::type p6_type;
    typedef typename mapping::arg_type< P7 >::type p7_type;
    typedef typename mapping::arg_type< P8 >::type p8_type;
    typedef typename mapping::arg_type< P9 >::type p9_type;
    typedef typename mapping::arg_type< P10 >::type p10_type;
    typedef typename mapping::arg_type< P11 >::type p11_type;
    typedef typename mapping::arg_type< P12 >::type p12_type;
    typedef typename mapping::arg_type< P13 >::type p13_type;
    typedef typename mapping::arg_type< P14 >::type p14_type;
    typedef typename mapping::arg_type< P15 >::type p15_type;
    typedef typename mapping::arg_type< P16 >::type p16_type;
    typedef typename mapping::arg_type< P17 >::type p17_type;
    typedef typename mapping::arg_type< P18 >::type p18_type;
    typedef typename mapping::arg_type< P19 >::type p19_type;
    typedef typename mapping::arg_type< P20 >::type p20_type;
    typedef typename mapping::arg_type< P21 >::type p21_type;
    typedef typename mapping::arg_type< P22 >::type p22_type;

	struct parameters_t
	{
    		P0 p0;
    		P1 p1;
    		P2 p2;
    		P3 p3;
    		P4 p4;
    		P5 p5;
    		P6 p6;
    		P7 p7;
    		P8 p8;
    		P9 p9;
    		P10 p10;
    		P11 p11;
    		P12 p12;
    		P13 p13;
    		P14 p14;
    		P15 p15;
    		P16 p16;
    		P17 p17;
    		P18 p18;
    		P19 p19;
    		P20 p20;
    		P21 p21;
    		P22 p22;
    	};

    typedef return_type (interface_type::*type)(p0_type , p1_type , p2_type ,
        p3_type , p4_type , p5_type , p6_type , p7_type , p8_type , p9_type ,
        p10_type , p11_type , p12_type , p13_type , p14_type , p15_type ,
        p16_type , p17_type , p18_type , p19_type , p20_type , p21_type ,
        p22_type );

    static const unsigned int nparams = 23;

    struct handler_t : public OperationHandler
    {
    	type m_operation;

    	handler_t(type operation) : m_operation(operation)
    	{
    	}

    	void do_call(Servant* _this, ServerRequest* request, const char** names)
    	{

    		typename idlyami::skel::skel_type< P0 >::type __v0(*request, *(names++));
    		typename idlyami::skel::skel_type< P1 >::type __v1(*request, *(names++));
    		typename idlyami::skel::skel_type< P2 >::type __v2(*request, *(names++));
    		typename idlyami::skel::skel_type< P3 >::type __v3(*request, *(names++));
    		typename idlyami::skel::skel_type< P4 >::type __v4(*request, *(names++));
    		typename idlyami::skel::skel_type< P5 >::type __v5(*request, *(names++));
    		typename idlyami::skel::skel_type< P6 >::type __v6(*request, *(names++));
    		typename idlyami::skel::skel_type< P7 >::type __v7(*request, *(names++));
    		typename idlyami::skel::skel_type< P8 >::type __v8(*request, *(names++));
    		typename idlyami::skel::skel_type< P9 >::type __v9(*request, *(names++));
      typename idlyami::skel::skel_type< P10 >::type __v10(*request,
          *(names++));
      typename idlyami::skel::skel_type< P11 >::type __v11(*request,
          *(names++));
      typename idlyami::skel::skel_type< P12 >::type __v12(*request,
          *(names++));
      typename idlyami::skel::skel_type< P13 >::type __v13(*request,
          *(names++));
      typename idlyami::skel::skel_type< P14 >::type __v14(*request,
          *(names++));
      typename idlyami::skel::skel_type< P15 >::type __v15(*request,
          *(names++));
      typename idlyami::skel::skel_type< P16 >::type __v16(*request,
          *(names++));
      typename idlyami::skel::skel_type< P17 >::type __v17(*request,
          *(names++));
      typename idlyami::skel::skel_type< P18 >::type __v18(*request,
          *(names++));
      typename idlyami::skel::skel_type< P19 >::type __v19(*request,
          *(names++));
      typename idlyami::skel::skel_type< P20 >::type __v20(*request,
          *(names++));
      typename idlyami::skel::skel_type< P21 >::type __v21(*request,
          *(names++));
      typename idlyami::skel::skel_type< P22 >::type __v22(*request,
          *(names++));
           (dynamic_cast< interface_type* >(_this)->*m_operation)(__v0.val() ,
               __v1.val() , __v2.val() , __v3.val() , __v4.val() , __v5.val() ,
               __v6.val() , __v7.val() , __v8.val() , __v9.val() ,
               __v10.val() , __v11.val() , __v12.val() , __v13.val() ,
               __v14.val() , __v15.val() , __v16.val() , __v17.val() ,
               __v18.val() , __v19.val() , __v20.val() , __v21.val() ,
               __v22.val() );
    	}
	};
};

template< typename Interface, bool IsOneway, typename Return , typename P0 ,
    typename P1 , typename P2 , typename P3 , typename P4 , typename P5 ,
    typename P6 , typename P7 , typename P8 , typename P9 , typename P10 ,
    typename P11 , typename P12 , typename P13 , typename P14 , typename P15 ,
    typename P16 , typename P17 , typename P18 , typename P19 , typename P20 ,
    typename P21 , typename P22 , typename P23  >
struct Operation< Interface, IsOneway, Return , P0 , P1 , P2 , P3 , P4 , P5 ,
    P6 , P7 , P8 , P9 , P10 , P11 , P12 , P13 , P14 , P15 , P16 , P17 , P18 ,
    P19 , P20 , P21 , P22 , P23  , detail::none , detail::none , detail::none ,
    detail::none , detail::none , detail::none , detail::none , detail::none ,
    detail::none , detail::none , detail::none , detail::none , detail::none ,
    detail::none , detail::none , detail::none , detail::none , detail::none ,
    detail::none , detail::none , detail::none , detail::none , detail::none ,
    detail::none , detail::none , detail::none , detail::none  >
{
    typedef Interface interface_type;
    static const bool isOneway = IsOneway;
    typedef typename mapping::return_type< Return >::type return_type;

    typedef typename mapping::arg_type< P0 >::type p0_type;
    typedef typename mapping::arg_type< P1 >::type p1_type;
    typedef typename mapping::arg_type< P2 >::type p2_type;
    typedef typename mapping::arg_type< P3 >::type p3_type;
    typedef typename mapping::arg_type< P4 >::type p4_type;
    typedef typename mapping::arg_type< P5 >::type p5_type;
    typedef typename mapping::arg_type< P6 >::type p6_type;
    typedef typename mapping::arg_type< P7 >::type p7_type;
    typedef typename mapping::arg_type< P8 >::type p8_type;
    typedef typename mapping::arg_type< P9 >::type p9_type;
    typedef typename mapping::arg_type< P10 >::type p10_type;
    typedef typename mapping::arg_type< P11 >::type p11_type;
    typedef typename mapping::arg_type< P12 >::type p12_type;
    typedef typename mapping::arg_type< P13 >::type p13_type;
    typedef typename mapping::arg_type< P14 >::type p14_type;
    typedef typename mapping::arg_type< P15 >::type p15_type;
    typedef typename mapping::arg_type< P16 >::type p16_type;
    typedef typename mapping::arg_type< P17 >::type p17_type;
    typedef typename mapping::arg_type< P18 >::type p18_type;
    typedef typename mapping::arg_type< P19 >::type p19_type;
    typedef typename mapping::arg_type< P20 >::type p20_type;
    typedef typename mapping::arg_type< P21 >::type p21_type;
    typedef typename mapping::arg_type< P22 >::type p22_type;
    typedef typename mapping::arg_type< P23 >::type p23_type;

	struct parameters_t
	{
    		P0 p0;
    		P1 p1;
    		P2 p2;
    		P3 p3;
    		P4 p4;
    		P5 p5;
    		P6 p6;
    		P7 p7;
    		P8 p8;
    		P9 p9;
    		P10 p10;
    		P11 p11;
    		P12 p12;
    		P13 p13;
    		P14 p14;
    		P15 p15;
    		P16 p16;
    		P17 p17;
    		P18 p18;
    		P19 p19;
    		P20 p20;
    		P21 p21;
    		P22 p22;
    		P23 p23;
    	};

    typedef return_type (interface_type::*type)(p0_type , p1_type , p2_type ,
        p3_type , p4_type , p5_type , p6_type , p7_type , p8_type , p9_type ,
        p10_type , p11_type , p12_type , p13_type , p14_type , p15_type ,
        p16_type , p17_type , p18_type , p19_type , p20_type , p21_type ,
        p22_type , p23_type );

    static const unsigned int nparams = 24;

    struct handler_t : public OperationHandler
    {
    	type m_operation;

    	handler_t(type operation) : m_operation(operation)
    	{
    	}

    	void do_call(Servant* _this, ServerRequest* request, const char** names)
    	{

    		typename idlyami::skel::skel_type< P0 >::type __v0(*request, *(names++));
    		typename idlyami::skel::skel_type< P1 >::type __v1(*request, *(names++));
    		typename idlyami::skel::skel_type< P2 >::type __v2(*request, *(names++));
    		typename idlyami::skel::skel_type< P3 >::type __v3(*request, *(names++));
    		typename idlyami::skel::skel_type< P4 >::type __v4(*request, *(names++));
    		typename idlyami::skel::skel_type< P5 >::type __v5(*request, *(names++));
    		typename idlyami::skel::skel_type< P6 >::type __v6(*request, *(names++));
    		typename idlyami::skel::skel_type< P7 >::type __v7(*request, *(names++));
    		typename idlyami::skel::skel_type< P8 >::type __v8(*request, *(names++));
    		typename idlyami::skel::skel_type< P9 >::type __v9(*request, *(names++));
      typename idlyami::skel::skel_type< P10 >::type __v10(*request,
          *(names++));
      typename idlyami::skel::skel_type< P11 >::type __v11(*request,
          *(names++));
      typename idlyami::skel::skel_type< P12 >::type __v12(*request,
          *(names++));
      typename idlyami::skel::skel_type< P13 >::type __v13(*request,
          *(names++));
      typename idlyami::skel::skel_type< P14 >::type __v14(*request,
          *(names++));
      typename idlyami::skel::skel_type< P15 >::type __v15(*request,
          *(names++));
      typename idlyami::skel::skel_type< P16 >::type __v16(*request,
          *(names++));
      typename idlyami::skel::skel_type< P17 >::type __v17(*request,
          *(names++));
      typename idlyami::skel::skel_type< P18 >::type __v18(*request,
          *(names++));
      typename idlyami::skel::skel_type< P19 >::type __v19(*request,
          *(names++));
      typename idlyami::skel::skel_type< P20 >::type __v20(*request,
          *(names++));
      typename idlyami::skel::skel_type< P21 >::type __v21(*request,
          *(names++));
      typename idlyami::skel::skel_type< P22 >::type __v22(*request,
          *(names++));
      typename idlyami::skel::skel_type< P23 >::type __v23(*request,
          *(names++));
           (dynamic_cast< interface_type* >(_this)->*m_operation)(__v0.val() ,
               __v1.val() , __v2.val() , __v3.val() , __v4.val() , __v5.val() ,
               __v6.val() , __v7.val() , __v8.val() , __v9.val() ,
               __v10.val() , __v11.val() , __v12.val() , __v13.val() ,
               __v14.val() , __v15.val() , __v16.val() , __v17.val() ,
               __v18.val() , __v19.val() , __v20.val() , __v21.val() ,
               __v22.val() , __v23.val() );
    	}
	};
};

template< typename Interface, bool IsOneway, typename Return , typename P0 ,
    typename P1 , typename P2 , typename P3 , typename P4 , typename P5 ,
    typename P6 , typename P7 , typename P8 , typename P9 , typename P10 ,
    typename P11 , typename P12 , typename P13 , typename P14 , typename P15 ,
    typename P16 , typename P17 , typename P18 , typename P19 , typename P20 ,
    typename P21 , typename P22 , typename P23 , typename P24  >
struct Operation< Interface, IsOneway, Return , P0 , P1 , P2 , P3 , P4 , P5 ,
    P6 , P7 , P8 , P9 , P10 , P11 , P12 , P13 , P14 , P15 , P16 , P17 , P18 ,
    P19 , P20 , P21 , P22 , P23 , P24  , detail::none , detail::none ,
    detail::none , detail::none , detail::none , detail::none , detail::none ,
    detail::none , detail::none , detail::none , detail::none , detail::none ,
    detail::none , detail::none , detail::none , detail::none , detail::none ,
    detail::none , detail::none , detail::none , detail::none , detail::none ,
    detail::none , detail::none , detail::none , detail::none  >
{
    typedef Interface interface_type;
    static const bool isOneway = IsOneway;
    typedef typename mapping::return_type< Return >::type return_type;

    typedef typename mapping::arg_type< P0 >::type p0_type;
    typedef typename mapping::arg_type< P1 >::type p1_type;
    typedef typename mapping::arg_type< P2 >::type p2_type;
    typedef typename mapping::arg_type< P3 >::type p3_type;
    typedef typename mapping::arg_type< P4 >::type p4_type;
    typedef typename mapping::arg_type< P5 >::type p5_type;
    typedef typename mapping::arg_type< P6 >::type p6_type;
    typedef typename mapping::arg_type< P7 >::type p7_type;
    typedef typename mapping::arg_type< P8 >::type p8_type;
    typedef typename mapping::arg_type< P9 >::type p9_type;
    typedef typename mapping::arg_type< P10 >::type p10_type;
    typedef typename mapping::arg_type< P11 >::type p11_type;
    typedef typename mapping::arg_type< P12 >::type p12_type;
    typedef typename mapping::arg_type< P13 >::type p13_type;
    typedef typename mapping::arg_type< P14 >::type p14_type;
    typedef typename mapping::arg_type< P15 >::type p15_type;
    typedef typename mapping::arg_type< P16 >::type p16_type;
    typedef typename mapping::arg_type< P17 >::type p17_type;
    typedef typename mapping::arg_type< P18 >::type p18_type;
    typedef typename mapping::arg_type< P19 >::type p19_type;
    typedef typename mapping::arg_type< P20 >::type p20_type;
    typedef typename mapping::arg_type< P21 >::type p21_type;
    typedef typename mapping::arg_type< P22 >::type p22_type;
    typedef typename mapping::arg_type< P23 >::type p23_type;
    typedef typename mapping::arg_type< P24 >::type p24_type;

	struct parameters_t
	{
    		P0 p0;
    		P1 p1;
    		P2 p2;
    		P3 p3;
    		P4 p4;
    		P5 p5;
    		P6 p6;
    		P7 p7;
    		P8 p8;
    		P9 p9;
    		P10 p10;
    		P11 p11;
    		P12 p12;
    		P13 p13;
    		P14 p14;
    		P15 p15;
    		P16 p16;
    		P17 p17;
    		P18 p18;
    		P19 p19;
    		P20 p20;
    		P21 p21;
    		P22 p22;
    		P23 p23;
    		P24 p24;
    	};

    typedef return_type (interface_type::*type)(p0_type , p1_type , p2_type ,
        p3_type , p4_type , p5_type , p6_type , p7_type , p8_type , p9_type ,
        p10_type , p11_type , p12_type , p13_type , p14_type , p15_type ,
        p16_type , p17_type , p18_type , p19_type , p20_type , p21_type ,
        p22_type , p23_type , p24_type );

    static const unsigned int nparams = 25;

    struct handler_t : public OperationHandler
    {
    	type m_operation;

    	handler_t(type operation) : m_operation(operation)
    	{
    	}

    	void do_call(Servant* _this, ServerRequest* request, const char** names)
    	{

    		typename idlyami::skel::skel_type< P0 >::type __v0(*request, *(names++));
    		typename idlyami::skel::skel_type< P1 >::type __v1(*request, *(names++));
    		typename idlyami::skel::skel_type< P2 >::type __v2(*request, *(names++));
    		typename idlyami::skel::skel_type< P3 >::type __v3(*request, *(names++));
    		typename idlyami::skel::skel_type< P4 >::type __v4(*request, *(names++));
    		typename idlyami::skel::skel_type< P5 >::type __v5(*request, *(names++));
    		typename idlyami::skel::skel_type< P6 >::type __v6(*request, *(names++));
    		typename idlyami::skel::skel_type< P7 >::type __v7(*request, *(names++));
    		typename idlyami::skel::skel_type< P8 >::type __v8(*request, *(names++));
    		typename idlyami::skel::skel_type< P9 >::type __v9(*request, *(names++));
      typename idlyami::skel::skel_type< P10 >::type __v10(*request,
          *(names++));
      typename idlyami::skel::skel_type< P11 >::type __v11(*request,
          *(names++));
      typename idlyami::skel::skel_type< P12 >::type __v12(*request,
          *(names++));
      typename idlyami::skel::skel_type< P13 >::type __v13(*request,
          *(names++));
      typename idlyami::skel::skel_type< P14 >::type __v14(*request,
          *(names++));
      typename idlyami::skel::skel_type< P15 >::type __v15(*request,
          *(names++));
      typename idlyami::skel::skel_type< P16 >::type __v16(*request,
          *(names++));
      typename idlyami::skel::skel_type< P17 >::type __v17(*request,
          *(names++));
      typename idlyami::skel::skel_type< P18 >::type __v18(*request,
          *(names++));
      typename idlyami::skel::skel_type< P19 >::type __v19(*request,
          *(names++));
      typename idlyami::skel::skel_type< P20 >::type __v20(*request,
          *(names++));
      typename idlyami::skel::skel_type< P21 >::type __v21(*request,
          *(names++));
      typename idlyami::skel::skel_type< P22 >::type __v22(*request,
          *(names++));
      typename idlyami::skel::skel_type< P23 >::type __v23(*request,
          *(names++));
      typename idlyami::skel::skel_type< P24 >::type __v24(*request,
          *(names++));
           (dynamic_cast< interface_type* >(_this)->*m_operation)(__v0.val() ,
               __v1.val() , __v2.val() , __v3.val() , __v4.val() , __v5.val() ,
               __v6.val() , __v7.val() , __v8.val() , __v9.val() ,
               __v10.val() , __v11.val() , __v12.val() , __v13.val() ,
               __v14.val() , __v15.val() , __v16.val() , __v17.val() ,
               __v18.val() , __v19.val() , __v20.val() , __v21.val() ,
               __v22.val() , __v23.val() , __v24.val() );
    	}
	};
};

template< typename Interface, bool IsOneway, typename Return , typename P0 ,
    typename P1 , typename P2 , typename P3 , typename P4 , typename P5 ,
    typename P6 , typename P7 , typename P8 , typename P9 , typename P10 ,
    typename P11 , typename P12 , typename P13 , typename P14 , typename P15 ,
    typename P16 , typename P17 , typename P18 , typename P19 , typename P20 ,
    typename P21 , typename P22 , typename P23 , typename P24 , typename P25  >
struct Operation< Interface, IsOneway, Return , P0 , P1 , P2 , P3 , P4 , P5 ,
    P6 , P7 , P8 , P9 , P10 , P11 , P12 , P13 , P14 , P15 , P16 , P17 , P18 ,
    P19 , P20 , P21 , P22 , P23 , P24 , P25  , detail::none , detail::none ,
    detail::none , detail::none , detail::none , detail::none , detail::none ,
    detail::none , detail::none , detail::none , detail::none , detail::none ,
    detail::none , detail::none , detail::none , detail::none , detail::none ,
    detail::none , detail::none , detail::none , detail::none , detail::none ,
    detail::none , detail::none , detail::none  >
{
    typedef Interface interface_type;
    static const bool isOneway = IsOneway;
    typedef typename mapping::return_type< Return >::type return_type;

    typedef typename mapping::arg_type< P0 >::type p0_type;
    typedef typename mapping::arg_type< P1 >::type p1_type;
    typedef typename mapping::arg_type< P2 >::type p2_type;
    typedef typename mapping::arg_type< P3 >::type p3_type;
    typedef typename mapping::arg_type< P4 >::type p4_type;
    typedef typename mapping::arg_type< P5 >::type p5_type;
    typedef typename mapping::arg_type< P6 >::type p6_type;
    typedef typename mapping::arg_type< P7 >::type p7_type;
    typedef typename mapping::arg_type< P8 >::type p8_type;
    typedef typename mapping::arg_type< P9 >::type p9_type;
    typedef typename mapping::arg_type< P10 >::type p10_type;
    typedef typename mapping::arg_type< P11 >::type p11_type;
    typedef typename mapping::arg_type< P12 >::type p12_type;
    typedef typename mapping::arg_type< P13 >::type p13_type;
    typedef typename mapping::arg_type< P14 >::type p14_type;
    typedef typename mapping::arg_type< P15 >::type p15_type;
    typedef typename mapping::arg_type< P16 >::type p16_type;
    typedef typename mapping::arg_type< P17 >::type p17_type;
    typedef typename mapping::arg_type< P18 >::type p18_type;
    typedef typename mapping::arg_type< P19 >::type p19_type;
    typedef typename mapping::arg_type< P20 >::type p20_type;
    typedef typename mapping::arg_type< P21 >::type p21_type;
    typedef typename mapping::arg_type< P22 >::type p22_type;
    typedef typename mapping::arg_type< P23 >::type p23_type;
    typedef typename mapping::arg_type< P24 >::type p24_type;
    typedef typename mapping::arg_type< P25 >::type p25_type;

	struct parameters_t
	{
    		P0 p0;
    		P1 p1;
    		P2 p2;
    		P3 p3;
    		P4 p4;
    		P5 p5;
    		P6 p6;
    		P7 p7;
    		P8 p8;
    		P9 p9;
    		P10 p10;
    		P11 p11;
    		P12 p12;
    		P13 p13;
    		P14 p14;
    		P15 p15;
    		P16 p16;
    		P17 p17;
    		P18 p18;
    		P19 p19;
    		P20 p20;
    		P21 p21;
    		P22 p22;
    		P23 p23;
    		P24 p24;
    		P25 p25;
    	};

    typedef return_type (interface_type::*type)(p0_type , p1_type , p2_type ,
        p3_type , p4_type , p5_type , p6_type , p7_type , p8_type , p9_type ,
        p10_type , p11_type , p12_type , p13_type , p14_type , p15_type ,
        p16_type , p17_type , p18_type , p19_type , p20_type , p21_type ,
        p22_type , p23_type , p24_type , p25_type );

    static const unsigned int nparams = 26;

    struct handler_t : public OperationHandler
    {
    	type m_operation;

    	handler_t(type operation) : m_operation(operation)
    	{
    	}

    	void do_call(Servant* _this, ServerRequest* request, const char** names)
    	{

    		typename idlyami::skel::skel_type< P0 >::type __v0(*request, *(names++));
    		typename idlyami::skel::skel_type< P1 >::type __v1(*request, *(names++));
    		typename idlyami::skel::skel_type< P2 >::type __v2(*request, *(names++));
    		typename idlyami::skel::skel_type< P3 >::type __v3(*request, *(names++));
    		typename idlyami::skel::skel_type< P4 >::type __v4(*request, *(names++));
    		typename idlyami::skel::skel_type< P5 >::type __v5(*request, *(names++));
    		typename idlyami::skel::skel_type< P6 >::type __v6(*request, *(names++));
    		typename idlyami::skel::skel_type< P7 >::type __v7(*request, *(names++));
    		typename idlyami::skel::skel_type< P8 >::type __v8(*request, *(names++));
    		typename idlyami::skel::skel_type< P9 >::type __v9(*request, *(names++));
      typename idlyami::skel::skel_type< P10 >::type __v10(*request,
          *(names++));
      typename idlyami::skel::skel_type< P11 >::type __v11(*request,
          *(names++));
      typename idlyami::skel::skel_type< P12 >::type __v12(*request,
          *(names++));
      typename idlyami::skel::skel_type< P13 >::type __v13(*request,
          *(names++));
      typename idlyami::skel::skel_type< P14 >::type __v14(*request,
          *(names++));
      typename idlyami::skel::skel_type< P15 >::type __v15(*request,
          *(names++));
      typename idlyami::skel::skel_type< P16 >::type __v16(*request,
          *(names++));
      typename idlyami::skel::skel_type< P17 >::type __v17(*request,
          *(names++));
      typename idlyami::skel::skel_type< P18 >::type __v18(*request,
          *(names++));
      typename idlyami::skel::skel_type< P19 >::type __v19(*request,
          *(names++));
      typename idlyami::skel::skel_type< P20 >::type __v20(*request,
          *(names++));
      typename idlyami::skel::skel_type< P21 >::type __v21(*request,
          *(names++));
      typename idlyami::skel::skel_type< P22 >::type __v22(*request,
          *(names++));
      typename idlyami::skel::skel_type< P23 >::type __v23(*request,
          *(names++));
      typename idlyami::skel::skel_type< P24 >::type __v24(*request,
          *(names++));
      typename idlyami::skel::skel_type< P25 >::type __v25(*request,
          *(names++));
           (dynamic_cast< interface_type* >(_this)->*m_operation)(__v0.val() ,
               __v1.val() , __v2.val() , __v3.val() , __v4.val() , __v5.val() ,
               __v6.val() , __v7.val() , __v8.val() , __v9.val() ,
               __v10.val() , __v11.val() , __v12.val() , __v13.val() ,
               __v14.val() , __v15.val() , __v16.val() , __v17.val() ,
               __v18.val() , __v19.val() , __v20.val() , __v21.val() ,
               __v22.val() , __v23.val() , __v24.val() , __v25.val() );
    	}
	};
};

template< typename Interface, bool IsOneway, typename Return , typename P0 ,
    typename P1 , typename P2 , typename P3 , typename P4 , typename P5 ,
    typename P6 , typename P7 , typename P8 , typename P9 , typename P10 ,
    typename P11 , typename P12 , typename P13 , typename P14 , typename P15 ,
    typename P16 , typename P17 , typename P18 , typename P19 , typename P20 ,
    typename P21 , typename P22 , typename P23 , typename P24 , typename P25 ,
    typename P26  >
struct Operation< Interface, IsOneway, Return , P0 , P1 , P2 , P3 , P4 , P5 ,
    P6 , P7 , P8 , P9 , P10 , P11 , P12 , P13 , P14 , P15 , P16 , P17 , P18 ,
    P19 , P20 , P21 , P22 , P23 , P24 , P25 , P26  , detail::none ,
    detail::none , detail::none , detail::none , detail::none , detail::none ,
    detail::none , detail::none , detail::none , detail::none , detail::none ,
    detail::none , detail::none , detail::none , detail::none , detail::none ,
    detail::none , detail::none , detail::none , detail::none , detail::none ,
    detail::none , detail::none , detail::none  >
{
    typedef Interface interface_type;
    static const bool isOneway = IsOneway;
    typedef typename mapping::return_type< Return >::type return_type;

    typedef typename mapping::arg_type< P0 >::type p0_type;
    typedef typename mapping::arg_type< P1 >::type p1_type;
    typedef typename mapping::arg_type< P2 >::type p2_type;
    typedef typename mapping::arg_type< P3 >::type p3_type;
    typedef typename mapping::arg_type< P4 >::type p4_type;
    typedef typename mapping::arg_type< P5 >::type p5_type;
    typedef typename mapping::arg_type< P6 >::type p6_type;
    typedef typename mapping::arg_type< P7 >::type p7_type;
    typedef typename mapping::arg_type< P8 >::type p8_type;
    typedef typename mapping::arg_type< P9 >::type p9_type;
    typedef typename mapping::arg_type< P10 >::type p10_type;
    typedef typename mapping::arg_type< P11 >::type p11_type;
    typedef typename mapping::arg_type< P12 >::type p12_type;
    typedef typename mapping::arg_type< P13 >::type p13_type;
    typedef typename mapping::arg_type< P14 >::type p14_type;
    typedef typename mapping::arg_type< P15 >::type p15_type;
    typedef typename mapping::arg_type< P16 >::type p16_type;
    typedef typename mapping::arg_type< P17 >::type p17_type;
    typedef typename mapping::arg_type< P18 >::type p18_type;
    typedef typename mapping::arg_type< P19 >::type p19_type;
    typedef typename mapping::arg_type< P20 >::type p20_type;
    typedef typename mapping::arg_type< P21 >::type p21_type;
    typedef typename mapping::arg_type< P22 >::type p22_type;
    typedef typename mapping::arg_type< P23 >::type p23_type;
    typedef typename mapping::arg_type< P24 >::type p24_type;
    typedef typename mapping::arg_type< P25 >::type p25_type;
    typedef typename mapping::arg_type< P26 >::type p26_type;

	struct parameters_t
	{
    		P0 p0;
    		P1 p1;
    		P2 p2;
    		P3 p3;
    		P4 p4;
    		P5 p5;
    		P6 p6;
    		P7 p7;
    		P8 p8;
    		P9 p9;
    		P10 p10;
    		P11 p11;
    		P12 p12;
    		P13 p13;
    		P14 p14;
    		P15 p15;
    		P16 p16;
    		P17 p17;
    		P18 p18;
    		P19 p19;
    		P20 p20;
    		P21 p21;
    		P22 p22;
    		P23 p23;
    		P24 p24;
    		P25 p25;
    		P26 p26;
    	};

    typedef return_type (interface_type::*type)(p0_type , p1_type , p2_type ,
        p3_type , p4_type , p5_type , p6_type , p7_type , p8_type , p9_type ,
        p10_type , p11_type , p12_type , p13_type , p14_type , p15_type ,
        p16_type , p17_type , p18_type , p19_type , p20_type , p21_type ,
        p22_type , p23_type , p24_type , p25_type , p26_type );

    static const unsigned int nparams = 27;

    struct handler_t : public OperationHandler
    {
    	type m_operation;

    	handler_t(type operation) : m_operation(operation)
    	{
    	}

    	void do_call(Servant* _this, ServerRequest* request, const char** names)
    	{

    		typename idlyami::skel::skel_type< P0 >::type __v0(*request, *(names++));
    		typename idlyami::skel::skel_type< P1 >::type __v1(*request, *(names++));
    		typename idlyami::skel::skel_type< P2 >::type __v2(*request, *(names++));
    		typename idlyami::skel::skel_type< P3 >::type __v3(*request, *(names++));
    		typename idlyami::skel::skel_type< P4 >::type __v4(*request, *(names++));
    		typename idlyami::skel::skel_type< P5 >::type __v5(*request, *(names++));
    		typename idlyami::skel::skel_type< P6 >::type __v6(*request, *(names++));
    		typename idlyami::skel::skel_type< P7 >::type __v7(*request, *(names++));
    		typename idlyami::skel::skel_type< P8 >::type __v8(*request, *(names++));
    		typename idlyami::skel::skel_type< P9 >::type __v9(*request, *(names++));
      typename idlyami::skel::skel_type< P10 >::type __v10(*request,
          *(names++));
      typename idlyami::skel::skel_type< P11 >::type __v11(*request,
          *(names++));
      typename idlyami::skel::skel_type< P12 >::type __v12(*request,
          *(names++));
      typename idlyami::skel::skel_type< P13 >::type __v13(*request,
          *(names++));
      typename idlyami::skel::skel_type< P14 >::type __v14(*request,
          *(names++));
      typename idlyami::skel::skel_type< P15 >::type __v15(*request,
          *(names++));
      typename idlyami::skel::skel_type< P16 >::type __v16(*request,
          *(names++));
      typename idlyami::skel::skel_type< P17 >::type __v17(*request,
          *(names++));
      typename idlyami::skel::skel_type< P18 >::type __v18(*request,
          *(names++));
      typename idlyami::skel::skel_type< P19 >::type __v19(*request,
          *(names++));
      typename idlyami::skel::skel_type< P20 >::type __v20(*request,
          *(names++));
      typename idlyami::skel::skel_type< P21 >::type __v21(*request,
          *(names++));
      typename idlyami::skel::skel_type< P22 >::type __v22(*request,
          *(names++));
      typename idlyami::skel::skel_type< P23 >::type __v23(*request,
          *(names++));
      typename idlyami::skel::skel_type< P24 >::type __v24(*request,
          *(names++));
      typename idlyami::skel::skel_type< P25 >::type __v25(*request,
          *(names++));
      typename idlyami::skel::skel_type< P26 >::type __v26(*request,
          *(names++));
           (dynamic_cast< interface_type* >(_this)->*m_operation)(__v0.val() ,
               __v1.val() , __v2.val() , __v3.val() , __v4.val() , __v5.val() ,
               __v6.val() , __v7.val() , __v8.val() , __v9.val() ,
               __v10.val() , __v11.val() , __v12.val() , __v13.val() ,
               __v14.val() , __v15.val() , __v16.val() , __v17.val() ,
               __v18.val() , __v19.val() , __v20.val() , __v21.val() ,
               __v22.val() , __v23.val() , __v24.val() , __v25.val() ,
               __v26.val() );
    	}
	};
};

template< typename Interface, bool IsOneway, typename Return , typename P0 ,
    typename P1 , typename P2 , typename P3 , typename P4 , typename P5 ,
    typename P6 , typename P7 , typename P8 , typename P9 , typename P10 ,
    typename P11 , typename P12 , typename P13 , typename P14 , typename P15 ,
    typename P16 , typename P17 , typename P18 , typename P19 , typename P20 ,
    typename P21 , typename P22 , typename P23 , typename P24 , typename P25 ,
    typename P26 , typename P27  >
struct Operation< Interface, IsOneway, Return , P0 , P1 , P2 , P3 , P4 , P5 ,
    P6 , P7 , P8 , P9 , P10 , P11 , P12 , P13 , P14 , P15 , P16 , P17 , P18 ,
    P19 , P20 , P21 , P22 , P23 , P24 , P25 , P26 , P27  , detail::none ,
    detail::none , detail::none , detail::none , detail::none , detail::none ,
    detail::none , detail::none , detail::none , detail::none , detail::none ,
    detail::none , detail::none , detail::none , detail::none , detail::none ,
    detail::none , detail::none , detail::none , detail::none , detail::none ,
    detail::none , detail::none  >
{
    typedef Interface interface_type;
    static const bool isOneway = IsOneway;
    typedef typename mapping::return_type< Return >::type return_type;

    typedef typename mapping::arg_type< P0 >::type p0_type;
    typedef typename mapping::arg_type< P1 >::type p1_type;
    typedef typename mapping::arg_type< P2 >::type p2_type;
    typedef typename mapping::arg_type< P3 >::type p3_type;
    typedef typename mapping::arg_type< P4 >::type p4_type;
    typedef typename mapping::arg_type< P5 >::type p5_type;
    typedef typename mapping::arg_type< P6 >::type p6_type;
    typedef typename mapping::arg_type< P7 >::type p7_type;
    typedef typename mapping::arg_type< P8 >::type p8_type;
    typedef typename mapping::arg_type< P9 >::type p9_type;
    typedef typename mapping::arg_type< P10 >::type p10_type;
    typedef typename mapping::arg_type< P11 >::type p11_type;
    typedef typename mapping::arg_type< P12 >::type p12_type;
    typedef typename mapping::arg_type< P13 >::type p13_type;
    typedef typename mapping::arg_type< P14 >::type p14_type;
    typedef typename mapping::arg_type< P15 >::type p15_type;
    typedef typename mapping::arg_type< P16 >::type p16_type;
    typedef typename mapping::arg_type< P17 >::type p17_type;
    typedef typename mapping::arg_type< P18 >::type p18_type;
    typedef typename mapping::arg_type< P19 >::type p19_type;
    typedef typename mapping::arg_type< P20 >::type p20_type;
    typedef typename mapping::arg_type< P21 >::type p21_type;
    typedef typename mapping::arg_type< P22 >::type p22_type;
    typedef typename mapping::arg_type< P23 >::type p23_type;
    typedef typename mapping::arg_type< P24 >::type p24_type;
    typedef typename mapping::arg_type< P25 >::type p25_type;
    typedef typename mapping::arg_type< P26 >::type p26_type;
    typedef typename mapping::arg_type< P27 >::type p27_type;

	struct parameters_t
	{
    		P0 p0;
    		P1 p1;
    		P2 p2;
    		P3 p3;
    		P4 p4;
    		P5 p5;
    		P6 p6;
    		P7 p7;
    		P8 p8;
    		P9 p9;
    		P10 p10;
    		P11 p11;
    		P12 p12;
    		P13 p13;
    		P14 p14;
    		P15 p15;
    		P16 p16;
    		P17 p17;
    		P18 p18;
    		P19 p19;
    		P20 p20;
    		P21 p21;
    		P22 p22;
    		P23 p23;
    		P24 p24;
    		P25 p25;
    		P26 p26;
    		P27 p27;
    	};

    typedef return_type (interface_type::*type)(p0_type , p1_type , p2_type ,
        p3_type , p4_type , p5_type , p6_type , p7_type , p8_type , p9_type ,
        p10_type , p11_type , p12_type , p13_type , p14_type , p15_type ,
        p16_type , p17_type , p18_type , p19_type , p20_type , p21_type ,
        p22_type , p23_type , p24_type , p25_type , p26_type , p27_type );

    static const unsigned int nparams = 28;

    struct handler_t : public OperationHandler
    {
    	type m_operation;

    	handler_t(type operation) : m_operation(operation)
    	{
    	}

    	void do_call(Servant* _this, ServerRequest* request, const char** names)
    	{

    		typename idlyami::skel::skel_type< P0 >::type __v0(*request, *(names++));
    		typename idlyami::skel::skel_type< P1 >::type __v1(*request, *(names++));
    		typename idlyami::skel::skel_type< P2 >::type __v2(*request, *(names++));
    		typename idlyami::skel::skel_type< P3 >::type __v3(*request, *(names++));
    		typename idlyami::skel::skel_type< P4 >::type __v4(*request, *(names++));
    		typename idlyami::skel::skel_type< P5 >::type __v5(*request, *(names++));
    		typename idlyami::skel::skel_type< P6 >::type __v6(*request, *(names++));
    		typename idlyami::skel::skel_type< P7 >::type __v7(*request, *(names++));
    		typename idlyami::skel::skel_type< P8 >::type __v8(*request, *(names++));
    		typename idlyami::skel::skel_type< P9 >::type __v9(*request, *(names++));
      typename idlyami::skel::skel_type< P10 >::type __v10(*request,
          *(names++));
      typename idlyami::skel::skel_type< P11 >::type __v11(*request,
          *(names++));
      typename idlyami::skel::skel_type< P12 >::type __v12(*request,
          *(names++));
      typename idlyami::skel::skel_type< P13 >::type __v13(*request,
          *(names++));
      typename idlyami::skel::skel_type< P14 >::type __v14(*request,
          *(names++));
      typename idlyami::skel::skel_type< P15 >::type __v15(*request,
          *(names++));
      typename idlyami::skel::skel_type< P16 >::type __v16(*request,
          *(names++));
      typename idlyami::skel::skel_type< P17 >::type __v17(*request,
          *(names++));
      typename idlyami::skel::skel_type< P18 >::type __v18(*request,
          *(names++));
      typename idlyami::skel::skel_type< P19 >::type __v19(*request,
          *(names++));
      typename idlyami::skel::skel_type< P20 >::type __v20(*request,
          *(names++));
      typename idlyami::skel::skel_type< P21 >::type __v21(*request,
          *(names++));
      typename idlyami::skel::skel_type< P22 >::type __v22(*request,
          *(names++));
      typename idlyami::skel::skel_type< P23 >::type __v23(*request,
          *(names++));
      typename idlyami::skel::skel_type< P24 >::type __v24(*request,
          *(names++));
      typename idlyami::skel::skel_type< P25 >::type __v25(*request,
          *(names++));
      typename idlyami::skel::skel_type< P26 >::type __v26(*request,
          *(names++));
      typename idlyami::skel::skel_type< P27 >::type __v27(*request,
          *(names++));
           (dynamic_cast< interface_type* >(_this)->*m_operation)(__v0.val() ,
               __v1.val() , __v2.val() , __v3.val() , __v4.val() , __v5.val() ,
               __v6.val() , __v7.val() , __v8.val() , __v9.val() ,
               __v10.val() , __v11.val() , __v12.val() , __v13.val() ,
               __v14.val() , __v15.val() , __v16.val() , __v17.val() ,
               __v18.val() , __v19.val() , __v20.val() , __v21.val() ,
               __v22.val() , __v23.val() , __v24.val() , __v25.val() ,
               __v26.val() , __v27.val() );
    	}
	};
};

template< typename Interface, bool IsOneway, typename Return , typename P0 ,
    typename P1 , typename P2 , typename P3 , typename P4 , typename P5 ,
    typename P6 , typename P7 , typename P8 , typename P9 , typename P10 ,
    typename P11 , typename P12 , typename P13 , typename P14 , typename P15 ,
    typename P16 , typename P17 , typename P18 , typename P19 , typename P20 ,
    typename P21 , typename P22 , typename P23 , typename P24 , typename P25 ,
    typename P26 , typename P27 , typename P28  >
struct Operation< Interface, IsOneway, Return , P0 , P1 , P2 , P3 , P4 , P5 ,
    P6 , P7 , P8 , P9 , P10 , P11 , P12 , P13 , P14 , P15 , P16 , P17 , P18 ,
    P19 , P20 , P21 , P22 , P23 , P24 , P25 , P26 , P27 , P28  , detail::none ,
    detail::none , detail::none , detail::none , detail::none , detail::none ,
    detail::none , detail::none , detail::none , detail::none , detail::none ,
    detail::none , detail::none , detail::none , detail::none , detail::none ,
    detail::none , detail::none , detail::none , detail::none , detail::none ,
    detail::none  >
{
    typedef Interface interface_type;
    static const bool isOneway = IsOneway;
    typedef typename mapping::return_type< Return >::type return_type;

    typedef typename mapping::arg_type< P0 >::type p0_type;
    typedef typename mapping::arg_type< P1 >::type p1_type;
    typedef typename mapping::arg_type< P2 >::type p2_type;
    typedef typename mapping::arg_type< P3 >::type p3_type;
    typedef typename mapping::arg_type< P4 >::type p4_type;
    typedef typename mapping::arg_type< P5 >::type p5_type;
    typedef typename mapping::arg_type< P6 >::type p6_type;
    typedef typename mapping::arg_type< P7 >::type p7_type;
    typedef typename mapping::arg_type< P8 >::type p8_type;
    typedef typename mapping::arg_type< P9 >::type p9_type;
    typedef typename mapping::arg_type< P10 >::type p10_type;
    typedef typename mapping::arg_type< P11 >::type p11_type;
    typedef typename mapping::arg_type< P12 >::type p12_type;
    typedef typename mapping::arg_type< P13 >::type p13_type;
    typedef typename mapping::arg_type< P14 >::type p14_type;
    typedef typename mapping::arg_type< P15 >::type p15_type;
    typedef typename mapping::arg_type< P16 >::type p16_type;
    typedef typename mapping::arg_type< P17 >::type p17_type;
    typedef typename mapping::arg_type< P18 >::type p18_type;
    typedef typename mapping::arg_type< P19 >::type p19_type;
    typedef typename mapping::arg_type< P20 >::type p20_type;
    typedef typename mapping::arg_type< P21 >::type p21_type;
    typedef typename mapping::arg_type< P22 >::type p22_type;
    typedef typename mapping::arg_type< P23 >::type p23_type;
    typedef typename mapping::arg_type< P24 >::type p24_type;
    typedef typename mapping::arg_type< P25 >::type p25_type;
    typedef typename mapping::arg_type< P26 >::type p26_type;
    typedef typename mapping::arg_type< P27 >::type p27_type;
    typedef typename mapping::arg_type< P28 >::type p28_type;

	struct parameters_t
	{
    		P0 p0;
    		P1 p1;
    		P2 p2;
    		P3 p3;
    		P4 p4;
    		P5 p5;
    		P6 p6;
    		P7 p7;
    		P8 p8;
    		P9 p9;
    		P10 p10;
    		P11 p11;
    		P12 p12;
    		P13 p13;
    		P14 p14;
    		P15 p15;
    		P16 p16;
    		P17 p17;
    		P18 p18;
    		P19 p19;
    		P20 p20;
    		P21 p21;
    		P22 p22;
    		P23 p23;
    		P24 p24;
    		P25 p25;
    		P26 p26;
    		P27 p27;
    		P28 p28;
    	};

    typedef return_type (interface_type::*type)(p0_type , p1_type , p2_type ,
        p3_type , p4_type , p5_type , p6_type , p7_type , p8_type , p9_type ,
        p10_type , p11_type , p12_type , p13_type , p14_type , p15_type ,
        p16_type , p17_type , p18_type , p19_type , p20_type , p21_type ,
        p22_type , p23_type , p24_type , p25_type , p26_type , p27_type ,
        p28_type );

    static const unsigned int nparams = 29;

    struct handler_t : public OperationHandler
    {
    	type m_operation;

    	handler_t(type operation) : m_operation(operation)
    	{
    	}

    	void do_call(Servant* _this, ServerRequest* request, const char** names)
    	{

    		typename idlyami::skel::skel_type< P0 >::type __v0(*request, *(names++));
    		typename idlyami::skel::skel_type< P1 >::type __v1(*request, *(names++));
    		typename idlyami::skel::skel_type< P2 >::type __v2(*request, *(names++));
    		typename idlyami::skel::skel_type< P3 >::type __v3(*request, *(names++));
    		typename idlyami::skel::skel_type< P4 >::type __v4(*request, *(names++));
    		typename idlyami::skel::skel_type< P5 >::type __v5(*request, *(names++));
    		typename idlyami::skel::skel_type< P6 >::type __v6(*request, *(names++));
    		typename idlyami::skel::skel_type< P7 >::type __v7(*request, *(names++));
    		typename idlyami::skel::skel_type< P8 >::type __v8(*request, *(names++));
    		typename idlyami::skel::skel_type< P9 >::type __v9(*request, *(names++));
      typename idlyami::skel::skel_type< P10 >::type __v10(*request,
          *(names++));
      typename idlyami::skel::skel_type< P11 >::type __v11(*request,
          *(names++));
      typename idlyami::skel::skel_type< P12 >::type __v12(*request,
          *(names++));
      typename idlyami::skel::skel_type< P13 >::type __v13(*request,
          *(names++));
      typename idlyami::skel::skel_type< P14 >::type __v14(*request,
          *(names++));
      typename idlyami::skel::skel_type< P15 >::type __v15(*request,
          *(names++));
      typename idlyami::skel::skel_type< P16 >::type __v16(*request,
          *(names++));
      typename idlyami::skel::skel_type< P17 >::type __v17(*request,
          *(names++));
      typename idlyami::skel::skel_type< P18 >::type __v18(*request,
          *(names++));
      typename idlyami::skel::skel_type< P19 >::type __v19(*request,
          *(names++));
      typename idlyami::skel::skel_type< P20 >::type __v20(*request,
          *(names++));
      typename idlyami::skel::skel_type< P21 >::type __v21(*request,
          *(names++));
      typename idlyami::skel::skel_type< P22 >::type __v22(*request,
          *(names++));
      typename idlyami::skel::skel_type< P23 >::type __v23(*request,
          *(names++));
      typename idlyami::skel::skel_type< P24 >::type __v24(*request,
          *(names++));
      typename idlyami::skel::skel_type< P25 >::type __v25(*request,
          *(names++));
      typename idlyami::skel::skel_type< P26 >::type __v26(*request,
          *(names++));
      typename idlyami::skel::skel_type< P27 >::type __v27(*request,
          *(names++));
      typename idlyami::skel::skel_type< P28 >::type __v28(*request,
          *(names++));
           (dynamic_cast< interface_type* >(_this)->*m_operation)(__v0.val() ,
               __v1.val() , __v2.val() , __v3.val() , __v4.val() , __v5.val() ,
               __v6.val() , __v7.val() , __v8.val() , __v9.val() ,
               __v10.val() , __v11.val() , __v12.val() , __v13.val() ,
               __v14.val() , __v15.val() , __v16.val() , __v17.val() ,
               __v18.val() , __v19.val() , __v20.val() , __v21.val() ,
               __v22.val() , __v23.val() , __v24.val() , __v25.val() ,
               __v26.val() , __v27.val() , __v28.val() );
    	}
	};
};

template< typename Interface, bool IsOneway, typename Return , typename P0 ,
    typename P1 , typename P2 , typename P3 , typename P4 , typename P5 ,
    typename P6 , typename P7 , typename P8 , typename P9 , typename P10 ,
    typename P11 , typename P12 , typename P13 , typename P14 , typename P15 ,
    typename P16 , typename P17 , typename P18 , typename P19 , typename P20 ,
    typename P21 , typename P22 , typename P23 , typename P24 , typename P25 ,
    typename P26 , typename P27 , typename P28 , typename P29  >
struct Operation< Interface, IsOneway, Return , P0 , P1 , P2 , P3 , P4 , P5 ,
    P6 , P7 , P8 , P9 , P10 , P11 , P12 , P13 , P14 , P15 , P16 , P17 , P18 ,
    P19 , P20 , P21 , P22 , P23 , P24 , P25 , P26 , P27 , P28 , P29  ,
    detail::none , detail::none , detail::none , detail::none , detail::none ,
    detail::none , detail::none , detail::none , detail::none , detail::none ,
    detail::none , detail::none , detail::none , detail::none , detail::none ,
    detail::none , detail::none , detail::none , detail::none , detail::none ,
    detail::none  >
{
    typedef Interface interface_type;
    static const bool isOneway = IsOneway;
    typedef typename mapping::return_type< Return >::type return_type;

    typedef typename mapping::arg_type< P0 >::type p0_type;
    typedef typename mapping::arg_type< P1 >::type p1_type;
    typedef typename mapping::arg_type< P2 >::type p2_type;
    typedef typename mapping::arg_type< P3 >::type p3_type;
    typedef typename mapping::arg_type< P4 >::type p4_type;
    typedef typename mapping::arg_type< P5 >::type p5_type;
    typedef typename mapping::arg_type< P6 >::type p6_type;
    typedef typename mapping::arg_type< P7 >::type p7_type;
    typedef typename mapping::arg_type< P8 >::type p8_type;
    typedef typename mapping::arg_type< P9 >::type p9_type;
    typedef typename mapping::arg_type< P10 >::type p10_type;
    typedef typename mapping::arg_type< P11 >::type p11_type;
    typedef typename mapping::arg_type< P12 >::type p12_type;
    typedef typename mapping::arg_type< P13 >::type p13_type;
    typedef typename mapping::arg_type< P14 >::type p14_type;
    typedef typename mapping::arg_type< P15 >::type p15_type;
    typedef typename mapping::arg_type< P16 >::type p16_type;
    typedef typename mapping::arg_type< P17 >::type p17_type;
    typedef typename mapping::arg_type< P18 >::type p18_type;
    typedef typename mapping::arg_type< P19 >::type p19_type;
    typedef typename mapping::arg_type< P20 >::type p20_type;
    typedef typename mapping::arg_type< P21 >::type p21_type;
    typedef typename mapping::arg_type< P22 >::type p22_type;
    typedef typename mapping::arg_type< P23 >::type p23_type;
    typedef typename mapping::arg_type< P24 >::type p24_type;
    typedef typename mapping::arg_type< P25 >::type p25_type;
    typedef typename mapping::arg_type< P26 >::type p26_type;
    typedef typename mapping::arg_type< P27 >::type p27_type;
    typedef typename mapping::arg_type< P28 >::type p28_type;
    typedef typename mapping::arg_type< P29 >::type p29_type;

	struct parameters_t
	{
    		P0 p0;
    		P1 p1;
    		P2 p2;
    		P3 p3;
    		P4 p4;
    		P5 p5;
    		P6 p6;
    		P7 p7;
    		P8 p8;
    		P9 p9;
    		P10 p10;
    		P11 p11;
    		P12 p12;
    		P13 p13;
    		P14 p14;
    		P15 p15;
    		P16 p16;
    		P17 p17;
    		P18 p18;
    		P19 p19;
    		P20 p20;
    		P21 p21;
    		P22 p22;
    		P23 p23;
    		P24 p24;
    		P25 p25;
    		P26 p26;
    		P27 p27;
    		P28 p28;
    		P29 p29;
    	};

    typedef return_type (interface_type::*type)(p0_type , p1_type , p2_type ,
        p3_type , p4_type , p5_type , p6_type , p7_type , p8_type , p9_type ,
        p10_type , p11_type , p12_type , p13_type , p14_type , p15_type ,
        p16_type , p17_type , p18_type , p19_type , p20_type , p21_type ,
        p22_type , p23_type , p24_type , p25_type , p26_type , p27_type ,
        p28_type , p29_type );

    static const unsigned int nparams = 30;

    struct handler_t : public OperationHandler
    {
    	type m_operation;

    	handler_t(type operation) : m_operation(operation)
    	{
    	}

    	void do_call(Servant* _this, ServerRequest* request, const char** names)
    	{

    		typename idlyami::skel::skel_type< P0 >::type __v0(*request, *(names++));
    		typename idlyami::skel::skel_type< P1 >::type __v1(*request, *(names++));
    		typename idlyami::skel::skel_type< P2 >::type __v2(*request, *(names++));
    		typename idlyami::skel::skel_type< P3 >::type __v3(*request, *(names++));
    		typename idlyami::skel::skel_type< P4 >::type __v4(*request, *(names++));
    		typename idlyami::skel::skel_type< P5 >::type __v5(*request, *(names++));
    		typename idlyami::skel::skel_type< P6 >::type __v6(*request, *(names++));
    		typename idlyami::skel::skel_type< P7 >::type __v7(*request, *(names++));
    		typename idlyami::skel::skel_type< P8 >::type __v8(*request, *(names++));
    		typename idlyami::skel::skel_type< P9 >::type __v9(*request, *(names++));
      typename idlyami::skel::skel_type< P10 >::type __v10(*request,
          *(names++));
      typename idlyami::skel::skel_type< P11 >::type __v11(*request,
          *(names++));
      typename idlyami::skel::skel_type< P12 >::type __v12(*request,
          *(names++));
      typename idlyami::skel::skel_type< P13 >::type __v13(*request,
          *(names++));
      typename idlyami::skel::skel_type< P14 >::type __v14(*request,
          *(names++));
      typename idlyami::skel::skel_type< P15 >::type __v15(*request,
          *(names++));
      typename idlyami::skel::skel_type< P16 >::type __v16(*request,
          *(names++));
      typename idlyami::skel::skel_type< P17 >::type __v17(*request,
          *(names++));
      typename idlyami::skel::skel_type< P18 >::type __v18(*request,
          *(names++));
      typename idlyami::skel::skel_type< P19 >::type __v19(*request,
          *(names++));
      typename idlyami::skel::skel_type< P20 >::type __v20(*request,
          *(names++));
      typename idlyami::skel::skel_type< P21 >::type __v21(*request,
          *(names++));
      typename idlyami::skel::skel_type< P22 >::type __v22(*request,
          *(names++));
      typename idlyami::skel::skel_type< P23 >::type __v23(*request,
          *(names++));
      typename idlyami::skel::skel_type< P24 >::type __v24(*request,
          *(names++));
      typename idlyami::skel::skel_type< P25 >::type __v25(*request,
          *(names++));
      typename idlyami::skel::skel_type< P26 >::type __v26(*request,
          *(names++));
      typename idlyami::skel::skel_type< P27 >::type __v27(*request,
          *(names++));
      typename idlyami::skel::skel_type< P28 >::type __v28(*request,
          *(names++));
      typename idlyami::skel::skel_type< P29 >::type __v29(*request,
          *(names++));
           (dynamic_cast< interface_type* >(_this)->*m_operation)(__v0.val() ,
               __v1.val() , __v2.val() , __v3.val() , __v4.val() , __v5.val() ,
               __v6.val() , __v7.val() , __v8.val() , __v9.val() ,
               __v10.val() , __v11.val() , __v12.val() , __v13.val() ,
               __v14.val() , __v15.val() , __v16.val() , __v17.val() ,
               __v18.val() , __v19.val() , __v20.val() , __v21.val() ,
               __v22.val() , __v23.val() , __v24.val() , __v25.val() ,
               __v26.val() , __v27.val() , __v28.val() , __v29.val() );
    	}
	};
};

template< typename Interface, bool IsOneway, typename Return , typename P0 ,
    typename P1 , typename P2 , typename P3 , typename P4 , typename P5 ,
    typename P6 , typename P7 , typename P8 , typename P9 , typename P10 ,
    typename P11 , typename P12 , typename P13 , typename P14 , typename P15 ,
    typename P16 , typename P17 , typename P18 , typename P19 , typename P20 ,
    typename P21 , typename P22 , typename P23 , typename P24 , typename P25 ,
    typename P26 , typename P27 , typename P28 , typename P29 , typename P30  >
struct Operation< Interface, IsOneway, Return , P0 , P1 , P2 , P3 , P4 , P5 ,
    P6 , P7 , P8 , P9 , P10 , P11 , P12 , P13 , P14 , P15 , P16 , P17 , P18 ,
    P19 , P20 , P21 , P22 , P23 , P24 , P25 , P26 , P27 , P28 , P29 , P30  ,
    detail::none , detail::none , detail::none , detail::none , detail::none ,
    detail::none , detail::none , detail::none , detail::none , detail::none ,
    detail::none , detail::none , detail::none , detail::none , detail::none ,
    detail::none , detail::none , detail::none , detail::none , detail::none  >
{
    typedef Interface interface_type;
    static const bool isOneway = IsOneway;
    typedef typename mapping::return_type< Return >::type return_type;

    typedef typename mapping::arg_type< P0 >::type p0_type;
    typedef typename mapping::arg_type< P1 >::type p1_type;
    typedef typename mapping::arg_type< P2 >::type p2_type;
    typedef typename mapping::arg_type< P3 >::type p3_type;
    typedef typename mapping::arg_type< P4 >::type p4_type;
    typedef typename mapping::arg_type< P5 >::type p5_type;
    typedef typename mapping::arg_type< P6 >::type p6_type;
    typedef typename mapping::arg_type< P7 >::type p7_type;
    typedef typename mapping::arg_type< P8 >::type p8_type;
    typedef typename mapping::arg_type< P9 >::type p9_type;
    typedef typename mapping::arg_type< P10 >::type p10_type;
    typedef typename mapping::arg_type< P11 >::type p11_type;
    typedef typename mapping::arg_type< P12 >::type p12_type;
    typedef typename mapping::arg_type< P13 >::type p13_type;
    typedef typename mapping::arg_type< P14 >::type p14_type;
    typedef typename mapping::arg_type< P15 >::type p15_type;
    typedef typename mapping::arg_type< P16 >::type p16_type;
    typedef typename mapping::arg_type< P17 >::type p17_type;
    typedef typename mapping::arg_type< P18 >::type p18_type;
    typedef typename mapping::arg_type< P19 >::type p19_type;
    typedef typename mapping::arg_type< P20 >::type p20_type;
    typedef typename mapping::arg_type< P21 >::type p21_type;
    typedef typename mapping::arg_type< P22 >::type p22_type;
    typedef typename mapping::arg_type< P23 >::type p23_type;
    typedef typename mapping::arg_type< P24 >::type p24_type;
    typedef typename mapping::arg_type< P25 >::type p25_type;
    typedef typename mapping::arg_type< P26 >::type p26_type;
    typedef typename mapping::arg_type< P27 >::type p27_type;
    typedef typename mapping::arg_type< P28 >::type p28_type;
    typedef typename mapping::arg_type< P29 >::type p29_type;
    typedef typename mapping::arg_type< P30 >::type p30_type;

	struct parameters_t
	{
    		P0 p0;
    		P1 p1;
    		P2 p2;
    		P3 p3;
    		P4 p4;
    		P5 p5;
    		P6 p6;
    		P7 p7;
    		P8 p8;
    		P9 p9;
    		P10 p10;
    		P11 p11;
    		P12 p12;
    		P13 p13;
    		P14 p14;
    		P15 p15;
    		P16 p16;
    		P17 p17;
    		P18 p18;
    		P19 p19;
    		P20 p20;
    		P21 p21;
    		P22 p22;
    		P23 p23;
    		P24 p24;
    		P25 p25;
    		P26 p26;
    		P27 p27;
    		P28 p28;
    		P29 p29;
    		P30 p30;
    	};

    typedef return_type (interface_type::*type)(p0_type , p1_type , p2_type ,
        p3_type , p4_type , p5_type , p6_type , p7_type , p8_type , p9_type ,
        p10_type , p11_type , p12_type , p13_type , p14_type , p15_type ,
        p16_type , p17_type , p18_type , p19_type , p20_type , p21_type ,
        p22_type , p23_type , p24_type , p25_type , p26_type , p27_type ,
        p28_type , p29_type , p30_type );

    static const unsigned int nparams = 31;

    struct handler_t : public OperationHandler
    {
    	type m_operation;

    	handler_t(type operation) : m_operation(operation)
    	{
    	}

    	void do_call(Servant* _this, ServerRequest* request, const char** names)
    	{

    		typename idlyami::skel::skel_type< P0 >::type __v0(*request, *(names++));
    		typename idlyami::skel::skel_type< P1 >::type __v1(*request, *(names++));
    		typename idlyami::skel::skel_type< P2 >::type __v2(*request, *(names++));
    		typename idlyami::skel::skel_type< P3 >::type __v3(*request, *(names++));
    		typename idlyami::skel::skel_type< P4 >::type __v4(*request, *(names++));
    		typename idlyami::skel::skel_type< P5 >::type __v5(*request, *(names++));
    		typename idlyami::skel::skel_type< P6 >::type __v6(*request, *(names++));
    		typename idlyami::skel::skel_type< P7 >::type __v7(*request, *(names++));
    		typename idlyami::skel::skel_type< P8 >::type __v8(*request, *(names++));
    		typename idlyami::skel::skel_type< P9 >::type __v9(*request, *(names++));
      typename idlyami::skel::skel_type< P10 >::type __v10(*request,
          *(names++));
      typename idlyami::skel::skel_type< P11 >::type __v11(*request,
          *(names++));
      typename idlyami::skel::skel_type< P12 >::type __v12(*request,
          *(names++));
      typename idlyami::skel::skel_type< P13 >::type __v13(*request,
          *(names++));
      typename idlyami::skel::skel_type< P14 >::type __v14(*request,
          *(names++));
      typename idlyami::skel::skel_type< P15 >::type __v15(*request,
          *(names++));
      typename idlyami::skel::skel_type< P16 >::type __v16(*request,
          *(names++));
      typename idlyami::skel::skel_type< P17 >::type __v17(*request,
          *(names++));
      typename idlyami::skel::skel_type< P18 >::type __v18(*request,
          *(names++));
      typename idlyami::skel::skel_type< P19 >::type __v19(*request,
          *(names++));
      typename idlyami::skel::skel_type< P20 >::type __v20(*request,
          *(names++));
      typename idlyami::skel::skel_type< P21 >::type __v21(*request,
          *(names++));
      typename idlyami::skel::skel_type< P22 >::type __v22(*request,
          *(names++));
      typename idlyami::skel::skel_type< P23 >::type __v23(*request,
          *(names++));
      typename idlyami::skel::skel_type< P24 >::type __v24(*request,
          *(names++));
      typename idlyami::skel::skel_type< P25 >::type __v25(*request,
          *(names++));
      typename idlyami::skel::skel_type< P26 >::type __v26(*request,
          *(names++));
      typename idlyami::skel::skel_type< P27 >::type __v27(*request,
          *(names++));
      typename idlyami::skel::skel_type< P28 >::type __v28(*request,
          *(names++));
      typename idlyami::skel::skel_type< P29 >::type __v29(*request,
          *(names++));
      typename idlyami::skel::skel_type< P30 >::type __v30(*request,
          *(names++));
           (dynamic_cast< interface_type* >(_this)->*m_operation)(__v0.val() ,
               __v1.val() , __v2.val() , __v3.val() , __v4.val() , __v5.val() ,
               __v6.val() , __v7.val() , __v8.val() , __v9.val() ,
               __v10.val() , __v11.val() , __v12.val() , __v13.val() ,
               __v14.val() , __v15.val() , __v16.val() , __v17.val() ,
               __v18.val() , __v19.val() , __v20.val() , __v21.val() ,
               __v22.val() , __v23.val() , __v24.val() , __v25.val() ,
               __v26.val() , __v27.val() , __v28.val() , __v29.val() ,
               __v30.val() );
    	}
	};
};

template< typename Interface, bool IsOneway, typename Return , typename P0 ,
    typename P1 , typename P2 , typename P3 , typename P4 , typename P5 ,
    typename P6 , typename P7 , typename P8 , typename P9 , typename P10 ,
    typename P11 , typename P12 , typename P13 , typename P14 , typename P15 ,
    typename P16 , typename P17 , typename P18 , typename P19 , typename P20 ,
    typename P21 , typename P22 , typename P23 , typename P24 , typename P25 ,
    typename P26 , typename P27 , typename P28 , typename P29 , typename P30 ,
    typename P31  >
struct Operation< Interface, IsOneway, Return , P0 , P1 , P2 , P3 , P4 , P5 ,
    P6 , P7 , P8 , P9 , P10 , P11 , P12 , P13 , P14 , P15 , P16 , P17 , P18 ,
    P19 , P20 , P21 , P22 , P23 , P24 , P25 , P26 , P27 , P28 , P29 , P30 ,
    P31  , detail::none , detail::none , detail::none , detail::none ,
    detail::none , detail::none , detail::none , detail::none , detail::none ,
    detail::none , detail::none , detail::none , detail::none , detail::none ,
    detail::none , detail::none , detail::none , detail::none , detail::none  >
{
    typedef Interface interface_type;
    static const bool isOneway = IsOneway;
    typedef typename mapping::return_type< Return >::type return_type;

    typedef typename mapping::arg_type< P0 >::type p0_type;
    typedef typename mapping::arg_type< P1 >::type p1_type;
    typedef typename mapping::arg_type< P2 >::type p2_type;
    typedef typename mapping::arg_type< P3 >::type p3_type;
    typedef typename mapping::arg_type< P4 >::type p4_type;
    typedef typename mapping::arg_type< P5 >::type p5_type;
    typedef typename mapping::arg_type< P6 >::type p6_type;
    typedef typename mapping::arg_type< P7 >::type p7_type;
    typedef typename mapping::arg_type< P8 >::type p8_type;
    typedef typename mapping::arg_type< P9 >::type p9_type;
    typedef typename mapping::arg_type< P10 >::type p10_type;
    typedef typename mapping::arg_type< P11 >::type p11_type;
    typedef typename mapping::arg_type< P12 >::type p12_type;
    typedef typename mapping::arg_type< P13 >::type p13_type;
    typedef typename mapping::arg_type< P14 >::type p14_type;
    typedef typename mapping::arg_type< P15 >::type p15_type;
    typedef typename mapping::arg_type< P16 >::type p16_type;
    typedef typename mapping::arg_type< P17 >::type p17_type;
    typedef typename mapping::arg_type< P18 >::type p18_type;
    typedef typename mapping::arg_type< P19 >::type p19_type;
    typedef typename mapping::arg_type< P20 >::type p20_type;
    typedef typename mapping::arg_type< P21 >::type p21_type;
    typedef typename mapping::arg_type< P22 >::type p22_type;
    typedef typename mapping::arg_type< P23 >::type p23_type;
    typedef typename mapping::arg_type< P24 >::type p24_type;
    typedef typename mapping::arg_type< P25 >::type p25_type;
    typedef typename mapping::arg_type< P26 >::type p26_type;
    typedef typename mapping::arg_type< P27 >::type p27_type;
    typedef typename mapping::arg_type< P28 >::type p28_type;
    typedef typename mapping::arg_type< P29 >::type p29_type;
    typedef typename mapping::arg_type< P30 >::type p30_type;
    typedef typename mapping::arg_type< P31 >::type p31_type;

	struct parameters_t
	{
    		P0 p0;
    		P1 p1;
    		P2 p2;
    		P3 p3;
    		P4 p4;
    		P5 p5;
    		P6 p6;
    		P7 p7;
    		P8 p8;
    		P9 p9;
    		P10 p10;
    		P11 p11;
    		P12 p12;
    		P13 p13;
    		P14 p14;
    		P15 p15;
    		P16 p16;
    		P17 p17;
    		P18 p18;
    		P19 p19;
    		P20 p20;
    		P21 p21;
    		P22 p22;
    		P23 p23;
    		P24 p24;
    		P25 p25;
    		P26 p26;
    		P27 p27;
    		P28 p28;
    		P29 p29;
    		P30 p30;
    		P31 p31;
    	};

    typedef return_type (interface_type::*type)(p0_type , p1_type , p2_type ,
        p3_type , p4_type , p5_type , p6_type , p7_type , p8_type , p9_type ,
        p10_type , p11_type , p12_type , p13_type , p14_type , p15_type ,
        p16_type , p17_type , p18_type , p19_type , p20_type , p21_type ,
        p22_type , p23_type , p24_type , p25_type , p26_type , p27_type ,
        p28_type , p29_type , p30_type , p31_type );

    static const unsigned int nparams = 32;

    struct handler_t : public OperationHandler
    {
    	type m_operation;

    	handler_t(type operation) : m_operation(operation)
    	{
    	}

    	void do_call(Servant* _this, ServerRequest* request, const char** names)
    	{

    		typename idlyami::skel::skel_type< P0 >::type __v0(*request, *(names++));
    		typename idlyami::skel::skel_type< P1 >::type __v1(*request, *(names++));
    		typename idlyami::skel::skel_type< P2 >::type __v2(*request, *(names++));
    		typename idlyami::skel::skel_type< P3 >::type __v3(*request, *(names++));
    		typename idlyami::skel::skel_type< P4 >::type __v4(*request, *(names++));
    		typename idlyami::skel::skel_type< P5 >::type __v5(*request, *(names++));
    		typename idlyami::skel::skel_type< P6 >::type __v6(*request, *(names++));
    		typename idlyami::skel::skel_type< P7 >::type __v7(*request, *(names++));
    		typename idlyami::skel::skel_type< P8 >::type __v8(*request, *(names++));
    		typename idlyami::skel::skel_type< P9 >::type __v9(*request, *(names++));
      typename idlyami::skel::skel_type< P10 >::type __v10(*request,
          *(names++));
      typename idlyami::skel::skel_type< P11 >::type __v11(*request,
          *(names++));
      typename idlyami::skel::skel_type< P12 >::type __v12(*request,
          *(names++));
      typename idlyami::skel::skel_type< P13 >::type __v13(*request,
          *(names++));
      typename idlyami::skel::skel_type< P14 >::type __v14(*request,
          *(names++));
      typename idlyami::skel::skel_type< P15 >::type __v15(*request,
          *(names++));
      typename idlyami::skel::skel_type< P16 >::type __v16(*request,
          *(names++));
      typename idlyami::skel::skel_type< P17 >::type __v17(*request,
          *(names++));
      typename idlyami::skel::skel_type< P18 >::type __v18(*request,
          *(names++));
      typename idlyami::skel::skel_type< P19 >::type __v19(*request,
          *(names++));
      typename idlyami::skel::skel_type< P20 >::type __v20(*request,
          *(names++));
      typename idlyami::skel::skel_type< P21 >::type __v21(*request,
          *(names++));
      typename idlyami::skel::skel_type< P22 >::type __v22(*request,
          *(names++));
      typename idlyami::skel::skel_type< P23 >::type __v23(*request,
          *(names++));
      typename idlyami::skel::skel_type< P24 >::type __v24(*request,
          *(names++));
      typename idlyami::skel::skel_type< P25 >::type __v25(*request,
          *(names++));
      typename idlyami::skel::skel_type< P26 >::type __v26(*request,
          *(names++));
      typename idlyami::skel::skel_type< P27 >::type __v27(*request,
          *(names++));
      typename idlyami::skel::skel_type< P28 >::type __v28(*request,
          *(names++));
      typename idlyami::skel::skel_type< P29 >::type __v29(*request,
          *(names++));
      typename idlyami::skel::skel_type< P30 >::type __v30(*request,
          *(names++));
      typename idlyami::skel::skel_type< P31 >::type __v31(*request,
          *(names++));
           (dynamic_cast< interface_type* >(_this)->*m_operation)(__v0.val() ,
               __v1.val() , __v2.val() , __v3.val() , __v4.val() , __v5.val() ,
               __v6.val() , __v7.val() , __v8.val() , __v9.val() ,
               __v10.val() , __v11.val() , __v12.val() , __v13.val() ,
               __v14.val() , __v15.val() , __v16.val() , __v17.val() ,
               __v18.val() , __v19.val() , __v20.val() , __v21.val() ,
               __v22.val() , __v23.val() , __v24.val() , __v25.val() ,
               __v26.val() , __v27.val() , __v28.val() , __v29.val() ,
               __v30.val() , __v31.val() );
    	}
	};
};

template< typename Interface, bool IsOneway, typename Return , typename P0 ,
    typename P1 , typename P2 , typename P3 , typename P4 , typename P5 ,
    typename P6 , typename P7 , typename P8 , typename P9 , typename P10 ,
    typename P11 , typename P12 , typename P13 , typename P14 , typename P15 ,
    typename P16 , typename P17 , typename P18 , typename P19 , typename P20 ,
    typename P21 , typename P22 , typename P23 , typename P24 , typename P25 ,
    typename P26 , typename P27 , typename P28 , typename P29 , typename P30 ,
    typename P31 , typename P32  >
struct Operation< Interface, IsOneway, Return , P0 , P1 , P2 , P3 , P4 , P5 ,
    P6 , P7 , P8 , P9 , P10 , P11 , P12 , P13 , P14 , P15 , P16 , P17 , P18 ,
    P19 , P20 , P21 , P22 , P23 , P24 , P25 , P26 , P27 , P28 , P29 , P30 ,
    P31 , P32  , detail::none , detail::none , detail::none , detail::none ,
    detail::none , detail::none , detail::none , detail::none , detail::none ,
    detail::none , detail::none , detail::none , detail::none , detail::none ,
    detail::none , detail::none , detail::none , detail::none  >
{
    typedef Interface interface_type;
    static const bool isOneway = IsOneway;
    typedef typename mapping::return_type< Return >::type return_type;

    typedef typename mapping::arg_type< P0 >::type p0_type;
    typedef typename mapping::arg_type< P1 >::type p1_type;
    typedef typename mapping::arg_type< P2 >::type p2_type;
    typedef typename mapping::arg_type< P3 >::type p3_type;
    typedef typename mapping::arg_type< P4 >::type p4_type;
    typedef typename mapping::arg_type< P5 >::type p5_type;
    typedef typename mapping::arg_type< P6 >::type p6_type;
    typedef typename mapping::arg_type< P7 >::type p7_type;
    typedef typename mapping::arg_type< P8 >::type p8_type;
    typedef typename mapping::arg_type< P9 >::type p9_type;
    typedef typename mapping::arg_type< P10 >::type p10_type;
    typedef typename mapping::arg_type< P11 >::type p11_type;
    typedef typename mapping::arg_type< P12 >::type p12_type;
    typedef typename mapping::arg_type< P13 >::type p13_type;
    typedef typename mapping::arg_type< P14 >::type p14_type;
    typedef typename mapping::arg_type< P15 >::type p15_type;
    typedef typename mapping::arg_type< P16 >::type p16_type;
    typedef typename mapping::arg_type< P17 >::type p17_type;
    typedef typename mapping::arg_type< P18 >::type p18_type;
    typedef typename mapping::arg_type< P19 >::type p19_type;
    typedef typename mapping::arg_type< P20 >::type p20_type;
    typedef typename mapping::arg_type< P21 >::type p21_type;
    typedef typename mapping::arg_type< P22 >::type p22_type;
    typedef typename mapping::arg_type< P23 >::type p23_type;
    typedef typename mapping::arg_type< P24 >::type p24_type;
    typedef typename mapping::arg_type< P25 >::type p25_type;
    typedef typename mapping::arg_type< P26 >::type p26_type;
    typedef typename mapping::arg_type< P27 >::type p27_type;
    typedef typename mapping::arg_type< P28 >::type p28_type;
    typedef typename mapping::arg_type< P29 >::type p29_type;
    typedef typename mapping::arg_type< P30 >::type p30_type;
    typedef typename mapping::arg_type< P31 >::type p31_type;
    typedef typename mapping::arg_type< P32 >::type p32_type;

	struct parameters_t
	{
    		P0 p0;
    		P1 p1;
    		P2 p2;
    		P3 p3;
    		P4 p4;
    		P5 p5;
    		P6 p6;
    		P7 p7;
    		P8 p8;
    		P9 p9;
    		P10 p10;
    		P11 p11;
    		P12 p12;
    		P13 p13;
    		P14 p14;
    		P15 p15;
    		P16 p16;
    		P17 p17;
    		P18 p18;
    		P19 p19;
    		P20 p20;
    		P21 p21;
    		P22 p22;
    		P23 p23;
    		P24 p24;
    		P25 p25;
    		P26 p26;
    		P27 p27;
    		P28 p28;
    		P29 p29;
    		P30 p30;
    		P31 p31;
    		P32 p32;
    	};

    typedef return_type (interface_type::*type)(p0_type , p1_type , p2_type ,
        p3_type , p4_type , p5_type , p6_type , p7_type , p8_type , p9_type ,
        p10_type , p11_type , p12_type , p13_type , p14_type , p15_type ,
        p16_type , p17_type , p18_type , p19_type , p20_type , p21_type ,
        p22_type , p23_type , p24_type , p25_type , p26_type , p27_type ,
        p28_type , p29_type , p30_type , p31_type , p32_type );

    static const unsigned int nparams = 33;

    struct handler_t : public OperationHandler
    {
    	type m_operation;

    	handler_t(type operation) : m_operation(operation)
    	{
    	}

    	void do_call(Servant* _this, ServerRequest* request, const char** names)
    	{

    		typename idlyami::skel::skel_type< P0 >::type __v0(*request, *(names++));
    		typename idlyami::skel::skel_type< P1 >::type __v1(*request, *(names++));
    		typename idlyami::skel::skel_type< P2 >::type __v2(*request, *(names++));
    		typename idlyami::skel::skel_type< P3 >::type __v3(*request, *(names++));
    		typename idlyami::skel::skel_type< P4 >::type __v4(*request, *(names++));
    		typename idlyami::skel::skel_type< P5 >::type __v5(*request, *(names++));
    		typename idlyami::skel::skel_type< P6 >::type __v6(*request, *(names++));
    		typename idlyami::skel::skel_type< P7 >::type __v7(*request, *(names++));
    		typename idlyami::skel::skel_type< P8 >::type __v8(*request, *(names++));
    		typename idlyami::skel::skel_type< P9 >::type __v9(*request, *(names++));
      typename idlyami::skel::skel_type< P10 >::type __v10(*request,
          *(names++));
      typename idlyami::skel::skel_type< P11 >::type __v11(*request,
          *(names++));
      typename idlyami::skel::skel_type< P12 >::type __v12(*request,
          *(names++));
      typename idlyami::skel::skel_type< P13 >::type __v13(*request,
          *(names++));
      typename idlyami::skel::skel_type< P14 >::type __v14(*request,
          *(names++));
      typename idlyami::skel::skel_type< P15 >::type __v15(*request,
          *(names++));
      typename idlyami::skel::skel_type< P16 >::type __v16(*request,
          *(names++));
      typename idlyami::skel::skel_type< P17 >::type __v17(*request,
          *(names++));
      typename idlyami::skel::skel_type< P18 >::type __v18(*request,
          *(names++));
      typename idlyami::skel::skel_type< P19 >::type __v19(*request,
          *(names++));
      typename idlyami::skel::skel_type< P20 >::type __v20(*request,
          *(names++));
      typename idlyami::skel::skel_type< P21 >::type __v21(*request,
          *(names++));
      typename idlyami::skel::skel_type< P22 >::type __v22(*request,
          *(names++));
      typename idlyami::skel::skel_type< P23 >::type __v23(*request,
          *(names++));
      typename idlyami::skel::skel_type< P24 >::type __v24(*request,
          *(names++));
      typename idlyami::skel::skel_type< P25 >::type __v25(*request,
          *(names++));
      typename idlyami::skel::skel_type< P26 >::type __v26(*request,
          *(names++));
      typename idlyami::skel::skel_type< P27 >::type __v27(*request,
          *(names++));
      typename idlyami::skel::skel_type< P28 >::type __v28(*request,
          *(names++));
      typename idlyami::skel::skel_type< P29 >::type __v29(*request,
          *(names++));
      typename idlyami::skel::skel_type< P30 >::type __v30(*request,
          *(names++));
      typename idlyami::skel::skel_type< P31 >::type __v31(*request,
          *(names++));
      typename idlyami::skel::skel_type< P32 >::type __v32(*request,
          *(names++));
           (dynamic_cast< interface_type* >(_this)->*m_operation)(__v0.val() ,
               __v1.val() , __v2.val() , __v3.val() , __v4.val() , __v5.val() ,
               __v6.val() , __v7.val() , __v8.val() , __v9.val() ,
               __v10.val() , __v11.val() , __v12.val() , __v13.val() ,
               __v14.val() , __v15.val() , __v16.val() , __v17.val() ,
               __v18.val() , __v19.val() , __v20.val() , __v21.val() ,
               __v22.val() , __v23.val() , __v24.val() , __v25.val() ,
               __v26.val() , __v27.val() , __v28.val() , __v29.val() ,
               __v30.val() , __v31.val() , __v32.val() );
    	}
	};
};

template< typename Interface, bool IsOneway, typename Return , typename P0 ,
    typename P1 , typename P2 , typename P3 , typename P4 , typename P5 ,
    typename P6 , typename P7 , typename P8 , typename P9 , typename P10 ,
    typename P11 , typename P12 , typename P13 , typename P14 , typename P15 ,
    typename P16 , typename P17 , typename P18 , typename P19 , typename P20 ,
    typename P21 , typename P22 , typename P23 , typename P24 , typename P25 ,
    typename P26 , typename P27 , typename P28 , typename P29 , typename P30 ,
    typename P31 , typename P32 , typename P33  >
struct Operation< Interface, IsOneway, Return , P0 , P1 , P2 , P3 , P4 , P5 ,
    P6 , P7 , P8 , P9 , P10 , P11 , P12 , P13 , P14 , P15 , P16 , P17 , P18 ,
    P19 , P20 , P21 , P22 , P23 , P24 , P25 , P26 , P27 , P28 , P29 , P30 ,
    P31 , P32 , P33  , detail::none , detail::none , detail::none ,
    detail::none , detail::none , detail::none , detail::none , detail::none ,
    detail::none , detail::none , detail::none , detail::none , detail::none ,
    detail::none , detail::none , detail::none , detail::none  >
{
    typedef Interface interface_type;
    static const bool isOneway = IsOneway;
    typedef typename mapping::return_type< Return >::type return_type;

    typedef typename mapping::arg_type< P0 >::type p0_type;
    typedef typename mapping::arg_type< P1 >::type p1_type;
    typedef typename mapping::arg_type< P2 >::type p2_type;
    typedef typename mapping::arg_type< P3 >::type p3_type;
    typedef typename mapping::arg_type< P4 >::type p4_type;
    typedef typename mapping::arg_type< P5 >::type p5_type;
    typedef typename mapping::arg_type< P6 >::type p6_type;
    typedef typename mapping::arg_type< P7 >::type p7_type;
    typedef typename mapping::arg_type< P8 >::type p8_type;
    typedef typename mapping::arg_type< P9 >::type p9_type;
    typedef typename mapping::arg_type< P10 >::type p10_type;
    typedef typename mapping::arg_type< P11 >::type p11_type;
    typedef typename mapping::arg_type< P12 >::type p12_type;
    typedef typename mapping::arg_type< P13 >::type p13_type;
    typedef typename mapping::arg_type< P14 >::type p14_type;
    typedef typename mapping::arg_type< P15 >::type p15_type;
    typedef typename mapping::arg_type< P16 >::type p16_type;
    typedef typename mapping::arg_type< P17 >::type p17_type;
    typedef typename mapping::arg_type< P18 >::type p18_type;
    typedef typename mapping::arg_type< P19 >::type p19_type;
    typedef typename mapping::arg_type< P20 >::type p20_type;
    typedef typename mapping::arg_type< P21 >::type p21_type;
    typedef typename mapping::arg_type< P22 >::type p22_type;
    typedef typename mapping::arg_type< P23 >::type p23_type;
    typedef typename mapping::arg_type< P24 >::type p24_type;
    typedef typename mapping::arg_type< P25 >::type p25_type;
    typedef typename mapping::arg_type< P26 >::type p26_type;
    typedef typename mapping::arg_type< P27 >::type p27_type;
    typedef typename mapping::arg_type< P28 >::type p28_type;
    typedef typename mapping::arg_type< P29 >::type p29_type;
    typedef typename mapping::arg_type< P30 >::type p30_type;
    typedef typename mapping::arg_type< P31 >::type p31_type;
    typedef typename mapping::arg_type< P32 >::type p32_type;
    typedef typename mapping::arg_type< P33 >::type p33_type;

	struct parameters_t
	{
    		P0 p0;
    		P1 p1;
    		P2 p2;
    		P3 p3;
    		P4 p4;
    		P5 p5;
    		P6 p6;
    		P7 p7;
    		P8 p8;
    		P9 p9;
    		P10 p10;
    		P11 p11;
    		P12 p12;
    		P13 p13;
    		P14 p14;
    		P15 p15;
    		P16 p16;
    		P17 p17;
    		P18 p18;
    		P19 p19;
    		P20 p20;
    		P21 p21;
    		P22 p22;
    		P23 p23;
    		P24 p24;
    		P25 p25;
    		P26 p26;
    		P27 p27;
    		P28 p28;
    		P29 p29;
    		P30 p30;
    		P31 p31;
    		P32 p32;
    		P33 p33;
    	};

    typedef return_type (interface_type::*type)(p0_type , p1_type , p2_type ,
        p3_type , p4_type , p5_type , p6_type , p7_type , p8_type , p9_type ,
        p10_type , p11_type , p12_type , p13_type , p14_type , p15_type ,
        p16_type , p17_type , p18_type , p19_type , p20_type , p21_type ,
        p22_type , p23_type , p24_type , p25_type , p26_type , p27_type ,
        p28_type , p29_type , p30_type , p31_type , p32_type , p33_type );

    static const unsigned int nparams = 34;

    struct handler_t : public OperationHandler
    {
    	type m_operation;

    	handler_t(type operation) : m_operation(operation)
    	{
    	}

    	void do_call(Servant* _this, ServerRequest* request, const char** names)
    	{

    		typename idlyami::skel::skel_type< P0 >::type __v0(*request, *(names++));
    		typename idlyami::skel::skel_type< P1 >::type __v1(*request, *(names++));
    		typename idlyami::skel::skel_type< P2 >::type __v2(*request, *(names++));
    		typename idlyami::skel::skel_type< P3 >::type __v3(*request, *(names++));
    		typename idlyami::skel::skel_type< P4 >::type __v4(*request, *(names++));
    		typename idlyami::skel::skel_type< P5 >::type __v5(*request, *(names++));
    		typename idlyami::skel::skel_type< P6 >::type __v6(*request, *(names++));
    		typename idlyami::skel::skel_type< P7 >::type __v7(*request, *(names++));
    		typename idlyami::skel::skel_type< P8 >::type __v8(*request, *(names++));
    		typename idlyami::skel::skel_type< P9 >::type __v9(*request, *(names++));
      typename idlyami::skel::skel_type< P10 >::type __v10(*request,
          *(names++));
      typename idlyami::skel::skel_type< P11 >::type __v11(*request,
          *(names++));
      typename idlyami::skel::skel_type< P12 >::type __v12(*request,
          *(names++));
      typename idlyami::skel::skel_type< P13 >::type __v13(*request,
          *(names++));
      typename idlyami::skel::skel_type< P14 >::type __v14(*request,
          *(names++));
      typename idlyami::skel::skel_type< P15 >::type __v15(*request,
          *(names++));
      typename idlyami::skel::skel_type< P16 >::type __v16(*request,
          *(names++));
      typename idlyami::skel::skel_type< P17 >::type __v17(*request,
          *(names++));
      typename idlyami::skel::skel_type< P18 >::type __v18(*request,
          *(names++));
      typename idlyami::skel::skel_type< P19 >::type __v19(*request,
          *(names++));
      typename idlyami::skel::skel_type< P20 >::type __v20(*request,
          *(names++));
      typename idlyami::skel::skel_type< P21 >::type __v21(*request,
          *(names++));
      typename idlyami::skel::skel_type< P22 >::type __v22(*request,
          *(names++));
      typename idlyami::skel::skel_type< P23 >::type __v23(*request,
          *(names++));
      typename idlyami::skel::skel_type< P24 >::type __v24(*request,
          *(names++));
      typename idlyami::skel::skel_type< P25 >::type __v25(*request,
          *(names++));
      typename idlyami::skel::skel_type< P26 >::type __v26(*request,
          *(names++));
      typename idlyami::skel::skel_type< P27 >::type __v27(*request,
          *(names++));
      typename idlyami::skel::skel_type< P28 >::type __v28(*request,
          *(names++));
      typename idlyami::skel::skel_type< P29 >::type __v29(*request,
          *(names++));
      typename idlyami::skel::skel_type< P30 >::type __v30(*request,
          *(names++));
      typename idlyami::skel::skel_type< P31 >::type __v31(*request,
          *(names++));
      typename idlyami::skel::skel_type< P32 >::type __v32(*request,
          *(names++));
      typename idlyami::skel::skel_type< P33 >::type __v33(*request,
          *(names++));
           (dynamic_cast< interface_type* >(_this)->*m_operation)(__v0.val() ,
               __v1.val() , __v2.val() , __v3.val() , __v4.val() , __v5.val() ,
               __v6.val() , __v7.val() , __v8.val() , __v9.val() ,
               __v10.val() , __v11.val() , __v12.val() , __v13.val() ,
               __v14.val() , __v15.val() , __v16.val() , __v17.val() ,
               __v18.val() , __v19.val() , __v20.val() , __v21.val() ,
               __v22.val() , __v23.val() , __v24.val() , __v25.val() ,
               __v26.val() , __v27.val() , __v28.val() , __v29.val() ,
               __v30.val() , __v31.val() , __v32.val() , __v33.val() );
    	}
	};
};

template< typename Interface, bool IsOneway, typename Return , typename P0 ,
    typename P1 , typename P2 , typename P3 , typename P4 , typename P5 ,
    typename P6 , typename P7 , typename P8 , typename P9 , typename P10 ,
    typename P11 , typename P12 , typename P13 , typename P14 , typename P15 ,
    typename P16 , typename P17 , typename P18 , typename P19 , typename P20 ,
    typename P21 , typename P22 , typename P23 , typename P24 , typename P25 ,
    typename P26 , typename P27 , typename P28 , typename P29 , typename P30 ,
    typename P31 , typename P32 , typename P33 , typename P34  >
struct Operation< Interface, IsOneway, Return , P0 , P1 , P2 , P3 , P4 , P5 ,
    P6 , P7 , P8 , P9 , P10 , P11 , P12 , P13 , P14 , P15 , P16 , P17 , P18 ,
    P19 , P20 , P21 , P22 , P23 , P24 , P25 , P26 , P27 , P28 , P29 , P30 ,
    P31 , P32 , P33 , P34  , detail::none , detail::none , detail::none ,
    detail::none , detail::none , detail::none , detail::none , detail::none ,
    detail::none , detail::none , detail::none , detail::none , detail::none ,
    detail::none , detail::none , detail::none  >
{
    typedef Interface interface_type;
    static const bool isOneway = IsOneway;
    typedef typename mapping::return_type< Return >::type return_type;

    typedef typename mapping::arg_type< P0 >::type p0_type;
    typedef typename mapping::arg_type< P1 >::type p1_type;
    typedef typename mapping::arg_type< P2 >::type p2_type;
    typedef typename mapping::arg_type< P3 >::type p3_type;
    typedef typename mapping::arg_type< P4 >::type p4_type;
    typedef typename mapping::arg_type< P5 >::type p5_type;
    typedef typename mapping::arg_type< P6 >::type p6_type;
    typedef typename mapping::arg_type< P7 >::type p7_type;
    typedef typename mapping::arg_type< P8 >::type p8_type;
    typedef typename mapping::arg_type< P9 >::type p9_type;
    typedef typename mapping::arg_type< P10 >::type p10_type;
    typedef typename mapping::arg_type< P11 >::type p11_type;
    typedef typename mapping::arg_type< P12 >::type p12_type;
    typedef typename mapping::arg_type< P13 >::type p13_type;
    typedef typename mapping::arg_type< P14 >::type p14_type;
    typedef typename mapping::arg_type< P15 >::type p15_type;
    typedef typename mapping::arg_type< P16 >::type p16_type;
    typedef typename mapping::arg_type< P17 >::type p17_type;
    typedef typename mapping::arg_type< P18 >::type p18_type;
    typedef typename mapping::arg_type< P19 >::type p19_type;
    typedef typename mapping::arg_type< P20 >::type p20_type;
    typedef typename mapping::arg_type< P21 >::type p21_type;
    typedef typename mapping::arg_type< P22 >::type p22_type;
    typedef typename mapping::arg_type< P23 >::type p23_type;
    typedef typename mapping::arg_type< P24 >::type p24_type;
    typedef typename mapping::arg_type< P25 >::type p25_type;
    typedef typename mapping::arg_type< P26 >::type p26_type;
    typedef typename mapping::arg_type< P27 >::type p27_type;
    typedef typename mapping::arg_type< P28 >::type p28_type;
    typedef typename mapping::arg_type< P29 >::type p29_type;
    typedef typename mapping::arg_type< P30 >::type p30_type;
    typedef typename mapping::arg_type< P31 >::type p31_type;
    typedef typename mapping::arg_type< P32 >::type p32_type;
    typedef typename mapping::arg_type< P33 >::type p33_type;
    typedef typename mapping::arg_type< P34 >::type p34_type;

	struct parameters_t
	{
    		P0 p0;
    		P1 p1;
    		P2 p2;
    		P3 p3;
    		P4 p4;
    		P5 p5;
    		P6 p6;
    		P7 p7;
    		P8 p8;
    		P9 p9;
    		P10 p10;
    		P11 p11;
    		P12 p12;
    		P13 p13;
    		P14 p14;
    		P15 p15;
    		P16 p16;
    		P17 p17;
    		P18 p18;
    		P19 p19;
    		P20 p20;
    		P21 p21;
    		P22 p22;
    		P23 p23;
    		P24 p24;
    		P25 p25;
    		P26 p26;
    		P27 p27;
    		P28 p28;
    		P29 p29;
    		P30 p30;
    		P31 p31;
    		P32 p32;
    		P33 p33;
    		P34 p34;
    	};

    typedef return_type (interface_type::*type)(p0_type , p1_type , p2_type ,
        p3_type , p4_type , p5_type , p6_type , p7_type , p8_type , p9_type ,
        p10_type , p11_type , p12_type , p13_type , p14_type , p15_type ,
        p16_type , p17_type , p18_type , p19_type , p20_type , p21_type ,
        p22_type , p23_type , p24_type , p25_type , p26_type , p27_type ,
        p28_type , p29_type , p30_type , p31_type , p32_type , p33_type ,
        p34_type );

    static const unsigned int nparams = 35;

    struct handler_t : public OperationHandler
    {
    	type m_operation;

    	handler_t(type operation) : m_operation(operation)
    	{
    	}

    	void do_call(Servant* _this, ServerRequest* request, const char** names)
    	{

    		typename idlyami::skel::skel_type< P0 >::type __v0(*request, *(names++));
    		typename idlyami::skel::skel_type< P1 >::type __v1(*request, *(names++));
    		typename idlyami::skel::skel_type< P2 >::type __v2(*request, *(names++));
    		typename idlyami::skel::skel_type< P3 >::type __v3(*request, *(names++));
    		typename idlyami::skel::skel_type< P4 >::type __v4(*request, *(names++));
    		typename idlyami::skel::skel_type< P5 >::type __v5(*request, *(names++));
    		typename idlyami::skel::skel_type< P6 >::type __v6(*request, *(names++));
    		typename idlyami::skel::skel_type< P7 >::type __v7(*request, *(names++));
    		typename idlyami::skel::skel_type< P8 >::type __v8(*request, *(names++));
    		typename idlyami::skel::skel_type< P9 >::type __v9(*request, *(names++));
      typename idlyami::skel::skel_type< P10 >::type __v10(*request,
          *(names++));
      typename idlyami::skel::skel_type< P11 >::type __v11(*request,
          *(names++));
      typename idlyami::skel::skel_type< P12 >::type __v12(*request,
          *(names++));
      typename idlyami::skel::skel_type< P13 >::type __v13(*request,
          *(names++));
      typename idlyami::skel::skel_type< P14 >::type __v14(*request,
          *(names++));
      typename idlyami::skel::skel_type< P15 >::type __v15(*request,
          *(names++));
      typename idlyami::skel::skel_type< P16 >::type __v16(*request,
          *(names++));
      typename idlyami::skel::skel_type< P17 >::type __v17(*request,
          *(names++));
      typename idlyami::skel::skel_type< P18 >::type __v18(*request,
          *(names++));
      typename idlyami::skel::skel_type< P19 >::type __v19(*request,
          *(names++));
      typename idlyami::skel::skel_type< P20 >::type __v20(*request,
          *(names++));
      typename idlyami::skel::skel_type< P21 >::type __v21(*request,
          *(names++));
      typename idlyami::skel::skel_type< P22 >::type __v22(*request,
          *(names++));
      typename idlyami::skel::skel_type< P23 >::type __v23(*request,
          *(names++));
      typename idlyami::skel::skel_type< P24 >::type __v24(*request,
          *(names++));
      typename idlyami::skel::skel_type< P25 >::type __v25(*request,
          *(names++));
      typename idlyami::skel::skel_type< P26 >::type __v26(*request,
          *(names++));
      typename idlyami::skel::skel_type< P27 >::type __v27(*request,
          *(names++));
      typename idlyami::skel::skel_type< P28 >::type __v28(*request,
          *(names++));
      typename idlyami::skel::skel_type< P29 >::type __v29(*request,
          *(names++));
      typename idlyami::skel::skel_type< P30 >::type __v30(*request,
          *(names++));
      typename idlyami::skel::skel_type< P31 >::type __v31(*request,
          *(names++));
      typename idlyami::skel::skel_type< P32 >::type __v32(*request,
          *(names++));
      typename idlyami::skel::skel_type< P33 >::type __v33(*request,
          *(names++));
      typename idlyami::skel::skel_type< P34 >::type __v34(*request,
          *(names++));
           (dynamic_cast< interface_type* >(_this)->*m_operation)(__v0.val() ,
               __v1.val() , __v2.val() , __v3.val() , __v4.val() , __v5.val() ,
               __v6.val() , __v7.val() , __v8.val() , __v9.val() ,
               __v10.val() , __v11.val() , __v12.val() , __v13.val() ,
               __v14.val() , __v15.val() , __v16.val() , __v17.val() ,
               __v18.val() , __v19.val() , __v20.val() , __v21.val() ,
               __v22.val() , __v23.val() , __v24.val() , __v25.val() ,
               __v26.val() , __v27.val() , __v28.val() , __v29.val() ,
               __v30.val() , __v31.val() , __v32.val() , __v33.val() ,
               __v34.val() );
    	}
	};
};

template< typename Interface, bool IsOneway, typename Return , typename P0 ,
    typename P1 , typename P2 , typename P3 , typename P4 , typename P5 ,
    typename P6 , typename P7 , typename P8 , typename P9 , typename P10 ,
    typename P11 , typename P12 , typename P13 , typename P14 , typename P15 ,
    typename P16 , typename P17 , typename P18 , typename P19 , typename P20 ,
    typename P21 , typename P22 , typename P23 , typename P24 , typename P25 ,
    typename P26 , typename P27 , typename P28 , typename P29 , typename P30 ,
    typename P31 , typename P32 , typename P33 , typename P34 , typename P35  >
struct Operation< Interface, IsOneway, Return , P0 , P1 , P2 , P3 , P4 , P5 ,
    P6 , P7 , P8 , P9 , P10 , P11 , P12 , P13 , P14 , P15 , P16 , P17 , P18 ,
    P19 , P20 , P21 , P22 , P23 , P24 , P25 , P26 , P27 , P28 , P29 , P30 ,
    P31 , P32 , P33 , P34 , P35  , detail::none , detail::none , detail::none ,
    detail::none , detail::none , detail::none , detail::none , detail::none ,
    detail::none , detail::none , detail::none , detail::none , detail::none ,
    detail::none , detail::none  >
{
    typedef Interface interface_type;
    static const bool isOneway = IsOneway;
    typedef typename mapping::return_type< Return >::type return_type;

    typedef typename mapping::arg_type< P0 >::type p0_type;
    typedef typename mapping::arg_type< P1 >::type p1_type;
    typedef typename mapping::arg_type< P2 >::type p2_type;
    typedef typename mapping::arg_type< P3 >::type p3_type;
    typedef typename mapping::arg_type< P4 >::type p4_type;
    typedef typename mapping::arg_type< P5 >::type p5_type;
    typedef typename mapping::arg_type< P6 >::type p6_type;
    typedef typename mapping::arg_type< P7 >::type p7_type;
    typedef typename mapping::arg_type< P8 >::type p8_type;
    typedef typename mapping::arg_type< P9 >::type p9_type;
    typedef typename mapping::arg_type< P10 >::type p10_type;
    typedef typename mapping::arg_type< P11 >::type p11_type;
    typedef typename mapping::arg_type< P12 >::type p12_type;
    typedef typename mapping::arg_type< P13 >::type p13_type;
    typedef typename mapping::arg_type< P14 >::type p14_type;
    typedef typename mapping::arg_type< P15 >::type p15_type;
    typedef typename mapping::arg_type< P16 >::type p16_type;
    typedef typename mapping::arg_type< P17 >::type p17_type;
    typedef typename mapping::arg_type< P18 >::type p18_type;
    typedef typename mapping::arg_type< P19 >::type p19_type;
    typedef typename mapping::arg_type< P20 >::type p20_type;
    typedef typename mapping::arg_type< P21 >::type p21_type;
    typedef typename mapping::arg_type< P22 >::type p22_type;
    typedef typename mapping::arg_type< P23 >::type p23_type;
    typedef typename mapping::arg_type< P24 >::type p24_type;
    typedef typename mapping::arg_type< P25 >::type p25_type;
    typedef typename mapping::arg_type< P26 >::type p26_type;
    typedef typename mapping::arg_type< P27 >::type p27_type;
    typedef typename mapping::arg_type< P28 >::type p28_type;
    typedef typename mapping::arg_type< P29 >::type p29_type;
    typedef typename mapping::arg_type< P30 >::type p30_type;
    typedef typename mapping::arg_type< P31 >::type p31_type;
    typedef typename mapping::arg_type< P32 >::type p32_type;
    typedef typename mapping::arg_type< P33 >::type p33_type;
    typedef typename mapping::arg_type< P34 >::type p34_type;
    typedef typename mapping::arg_type< P35 >::type p35_type;

	struct parameters_t
	{
    		P0 p0;
    		P1 p1;
    		P2 p2;
    		P3 p3;
    		P4 p4;
    		P5 p5;
    		P6 p6;
    		P7 p7;
    		P8 p8;
    		P9 p9;
    		P10 p10;
    		P11 p11;
    		P12 p12;
    		P13 p13;
    		P14 p14;
    		P15 p15;
    		P16 p16;
    		P17 p17;
    		P18 p18;
    		P19 p19;
    		P20 p20;
    		P21 p21;
    		P22 p22;
    		P23 p23;
    		P24 p24;
    		P25 p25;
    		P26 p26;
    		P27 p27;
    		P28 p28;
    		P29 p29;
    		P30 p30;
    		P31 p31;
    		P32 p32;
    		P33 p33;
    		P34 p34;
    		P35 p35;
    	};

    typedef return_type (interface_type::*type)(p0_type , p1_type , p2_type ,
        p3_type , p4_type , p5_type , p6_type , p7_type , p8_type , p9_type ,
        p10_type , p11_type , p12_type , p13_type , p14_type , p15_type ,
        p16_type , p17_type , p18_type , p19_type , p20_type , p21_type ,
        p22_type , p23_type , p24_type , p25_type , p26_type , p27_type ,
        p28_type , p29_type , p30_type , p31_type , p32_type , p33_type ,
        p34_type , p35_type );

    static const unsigned int nparams = 36;

    struct handler_t : public OperationHandler
    {
    	type m_operation;

    	handler_t(type operation) : m_operation(operation)
    	{
    	}

    	void do_call(Servant* _this, ServerRequest* request, const char** names)
    	{

    		typename idlyami::skel::skel_type< P0 >::type __v0(*request, *(names++));
    		typename idlyami::skel::skel_type< P1 >::type __v1(*request, *(names++));
    		typename idlyami::skel::skel_type< P2 >::type __v2(*request, *(names++));
    		typename idlyami::skel::skel_type< P3 >::type __v3(*request, *(names++));
    		typename idlyami::skel::skel_type< P4 >::type __v4(*request, *(names++));
    		typename idlyami::skel::skel_type< P5 >::type __v5(*request, *(names++));
    		typename idlyami::skel::skel_type< P6 >::type __v6(*request, *(names++));
    		typename idlyami::skel::skel_type< P7 >::type __v7(*request, *(names++));
    		typename idlyami::skel::skel_type< P8 >::type __v8(*request, *(names++));
    		typename idlyami::skel::skel_type< P9 >::type __v9(*request, *(names++));
      typename idlyami::skel::skel_type< P10 >::type __v10(*request,
          *(names++));
      typename idlyami::skel::skel_type< P11 >::type __v11(*request,
          *(names++));
      typename idlyami::skel::skel_type< P12 >::type __v12(*request,
          *(names++));
      typename idlyami::skel::skel_type< P13 >::type __v13(*request,
          *(names++));
      typename idlyami::skel::skel_type< P14 >::type __v14(*request,
          *(names++));
      typename idlyami::skel::skel_type< P15 >::type __v15(*request,
          *(names++));
      typename idlyami::skel::skel_type< P16 >::type __v16(*request,
          *(names++));
      typename idlyami::skel::skel_type< P17 >::type __v17(*request,
          *(names++));
      typename idlyami::skel::skel_type< P18 >::type __v18(*request,
          *(names++));
      typename idlyami::skel::skel_type< P19 >::type __v19(*request,
          *(names++));
      typename idlyami::skel::skel_type< P20 >::type __v20(*request,
          *(names++));
      typename idlyami::skel::skel_type< P21 >::type __v21(*request,
          *(names++));
      typename idlyami::skel::skel_type< P22 >::type __v22(*request,
          *(names++));
      typename idlyami::skel::skel_type< P23 >::type __v23(*request,
          *(names++));
      typename idlyami::skel::skel_type< P24 >::type __v24(*request,
          *(names++));
      typename idlyami::skel::skel_type< P25 >::type __v25(*request,
          *(names++));
      typename idlyami::skel::skel_type< P26 >::type __v26(*request,
          *(names++));
      typename idlyami::skel::skel_type< P27 >::type __v27(*request,
          *(names++));
      typename idlyami::skel::skel_type< P28 >::type __v28(*request,
          *(names++));
      typename idlyami::skel::skel_type< P29 >::type __v29(*request,
          *(names++));
      typename idlyami::skel::skel_type< P30 >::type __v30(*request,
          *(names++));
      typename idlyami::skel::skel_type< P31 >::type __v31(*request,
          *(names++));
      typename idlyami::skel::skel_type< P32 >::type __v32(*request,
          *(names++));
      typename idlyami::skel::skel_type< P33 >::type __v33(*request,
          *(names++));
      typename idlyami::skel::skel_type< P34 >::type __v34(*request,
          *(names++));
      typename idlyami::skel::skel_type< P35 >::type __v35(*request,
          *(names++));
           (dynamic_cast< interface_type* >(_this)->*m_operation)(__v0.val() ,
               __v1.val() , __v2.val() , __v3.val() , __v4.val() , __v5.val() ,
               __v6.val() , __v7.val() , __v8.val() , __v9.val() ,
               __v10.val() , __v11.val() , __v12.val() , __v13.val() ,
               __v14.val() , __v15.val() , __v16.val() , __v17.val() ,
               __v18.val() , __v19.val() , __v20.val() , __v21.val() ,
               __v22.val() , __v23.val() , __v24.val() , __v25.val() ,
               __v26.val() , __v27.val() , __v28.val() , __v29.val() ,
               __v30.val() , __v31.val() , __v32.val() , __v33.val() ,
               __v34.val() , __v35.val() );
    	}
	};
};

template< typename Interface, bool IsOneway, typename Return , typename P0 ,
    typename P1 , typename P2 , typename P3 , typename P4 , typename P5 ,
    typename P6 , typename P7 , typename P8 , typename P9 , typename P10 ,
    typename P11 , typename P12 , typename P13 , typename P14 , typename P15 ,
    typename P16 , typename P17 , typename P18 , typename P19 , typename P20 ,
    typename P21 , typename P22 , typename P23 , typename P24 , typename P25 ,
    typename P26 , typename P27 , typename P28 , typename P29 , typename P30 ,
    typename P31 , typename P32 , typename P33 , typename P34 , typename P35 ,
    typename P36  >
struct Operation< Interface, IsOneway, Return , P0 , P1 , P2 , P3 , P4 , P5 ,
    P6 , P7 , P8 , P9 , P10 , P11 , P12 , P13 , P14 , P15 , P16 , P17 , P18 ,
    P19 , P20 , P21 , P22 , P23 , P24 , P25 , P26 , P27 , P28 , P29 , P30 ,
    P31 , P32 , P33 , P34 , P35 , P36  , detail::none , detail::none ,
    detail::none , detail::none , detail::none , detail::none , detail::none ,
    detail::none , detail::none , detail::none , detail::none , detail::none ,
    detail::none , detail::none  >
{
    typedef Interface interface_type;
    static const bool isOneway = IsOneway;
    typedef typename mapping::return_type< Return >::type return_type;

    typedef typename mapping::arg_type< P0 >::type p0_type;
    typedef typename mapping::arg_type< P1 >::type p1_type;
    typedef typename mapping::arg_type< P2 >::type p2_type;
    typedef typename mapping::arg_type< P3 >::type p3_type;
    typedef typename mapping::arg_type< P4 >::type p4_type;
    typedef typename mapping::arg_type< P5 >::type p5_type;
    typedef typename mapping::arg_type< P6 >::type p6_type;
    typedef typename mapping::arg_type< P7 >::type p7_type;
    typedef typename mapping::arg_type< P8 >::type p8_type;
    typedef typename mapping::arg_type< P9 >::type p9_type;
    typedef typename mapping::arg_type< P10 >::type p10_type;
    typedef typename mapping::arg_type< P11 >::type p11_type;
    typedef typename mapping::arg_type< P12 >::type p12_type;
    typedef typename mapping::arg_type< P13 >::type p13_type;
    typedef typename mapping::arg_type< P14 >::type p14_type;
    typedef typename mapping::arg_type< P15 >::type p15_type;
    typedef typename mapping::arg_type< P16 >::type p16_type;
    typedef typename mapping::arg_type< P17 >::type p17_type;
    typedef typename mapping::arg_type< P18 >::type p18_type;
    typedef typename mapping::arg_type< P19 >::type p19_type;
    typedef typename mapping::arg_type< P20 >::type p20_type;
    typedef typename mapping::arg_type< P21 >::type p21_type;
    typedef typename mapping::arg_type< P22 >::type p22_type;
    typedef typename mapping::arg_type< P23 >::type p23_type;
    typedef typename mapping::arg_type< P24 >::type p24_type;
    typedef typename mapping::arg_type< P25 >::type p25_type;
    typedef typename mapping::arg_type< P26 >::type p26_type;
    typedef typename mapping::arg_type< P27 >::type p27_type;
    typedef typename mapping::arg_type< P28 >::type p28_type;
    typedef typename mapping::arg_type< P29 >::type p29_type;
    typedef typename mapping::arg_type< P30 >::type p30_type;
    typedef typename mapping::arg_type< P31 >::type p31_type;
    typedef typename mapping::arg_type< P32 >::type p32_type;
    typedef typename mapping::arg_type< P33 >::type p33_type;
    typedef typename mapping::arg_type< P34 >::type p34_type;
    typedef typename mapping::arg_type< P35 >::type p35_type;
    typedef typename mapping::arg_type< P36 >::type p36_type;

	struct parameters_t
	{
    		P0 p0;
    		P1 p1;
    		P2 p2;
    		P3 p3;
    		P4 p4;
    		P5 p5;
    		P6 p6;
    		P7 p7;
    		P8 p8;
    		P9 p9;
    		P10 p10;
    		P11 p11;
    		P12 p12;
    		P13 p13;
    		P14 p14;
    		P15 p15;
    		P16 p16;
    		P17 p17;
    		P18 p18;
    		P19 p19;
    		P20 p20;
    		P21 p21;
    		P22 p22;
    		P23 p23;
    		P24 p24;
    		P25 p25;
    		P26 p26;
    		P27 p27;
    		P28 p28;
    		P29 p29;
    		P30 p30;
    		P31 p31;
    		P32 p32;
    		P33 p33;
    		P34 p34;
    		P35 p35;
    		P36 p36;
    	};

    typedef return_type (interface_type::*type)(p0_type , p1_type , p2_type ,
        p3_type , p4_type , p5_type , p6_type , p7_type , p8_type , p9_type ,
        p10_type , p11_type , p12_type , p13_type , p14_type , p15_type ,
        p16_type , p17_type , p18_type , p19_type , p20_type , p21_type ,
        p22_type , p23_type , p24_type , p25_type , p26_type , p27_type ,
        p28_type , p29_type , p30_type , p31_type , p32_type , p33_type ,
        p34_type , p35_type , p36_type );

    static const unsigned int nparams = 37;

    struct handler_t : public OperationHandler
    {
    	type m_operation;

    	handler_t(type operation) : m_operation(operation)
    	{
    	}

    	void do_call(Servant* _this, ServerRequest* request, const char** names)
    	{

    		typename idlyami::skel::skel_type< P0 >::type __v0(*request, *(names++));
    		typename idlyami::skel::skel_type< P1 >::type __v1(*request, *(names++));
    		typename idlyami::skel::skel_type< P2 >::type __v2(*request, *(names++));
    		typename idlyami::skel::skel_type< P3 >::type __v3(*request, *(names++));
    		typename idlyami::skel::skel_type< P4 >::type __v4(*request, *(names++));
    		typename idlyami::skel::skel_type< P5 >::type __v5(*request, *(names++));
    		typename idlyami::skel::skel_type< P6 >::type __v6(*request, *(names++));
    		typename idlyami::skel::skel_type< P7 >::type __v7(*request, *(names++));
    		typename idlyami::skel::skel_type< P8 >::type __v8(*request, *(names++));
    		typename idlyami::skel::skel_type< P9 >::type __v9(*request, *(names++));
      typename idlyami::skel::skel_type< P10 >::type __v10(*request,
          *(names++));
      typename idlyami::skel::skel_type< P11 >::type __v11(*request,
          *(names++));
      typename idlyami::skel::skel_type< P12 >::type __v12(*request,
          *(names++));
      typename idlyami::skel::skel_type< P13 >::type __v13(*request,
          *(names++));
      typename idlyami::skel::skel_type< P14 >::type __v14(*request,
          *(names++));
      typename idlyami::skel::skel_type< P15 >::type __v15(*request,
          *(names++));
      typename idlyami::skel::skel_type< P16 >::type __v16(*request,
          *(names++));
      typename idlyami::skel::skel_type< P17 >::type __v17(*request,
          *(names++));
      typename idlyami::skel::skel_type< P18 >::type __v18(*request,
          *(names++));
      typename idlyami::skel::skel_type< P19 >::type __v19(*request,
          *(names++));
      typename idlyami::skel::skel_type< P20 >::type __v20(*request,
          *(names++));
      typename idlyami::skel::skel_type< P21 >::type __v21(*request,
          *(names++));
      typename idlyami::skel::skel_type< P22 >::type __v22(*request,
          *(names++));
      typename idlyami::skel::skel_type< P23 >::type __v23(*request,
          *(names++));
      typename idlyami::skel::skel_type< P24 >::type __v24(*request,
          *(names++));
      typename idlyami::skel::skel_type< P25 >::type __v25(*request,
          *(names++));
      typename idlyami::skel::skel_type< P26 >::type __v26(*request,
          *(names++));
      typename idlyami::skel::skel_type< P27 >::type __v27(*request,
          *(names++));
      typename idlyami::skel::skel_type< P28 >::type __v28(*request,
          *(names++));
      typename idlyami::skel::skel_type< P29 >::type __v29(*request,
          *(names++));
      typename idlyami::skel::skel_type< P30 >::type __v30(*request,
          *(names++));
      typename idlyami::skel::skel_type< P31 >::type __v31(*request,
          *(names++));
      typename idlyami::skel::skel_type< P32 >::type __v32(*request,
          *(names++));
      typename idlyami::skel::skel_type< P33 >::type __v33(*request,
          *(names++));
      typename idlyami::skel::skel_type< P34 >::type __v34(*request,
          *(names++));
      typename idlyami::skel::skel_type< P35 >::type __v35(*request,
          *(names++));
      typename idlyami::skel::skel_type< P36 >::type __v36(*request,
          *(names++));
           (dynamic_cast< interface_type* >(_this)->*m_operation)(__v0.val() ,
               __v1.val() , __v2.val() , __v3.val() , __v4.val() , __v5.val() ,
               __v6.val() , __v7.val() , __v8.val() , __v9.val() ,
               __v10.val() , __v11.val() , __v12.val() , __v13.val() ,
               __v14.val() , __v15.val() , __v16.val() , __v17.val() ,
               __v18.val() , __v19.val() , __v20.val() , __v21.val() ,
               __v22.val() , __v23.val() , __v24.val() , __v25.val() ,
               __v26.val() , __v27.val() , __v28.val() , __v29.val() ,
               __v30.val() , __v31.val() , __v32.val() , __v33.val() ,
               __v34.val() , __v35.val() , __v36.val() );
    	}
	};
};

template< typename Interface, bool IsOneway, typename Return , typename P0 ,
    typename P1 , typename P2 , typename P3 , typename P4 , typename P5 ,
    typename P6 , typename P7 , typename P8 , typename P9 , typename P10 ,
    typename P11 , typename P12 , typename P13 , typename P14 , typename P15 ,
    typename P16 , typename P17 , typename P18 , typename P19 , typename P20 ,
    typename P21 , typename P22 , typename P23 , typename P24 , typename P25 ,
    typename P26 , typename P27 , typename P28 , typename P29 , typename P30 ,
    typename P31 , typename P32 , typename P33 , typename P34 , typename P35 ,
    typename P36 , typename P37  >
struct Operation< Interface, IsOneway, Return , P0 , P1 , P2 , P3 , P4 , P5 ,
    P6 , P7 , P8 , P9 , P10 , P11 , P12 , P13 , P14 , P15 , P16 , P17 , P18 ,
    P19 , P20 , P21 , P22 , P23 , P24 , P25 , P26 , P27 , P28 , P29 , P30 ,
    P31 , P32 , P33 , P34 , P35 , P36 , P37  , detail::none , detail::none ,
    detail::none , detail::none , detail::none , detail::none , detail::none ,
    detail::none , detail::none , detail::none , detail::none , detail::none ,
    detail::none  >
{
    typedef Interface interface_type;
    static const bool isOneway = IsOneway;
    typedef typename mapping::return_type< Return >::type return_type;

    typedef typename mapping::arg_type< P0 >::type p0_type;
    typedef typename mapping::arg_type< P1 >::type p1_type;
    typedef typename mapping::arg_type< P2 >::type p2_type;
    typedef typename mapping::arg_type< P3 >::type p3_type;
    typedef typename mapping::arg_type< P4 >::type p4_type;
    typedef typename mapping::arg_type< P5 >::type p5_type;
    typedef typename mapping::arg_type< P6 >::type p6_type;
    typedef typename mapping::arg_type< P7 >::type p7_type;
    typedef typename mapping::arg_type< P8 >::type p8_type;
    typedef typename mapping::arg_type< P9 >::type p9_type;
    typedef typename mapping::arg_type< P10 >::type p10_type;
    typedef typename mapping::arg_type< P11 >::type p11_type;
    typedef typename mapping::arg_type< P12 >::type p12_type;
    typedef typename mapping::arg_type< P13 >::type p13_type;
    typedef typename mapping::arg_type< P14 >::type p14_type;
    typedef typename mapping::arg_type< P15 >::type p15_type;
    typedef typename mapping::arg_type< P16 >::type p16_type;
    typedef typename mapping::arg_type< P17 >::type p17_type;
    typedef typename mapping::arg_type< P18 >::type p18_type;
    typedef typename mapping::arg_type< P19 >::type p19_type;
    typedef typename mapping::arg_type< P20 >::type p20_type;
    typedef typename mapping::arg_type< P21 >::type p21_type;
    typedef typename mapping::arg_type< P22 >::type p22_type;
    typedef typename mapping::arg_type< P23 >::type p23_type;
    typedef typename mapping::arg_type< P24 >::type p24_type;
    typedef typename mapping::arg_type< P25 >::type p25_type;
    typedef typename mapping::arg_type< P26 >::type p26_type;
    typedef typename mapping::arg_type< P27 >::type p27_type;
    typedef typename mapping::arg_type< P28 >::type p28_type;
    typedef typename mapping::arg_type< P29 >::type p29_type;
    typedef typename mapping::arg_type< P30 >::type p30_type;
    typedef typename mapping::arg_type< P31 >::type p31_type;
    typedef typename mapping::arg_type< P32 >::type p32_type;
    typedef typename mapping::arg_type< P33 >::type p33_type;
    typedef typename mapping::arg_type< P34 >::type p34_type;
    typedef typename mapping::arg_type< P35 >::type p35_type;
    typedef typename mapping::arg_type< P36 >::type p36_type;
    typedef typename mapping::arg_type< P37 >::type p37_type;

	struct parameters_t
	{
    		P0 p0;
    		P1 p1;
    		P2 p2;
    		P3 p3;
    		P4 p4;
    		P5 p5;
    		P6 p6;
    		P7 p7;
    		P8 p8;
    		P9 p9;
    		P10 p10;
    		P11 p11;
    		P12 p12;
    		P13 p13;
    		P14 p14;
    		P15 p15;
    		P16 p16;
    		P17 p17;
    		P18 p18;
    		P19 p19;
    		P20 p20;
    		P21 p21;
    		P22 p22;
    		P23 p23;
    		P24 p24;
    		P25 p25;
    		P26 p26;
    		P27 p27;
    		P28 p28;
    		P29 p29;
    		P30 p30;
    		P31 p31;
    		P32 p32;
    		P33 p33;
    		P34 p34;
    		P35 p35;
    		P36 p36;
    		P37 p37;
    	};

    typedef return_type (interface_type::*type)(p0_type , p1_type , p2_type ,
        p3_type , p4_type , p5_type , p6_type , p7_type , p8_type , p9_type ,
        p10_type , p11_type , p12_type , p13_type , p14_type , p15_type ,
        p16_type , p17_type , p18_type , p19_type , p20_type , p21_type ,
        p22_type , p23_type , p24_type , p25_type , p26_type , p27_type ,
        p28_type , p29_type , p30_type , p31_type , p32_type , p33_type ,
        p34_type , p35_type , p36_type , p37_type );

    static const unsigned int nparams = 38;

    struct handler_t : public OperationHandler
    {
    	type m_operation;

    	handler_t(type operation) : m_operation(operation)
    	{
    	}

    	void do_call(Servant* _this, ServerRequest* request, const char** names)
    	{

    		typename idlyami::skel::skel_type< P0 >::type __v0(*request, *(names++));
    		typename idlyami::skel::skel_type< P1 >::type __v1(*request, *(names++));
    		typename idlyami::skel::skel_type< P2 >::type __v2(*request, *(names++));
    		typename idlyami::skel::skel_type< P3 >::type __v3(*request, *(names++));
    		typename idlyami::skel::skel_type< P4 >::type __v4(*request, *(names++));
    		typename idlyami::skel::skel_type< P5 >::type __v5(*request, *(names++));
    		typename idlyami::skel::skel_type< P6 >::type __v6(*request, *(names++));
    		typename idlyami::skel::skel_type< P7 >::type __v7(*request, *(names++));
    		typename idlyami::skel::skel_type< P8 >::type __v8(*request, *(names++));
    		typename idlyami::skel::skel_type< P9 >::type __v9(*request, *(names++));
      typename idlyami::skel::skel_type< P10 >::type __v10(*request,
          *(names++));
      typename idlyami::skel::skel_type< P11 >::type __v11(*request,
          *(names++));
      typename idlyami::skel::skel_type< P12 >::type __v12(*request,
          *(names++));
      typename idlyami::skel::skel_type< P13 >::type __v13(*request,
          *(names++));
      typename idlyami::skel::skel_type< P14 >::type __v14(*request,
          *(names++));
      typename idlyami::skel::skel_type< P15 >::type __v15(*request,
          *(names++));
      typename idlyami::skel::skel_type< P16 >::type __v16(*request,
          *(names++));
      typename idlyami::skel::skel_type< P17 >::type __v17(*request,
          *(names++));
      typename idlyami::skel::skel_type< P18 >::type __v18(*request,
          *(names++));
      typename idlyami::skel::skel_type< P19 >::type __v19(*request,
          *(names++));
      typename idlyami::skel::skel_type< P20 >::type __v20(*request,
          *(names++));
      typename idlyami::skel::skel_type< P21 >::type __v21(*request,
          *(names++));
      typename idlyami::skel::skel_type< P22 >::type __v22(*request,
          *(names++));
      typename idlyami::skel::skel_type< P23 >::type __v23(*request,
          *(names++));
      typename idlyami::skel::skel_type< P24 >::type __v24(*request,
          *(names++));
      typename idlyami::skel::skel_type< P25 >::type __v25(*request,
          *(names++));
      typename idlyami::skel::skel_type< P26 >::type __v26(*request,
          *(names++));
      typename idlyami::skel::skel_type< P27 >::type __v27(*request,
          *(names++));
      typename idlyami::skel::skel_type< P28 >::type __v28(*request,
          *(names++));
      typename idlyami::skel::skel_type< P29 >::type __v29(*request,
          *(names++));
      typename idlyami::skel::skel_type< P30 >::type __v30(*request,
          *(names++));
      typename idlyami::skel::skel_type< P31 >::type __v31(*request,
          *(names++));
      typename idlyami::skel::skel_type< P32 >::type __v32(*request,
          *(names++));
      typename idlyami::skel::skel_type< P33 >::type __v33(*request,
          *(names++));
      typename idlyami::skel::skel_type< P34 >::type __v34(*request,
          *(names++));
      typename idlyami::skel::skel_type< P35 >::type __v35(*request,
          *(names++));
      typename idlyami::skel::skel_type< P36 >::type __v36(*request,
          *(names++));
      typename idlyami::skel::skel_type< P37 >::type __v37(*request,
          *(names++));
           (dynamic_cast< interface_type* >(_this)->*m_operation)(__v0.val() ,
               __v1.val() , __v2.val() , __v3.val() , __v4.val() , __v5.val() ,
               __v6.val() , __v7.val() , __v8.val() , __v9.val() ,
               __v10.val() , __v11.val() , __v12.val() , __v13.val() ,
               __v14.val() , __v15.val() , __v16.val() , __v17.val() ,
               __v18.val() , __v19.val() , __v20.val() , __v21.val() ,
               __v22.val() , __v23.val() , __v24.val() , __v25.val() ,
               __v26.val() , __v27.val() , __v28.val() , __v29.val() ,
               __v30.val() , __v31.val() , __v32.val() , __v33.val() ,
               __v34.val() , __v35.val() , __v36.val() , __v37.val() );
    	}
	};
};

template< typename Interface, bool IsOneway, typename Return , typename P0 ,
    typename P1 , typename P2 , typename P3 , typename P4 , typename P5 ,
    typename P6 , typename P7 , typename P8 , typename P9 , typename P10 ,
    typename P11 , typename P12 , typename P13 , typename P14 , typename P15 ,
    typename P16 , typename P17 , typename P18 , typename P19 , typename P20 ,
    typename P21 , typename P22 , typename P23 , typename P24 , typename P25 ,
    typename P26 , typename P27 , typename P28 , typename P29 , typename P30 ,
    typename P31 , typename P32 , typename P33 , typename P34 , typename P35 ,
    typename P36 , typename P37 , typename P38  >
struct Operation< Interface, IsOneway, Return , P0 , P1 , P2 , P3 , P4 , P5 ,
    P6 , P7 , P8 , P9 , P10 , P11 , P12 , P13 , P14 , P15 , P16 , P17 , P18 ,
    P19 , P20 , P21 , P22 , P23 , P24 , P25 , P26 , P27 , P28 , P29 , P30 ,
    P31 , P32 , P33 , P34 , P35 , P36 , P37 , P38  , detail::none ,
    detail::none , detail::none , detail::none , detail::none , detail::none ,
    detail::none , detail::none , detail::none , detail::none , detail::none ,
    detail::none  >
{
    typedef Interface interface_type;
    static const bool isOneway = IsOneway;
    typedef typename mapping::return_type< Return >::type return_type;

    typedef typename mapping::arg_type< P0 >::type p0_type;
    typedef typename mapping::arg_type< P1 >::type p1_type;
    typedef typename mapping::arg_type< P2 >::type p2_type;
    typedef typename mapping::arg_type< P3 >::type p3_type;
    typedef typename mapping::arg_type< P4 >::type p4_type;
    typedef typename mapping::arg_type< P5 >::type p5_type;
    typedef typename mapping::arg_type< P6 >::type p6_type;
    typedef typename mapping::arg_type< P7 >::type p7_type;
    typedef typename mapping::arg_type< P8 >::type p8_type;
    typedef typename mapping::arg_type< P9 >::type p9_type;
    typedef typename mapping::arg_type< P10 >::type p10_type;
    typedef typename mapping::arg_type< P11 >::type p11_type;
    typedef typename mapping::arg_type< P12 >::type p12_type;
    typedef typename mapping::arg_type< P13 >::type p13_type;
    typedef typename mapping::arg_type< P14 >::type p14_type;
    typedef typename mapping::arg_type< P15 >::type p15_type;
    typedef typename mapping::arg_type< P16 >::type p16_type;
    typedef typename mapping::arg_type< P17 >::type p17_type;
    typedef typename mapping::arg_type< P18 >::type p18_type;
    typedef typename mapping::arg_type< P19 >::type p19_type;
    typedef typename mapping::arg_type< P20 >::type p20_type;
    typedef typename mapping::arg_type< P21 >::type p21_type;
    typedef typename mapping::arg_type< P22 >::type p22_type;
    typedef typename mapping::arg_type< P23 >::type p23_type;
    typedef typename mapping::arg_type< P24 >::type p24_type;
    typedef typename mapping::arg_type< P25 >::type p25_type;
    typedef typename mapping::arg_type< P26 >::type p26_type;
    typedef typename mapping::arg_type< P27 >::type p27_type;
    typedef typename mapping::arg_type< P28 >::type p28_type;
    typedef typename mapping::arg_type< P29 >::type p29_type;
    typedef typename mapping::arg_type< P30 >::type p30_type;
    typedef typename mapping::arg_type< P31 >::type p31_type;
    typedef typename mapping::arg_type< P32 >::type p32_type;
    typedef typename mapping::arg_type< P33 >::type p33_type;
    typedef typename mapping::arg_type< P34 >::type p34_type;
    typedef typename mapping::arg_type< P35 >::type p35_type;
    typedef typename mapping::arg_type< P36 >::type p36_type;
    typedef typename mapping::arg_type< P37 >::type p37_type;
    typedef typename mapping::arg_type< P38 >::type p38_type;

	struct parameters_t
	{
    		P0 p0;
    		P1 p1;
    		P2 p2;
    		P3 p3;
    		P4 p4;
    		P5 p5;
    		P6 p6;
    		P7 p7;
    		P8 p8;
    		P9 p9;
    		P10 p10;
    		P11 p11;
    		P12 p12;
    		P13 p13;
    		P14 p14;
    		P15 p15;
    		P16 p16;
    		P17 p17;
    		P18 p18;
    		P19 p19;
    		P20 p20;
    		P21 p21;
    		P22 p22;
    		P23 p23;
    		P24 p24;
    		P25 p25;
    		P26 p26;
    		P27 p27;
    		P28 p28;
    		P29 p29;
    		P30 p30;
    		P31 p31;
    		P32 p32;
    		P33 p33;
    		P34 p34;
    		P35 p35;
    		P36 p36;
    		P37 p37;
    		P38 p38;
    	};

    typedef return_type (interface_type::*type)(p0_type , p1_type , p2_type ,
        p3_type , p4_type , p5_type , p6_type , p7_type , p8_type , p9_type ,
        p10_type , p11_type , p12_type , p13_type , p14_type , p15_type ,
        p16_type , p17_type , p18_type , p19_type , p20_type , p21_type ,
        p22_type , p23_type , p24_type , p25_type , p26_type , p27_type ,
        p28_type , p29_type , p30_type , p31_type , p32_type , p33_type ,
        p34_type , p35_type , p36_type , p37_type , p38_type );

    static const unsigned int nparams = 39;

    struct handler_t : public OperationHandler
    {
    	type m_operation;

    	handler_t(type operation) : m_operation(operation)
    	{
    	}

    	void do_call(Servant* _this, ServerRequest* request, const char** names)
    	{

    		typename idlyami::skel::skel_type< P0 >::type __v0(*request, *(names++));
    		typename idlyami::skel::skel_type< P1 >::type __v1(*request, *(names++));
    		typename idlyami::skel::skel_type< P2 >::type __v2(*request, *(names++));
    		typename idlyami::skel::skel_type< P3 >::type __v3(*request, *(names++));
    		typename idlyami::skel::skel_type< P4 >::type __v4(*request, *(names++));
    		typename idlyami::skel::skel_type< P5 >::type __v5(*request, *(names++));
    		typename idlyami::skel::skel_type< P6 >::type __v6(*request, *(names++));
    		typename idlyami::skel::skel_type< P7 >::type __v7(*request, *(names++));
    		typename idlyami::skel::skel_type< P8 >::type __v8(*request, *(names++));
    		typename idlyami::skel::skel_type< P9 >::type __v9(*request, *(names++));
      typename idlyami::skel::skel_type< P10 >::type __v10(*request,
          *(names++));
      typename idlyami::skel::skel_type< P11 >::type __v11(*request,
          *(names++));
      typename idlyami::skel::skel_type< P12 >::type __v12(*request,
          *(names++));
      typename idlyami::skel::skel_type< P13 >::type __v13(*request,
          *(names++));
      typename idlyami::skel::skel_type< P14 >::type __v14(*request,
          *(names++));
      typename idlyami::skel::skel_type< P15 >::type __v15(*request,
          *(names++));
      typename idlyami::skel::skel_type< P16 >::type __v16(*request,
          *(names++));
      typename idlyami::skel::skel_type< P17 >::type __v17(*request,
          *(names++));
      typename idlyami::skel::skel_type< P18 >::type __v18(*request,
          *(names++));
      typename idlyami::skel::skel_type< P19 >::type __v19(*request,
          *(names++));
      typename idlyami::skel::skel_type< P20 >::type __v20(*request,
          *(names++));
      typename idlyami::skel::skel_type< P21 >::type __v21(*request,
          *(names++));
      typename idlyami::skel::skel_type< P22 >::type __v22(*request,
          *(names++));
      typename idlyami::skel::skel_type< P23 >::type __v23(*request,
          *(names++));
      typename idlyami::skel::skel_type< P24 >::type __v24(*request,
          *(names++));
      typename idlyami::skel::skel_type< P25 >::type __v25(*request,
          *(names++));
      typename idlyami::skel::skel_type< P26 >::type __v26(*request,
          *(names++));
      typename idlyami::skel::skel_type< P27 >::type __v27(*request,
          *(names++));
      typename idlyami::skel::skel_type< P28 >::type __v28(*request,
          *(names++));
      typename idlyami::skel::skel_type< P29 >::type __v29(*request,
          *(names++));
      typename idlyami::skel::skel_type< P30 >::type __v30(*request,
          *(names++));
      typename idlyami::skel::skel_type< P31 >::type __v31(*request,
          *(names++));
      typename idlyami::skel::skel_type< P32 >::type __v32(*request,
          *(names++));
      typename idlyami::skel::skel_type< P33 >::type __v33(*request,
          *(names++));
      typename idlyami::skel::skel_type< P34 >::type __v34(*request,
          *(names++));
      typename idlyami::skel::skel_type< P35 >::type __v35(*request,
          *(names++));
      typename idlyami::skel::skel_type< P36 >::type __v36(*request,
          *(names++));
      typename idlyami::skel::skel_type< P37 >::type __v37(*request,
          *(names++));
      typename idlyami::skel::skel_type< P38 >::type __v38(*request,
          *(names++));
           (dynamic_cast< interface_type* >(_this)->*m_operation)(__v0.val() ,
               __v1.val() , __v2.val() , __v3.val() , __v4.val() , __v5.val() ,
               __v6.val() , __v7.val() , __v8.val() , __v9.val() ,
               __v10.val() , __v11.val() , __v12.val() , __v13.val() ,
               __v14.val() , __v15.val() , __v16.val() , __v17.val() ,
               __v18.val() , __v19.val() , __v20.val() , __v21.val() ,
               __v22.val() , __v23.val() , __v24.val() , __v25.val() ,
               __v26.val() , __v27.val() , __v28.val() , __v29.val() ,
               __v30.val() , __v31.val() , __v32.val() , __v33.val() ,
               __v34.val() , __v35.val() , __v36.val() , __v37.val() ,
               __v38.val() );
    	}
	};
};

template< typename Interface, bool IsOneway, typename Return , typename P0 ,
    typename P1 , typename P2 , typename P3 , typename P4 , typename P5 ,
    typename P6 , typename P7 , typename P8 , typename P9 , typename P10 ,
    typename P11 , typename P12 , typename P13 , typename P14 , typename P15 ,
    typename P16 , typename P17 , typename P18 , typename P19 , typename P20 ,
    typename P21 , typename P22 , typename P23 , typename P24 , typename P25 ,
    typename P26 , typename P27 , typename P28 , typename P29 , typename P30 ,
    typename P31 , typename P32 , typename P33 , typename P34 , typename P35 ,
    typename P36 , typename P37 , typename P38 , typename P39  >
struct Operation< Interface, IsOneway, Return , P0 , P1 , P2 , P3 , P4 , P5 ,
    P6 , P7 , P8 , P9 , P10 , P11 , P12 , P13 , P14 , P15 , P16 , P17 , P18 ,
    P19 , P20 , P21 , P22 , P23 , P24 , P25 , P26 , P27 , P28 , P29 , P30 ,
    P31 , P32 , P33 , P34 , P35 , P36 , P37 , P38 , P39  , detail::none ,
    detail::none , detail::none , detail::none , detail::none , detail::none ,
    detail::none , detail::none , detail::none , detail::none , detail::none  >
{
    typedef Interface interface_type;
    static const bool isOneway = IsOneway;
    typedef typename mapping::return_type< Return >::type return_type;

    typedef typename mapping::arg_type< P0 >::type p0_type;
    typedef typename mapping::arg_type< P1 >::type p1_type;
    typedef typename mapping::arg_type< P2 >::type p2_type;
    typedef typename mapping::arg_type< P3 >::type p3_type;
    typedef typename mapping::arg_type< P4 >::type p4_type;
    typedef typename mapping::arg_type< P5 >::type p5_type;
    typedef typename mapping::arg_type< P6 >::type p6_type;
    typedef typename mapping::arg_type< P7 >::type p7_type;
    typedef typename mapping::arg_type< P8 >::type p8_type;
    typedef typename mapping::arg_type< P9 >::type p9_type;
    typedef typename mapping::arg_type< P10 >::type p10_type;
    typedef typename mapping::arg_type< P11 >::type p11_type;
    typedef typename mapping::arg_type< P12 >::type p12_type;
    typedef typename mapping::arg_type< P13 >::type p13_type;
    typedef typename mapping::arg_type< P14 >::type p14_type;
    typedef typename mapping::arg_type< P15 >::type p15_type;
    typedef typename mapping::arg_type< P16 >::type p16_type;
    typedef typename mapping::arg_type< P17 >::type p17_type;
    typedef typename mapping::arg_type< P18 >::type p18_type;
    typedef typename mapping::arg_type< P19 >::type p19_type;
    typedef typename mapping::arg_type< P20 >::type p20_type;
    typedef typename mapping::arg_type< P21 >::type p21_type;
    typedef typename mapping::arg_type< P22 >::type p22_type;
    typedef typename mapping::arg_type< P23 >::type p23_type;
    typedef typename mapping::arg_type< P24 >::type p24_type;
    typedef typename mapping::arg_type< P25 >::type p25_type;
    typedef typename mapping::arg_type< P26 >::type p26_type;
    typedef typename mapping::arg_type< P27 >::type p27_type;
    typedef typename mapping::arg_type< P28 >::type p28_type;
    typedef typename mapping::arg_type< P29 >::type p29_type;
    typedef typename mapping::arg_type< P30 >::type p30_type;
    typedef typename mapping::arg_type< P31 >::type p31_type;
    typedef typename mapping::arg_type< P32 >::type p32_type;
    typedef typename mapping::arg_type< P33 >::type p33_type;
    typedef typename mapping::arg_type< P34 >::type p34_type;
    typedef typename mapping::arg_type< P35 >::type p35_type;
    typedef typename mapping::arg_type< P36 >::type p36_type;
    typedef typename mapping::arg_type< P37 >::type p37_type;
    typedef typename mapping::arg_type< P38 >::type p38_type;
    typedef typename mapping::arg_type< P39 >::type p39_type;

	struct parameters_t
	{
    		P0 p0;
    		P1 p1;
    		P2 p2;
    		P3 p3;
    		P4 p4;
    		P5 p5;
    		P6 p6;
    		P7 p7;
    		P8 p8;
    		P9 p9;
    		P10 p10;
    		P11 p11;
    		P12 p12;
    		P13 p13;
    		P14 p14;
    		P15 p15;
    		P16 p16;
    		P17 p17;
    		P18 p18;
    		P19 p19;
    		P20 p20;
    		P21 p21;
    		P22 p22;
    		P23 p23;
    		P24 p24;
    		P25 p25;
    		P26 p26;
    		P27 p27;
    		P28 p28;
    		P29 p29;
    		P30 p30;
    		P31 p31;
    		P32 p32;
    		P33 p33;
    		P34 p34;
    		P35 p35;
    		P36 p36;
    		P37 p37;
    		P38 p38;
    		P39 p39;
    	};

    typedef return_type (interface_type::*type)(p0_type , p1_type , p2_type ,
        p3_type , p4_type , p5_type , p6_type , p7_type , p8_type , p9_type ,
        p10_type , p11_type , p12_type , p13_type , p14_type , p15_type ,
        p16_type , p17_type , p18_type , p19_type , p20_type , p21_type ,
        p22_type , p23_type , p24_type , p25_type , p26_type , p27_type ,
        p28_type , p29_type , p30_type , p31_type , p32_type , p33_type ,
        p34_type , p35_type , p36_type , p37_type , p38_type , p39_type );

    static const unsigned int nparams = 40;

    struct handler_t : public OperationHandler
    {
    	type m_operation;

    	handler_t(type operation) : m_operation(operation)
    	{
    	}

    	void do_call(Servant* _this, ServerRequest* request, const char** names)
    	{

    		typename idlyami::skel::skel_type< P0 >::type __v0(*request, *(names++));
    		typename idlyami::skel::skel_type< P1 >::type __v1(*request, *(names++));
    		typename idlyami::skel::skel_type< P2 >::type __v2(*request, *(names++));
    		typename idlyami::skel::skel_type< P3 >::type __v3(*request, *(names++));
    		typename idlyami::skel::skel_type< P4 >::type __v4(*request, *(names++));
    		typename idlyami::skel::skel_type< P5 >::type __v5(*request, *(names++));
    		typename idlyami::skel::skel_type< P6 >::type __v6(*request, *(names++));
    		typename idlyami::skel::skel_type< P7 >::type __v7(*request, *(names++));
    		typename idlyami::skel::skel_type< P8 >::type __v8(*request, *(names++));
    		typename idlyami::skel::skel_type< P9 >::type __v9(*request, *(names++));
      typename idlyami::skel::skel_type< P10 >::type __v10(*request,
          *(names++));
      typename idlyami::skel::skel_type< P11 >::type __v11(*request,
          *(names++));
      typename idlyami::skel::skel_type< P12 >::type __v12(*request,
          *(names++));
      typename idlyami::skel::skel_type< P13 >::type __v13(*request,
          *(names++));
      typename idlyami::skel::skel_type< P14 >::type __v14(*request,
          *(names++));
      typename idlyami::skel::skel_type< P15 >::type __v15(*request,
          *(names++));
      typename idlyami::skel::skel_type< P16 >::type __v16(*request,
          *(names++));
      typename idlyami::skel::skel_type< P17 >::type __v17(*request,
          *(names++));
      typename idlyami::skel::skel_type< P18 >::type __v18(*request,
          *(names++));
      typename idlyami::skel::skel_type< P19 >::type __v19(*request,
          *(names++));
      typename idlyami::skel::skel_type< P20 >::type __v20(*request,
          *(names++));
      typename idlyami::skel::skel_type< P21 >::type __v21(*request,
          *(names++));
      typename idlyami::skel::skel_type< P22 >::type __v22(*request,
          *(names++));
      typename idlyami::skel::skel_type< P23 >::type __v23(*request,
          *(names++));
      typename idlyami::skel::skel_type< P24 >::type __v24(*request,
          *(names++));
      typename idlyami::skel::skel_type< P25 >::type __v25(*request,
          *(names++));
      typename idlyami::skel::skel_type< P26 >::type __v26(*request,
          *(names++));
      typename idlyami::skel::skel_type< P27 >::type __v27(*request,
          *(names++));
      typename idlyami::skel::skel_type< P28 >::type __v28(*request,
          *(names++));
      typename idlyami::skel::skel_type< P29 >::type __v29(*request,
          *(names++));
      typename idlyami::skel::skel_type< P30 >::type __v30(*request,
          *(names++));
      typename idlyami::skel::skel_type< P31 >::type __v31(*request,
          *(names++));
      typename idlyami::skel::skel_type< P32 >::type __v32(*request,
          *(names++));
      typename idlyami::skel::skel_type< P33 >::type __v33(*request,
          *(names++));
      typename idlyami::skel::skel_type< P34 >::type __v34(*request,
          *(names++));
      typename idlyami::skel::skel_type< P35 >::type __v35(*request,
          *(names++));
      typename idlyami::skel::skel_type< P36 >::type __v36(*request,
          *(names++));
      typename idlyami::skel::skel_type< P37 >::type __v37(*request,
          *(names++));
      typename idlyami::skel::skel_type< P38 >::type __v38(*request,
          *(names++));
      typename idlyami::skel::skel_type< P39 >::type __v39(*request,
          *(names++));
           (dynamic_cast< interface_type* >(_this)->*m_operation)(__v0.val() ,
               __v1.val() , __v2.val() , __v3.val() , __v4.val() , __v5.val() ,
               __v6.val() , __v7.val() , __v8.val() , __v9.val() ,
               __v10.val() , __v11.val() , __v12.val() , __v13.val() ,
               __v14.val() , __v15.val() , __v16.val() , __v17.val() ,
               __v18.val() , __v19.val() , __v20.val() , __v21.val() ,
               __v22.val() , __v23.val() , __v24.val() , __v25.val() ,
               __v26.val() , __v27.val() , __v28.val() , __v29.val() ,
               __v30.val() , __v31.val() , __v32.val() , __v33.val() ,
               __v34.val() , __v35.val() , __v36.val() , __v37.val() ,
               __v38.val() , __v39.val() );
    	}
	};
};

template< typename Interface, bool IsOneway, typename Return , typename P0 ,
    typename P1 , typename P2 , typename P3 , typename P4 , typename P5 ,
    typename P6 , typename P7 , typename P8 , typename P9 , typename P10 ,
    typename P11 , typename P12 , typename P13 , typename P14 , typename P15 ,
    typename P16 , typename P17 , typename P18 , typename P19 , typename P20 ,
    typename P21 , typename P22 , typename P23 , typename P24 , typename P25 ,
    typename P26 , typename P27 , typename P28 , typename P29 , typename P30 ,
    typename P31 , typename P32 , typename P33 , typename P34 , typename P35 ,
    typename P36 , typename P37 , typename P38 , typename P39 , typename P40  >
struct Operation< Interface, IsOneway, Return , P0 , P1 , P2 , P3 , P4 , P5 ,
    P6 , P7 , P8 , P9 , P10 , P11 , P12 , P13 , P14 , P15 , P16 , P17 , P18 ,
    P19 , P20 , P21 , P22 , P23 , P24 , P25 , P26 , P27 , P28 , P29 , P30 ,
    P31 , P32 , P33 , P34 , P35 , P36 , P37 , P38 , P39 , P40  , detail::none ,
    detail::none , detail::none , detail::none , detail::none , detail::none ,
    detail::none , detail::none , detail::none , detail::none  >
{
    typedef Interface interface_type;
    static const bool isOneway = IsOneway;
    typedef typename mapping::return_type< Return >::type return_type;

    typedef typename mapping::arg_type< P0 >::type p0_type;
    typedef typename mapping::arg_type< P1 >::type p1_type;
    typedef typename mapping::arg_type< P2 >::type p2_type;
    typedef typename mapping::arg_type< P3 >::type p3_type;
    typedef typename mapping::arg_type< P4 >::type p4_type;
    typedef typename mapping::arg_type< P5 >::type p5_type;
    typedef typename mapping::arg_type< P6 >::type p6_type;
    typedef typename mapping::arg_type< P7 >::type p7_type;
    typedef typename mapping::arg_type< P8 >::type p8_type;
    typedef typename mapping::arg_type< P9 >::type p9_type;
    typedef typename mapping::arg_type< P10 >::type p10_type;
    typedef typename mapping::arg_type< P11 >::type p11_type;
    typedef typename mapping::arg_type< P12 >::type p12_type;
    typedef typename mapping::arg_type< P13 >::type p13_type;
    typedef typename mapping::arg_type< P14 >::type p14_type;
    typedef typename mapping::arg_type< P15 >::type p15_type;
    typedef typename mapping::arg_type< P16 >::type p16_type;
    typedef typename mapping::arg_type< P17 >::type p17_type;
    typedef typename mapping::arg_type< P18 >::type p18_type;
    typedef typename mapping::arg_type< P19 >::type p19_type;
    typedef typename mapping::arg_type< P20 >::type p20_type;
    typedef typename mapping::arg_type< P21 >::type p21_type;
    typedef typename mapping::arg_type< P22 >::type p22_type;
    typedef typename mapping::arg_type< P23 >::type p23_type;
    typedef typename mapping::arg_type< P24 >::type p24_type;
    typedef typename mapping::arg_type< P25 >::type p25_type;
    typedef typename mapping::arg_type< P26 >::type p26_type;
    typedef typename mapping::arg_type< P27 >::type p27_type;
    typedef typename mapping::arg_type< P28 >::type p28_type;
    typedef typename mapping::arg_type< P29 >::type p29_type;
    typedef typename mapping::arg_type< P30 >::type p30_type;
    typedef typename mapping::arg_type< P31 >::type p31_type;
    typedef typename mapping::arg_type< P32 >::type p32_type;
    typedef typename mapping::arg_type< P33 >::type p33_type;
    typedef typename mapping::arg_type< P34 >::type p34_type;
    typedef typename mapping::arg_type< P35 >::type p35_type;
    typedef typename mapping::arg_type< P36 >::type p36_type;
    typedef typename mapping::arg_type< P37 >::type p37_type;
    typedef typename mapping::arg_type< P38 >::type p38_type;
    typedef typename mapping::arg_type< P39 >::type p39_type;
    typedef typename mapping::arg_type< P40 >::type p40_type;

	struct parameters_t
	{
    		P0 p0;
    		P1 p1;
    		P2 p2;
    		P3 p3;
    		P4 p4;
    		P5 p5;
    		P6 p6;
    		P7 p7;
    		P8 p8;
    		P9 p9;
    		P10 p10;
    		P11 p11;
    		P12 p12;
    		P13 p13;
    		P14 p14;
    		P15 p15;
    		P16 p16;
    		P17 p17;
    		P18 p18;
    		P19 p19;
    		P20 p20;
    		P21 p21;
    		P22 p22;
    		P23 p23;
    		P24 p24;
    		P25 p25;
    		P26 p26;
    		P27 p27;
    		P28 p28;
    		P29 p29;
    		P30 p30;
    		P31 p31;
    		P32 p32;
    		P33 p33;
    		P34 p34;
    		P35 p35;
    		P36 p36;
    		P37 p37;
    		P38 p38;
    		P39 p39;
    		P40 p40;
    	};

    typedef return_type (interface_type::*type)(p0_type , p1_type , p2_type ,
        p3_type , p4_type , p5_type , p6_type , p7_type , p8_type , p9_type ,
        p10_type , p11_type , p12_type , p13_type , p14_type , p15_type ,
        p16_type , p17_type , p18_type , p19_type , p20_type , p21_type ,
        p22_type , p23_type , p24_type , p25_type , p26_type , p27_type ,
        p28_type , p29_type , p30_type , p31_type , p32_type , p33_type ,
        p34_type , p35_type , p36_type , p37_type , p38_type , p39_type ,
        p40_type );

    static const unsigned int nparams = 41;

    struct handler_t : public OperationHandler
    {
    	type m_operation;

    	handler_t(type operation) : m_operation(operation)
    	{
    	}

    	void do_call(Servant* _this, ServerRequest* request, const char** names)
    	{

    		typename idlyami::skel::skel_type< P0 >::type __v0(*request, *(names++));
    		typename idlyami::skel::skel_type< P1 >::type __v1(*request, *(names++));
    		typename idlyami::skel::skel_type< P2 >::type __v2(*request, *(names++));
    		typename idlyami::skel::skel_type< P3 >::type __v3(*request, *(names++));
    		typename idlyami::skel::skel_type< P4 >::type __v4(*request, *(names++));
    		typename idlyami::skel::skel_type< P5 >::type __v5(*request, *(names++));
    		typename idlyami::skel::skel_type< P6 >::type __v6(*request, *(names++));
    		typename idlyami::skel::skel_type< P7 >::type __v7(*request, *(names++));
    		typename idlyami::skel::skel_type< P8 >::type __v8(*request, *(names++));
    		typename idlyami::skel::skel_type< P9 >::type __v9(*request, *(names++));
      typename idlyami::skel::skel_type< P10 >::type __v10(*request,
          *(names++));
      typename idlyami::skel::skel_type< P11 >::type __v11(*request,
          *(names++));
      typename idlyami::skel::skel_type< P12 >::type __v12(*request,
          *(names++));
      typename idlyami::skel::skel_type< P13 >::type __v13(*request,
          *(names++));
      typename idlyami::skel::skel_type< P14 >::type __v14(*request,
          *(names++));
      typename idlyami::skel::skel_type< P15 >::type __v15(*request,
          *(names++));
      typename idlyami::skel::skel_type< P16 >::type __v16(*request,
          *(names++));
      typename idlyami::skel::skel_type< P17 >::type __v17(*request,
          *(names++));
      typename idlyami::skel::skel_type< P18 >::type __v18(*request,
          *(names++));
      typename idlyami::skel::skel_type< P19 >::type __v19(*request,
          *(names++));
      typename idlyami::skel::skel_type< P20 >::type __v20(*request,
          *(names++));
      typename idlyami::skel::skel_type< P21 >::type __v21(*request,
          *(names++));
      typename idlyami::skel::skel_type< P22 >::type __v22(*request,
          *(names++));
      typename idlyami::skel::skel_type< P23 >::type __v23(*request,
          *(names++));
      typename idlyami::skel::skel_type< P24 >::type __v24(*request,
          *(names++));
      typename idlyami::skel::skel_type< P25 >::type __v25(*request,
          *(names++));
      typename idlyami::skel::skel_type< P26 >::type __v26(*request,
          *(names++));
      typename idlyami::skel::skel_type< P27 >::type __v27(*request,
          *(names++));
      typename idlyami::skel::skel_type< P28 >::type __v28(*request,
          *(names++));
      typename idlyami::skel::skel_type< P29 >::type __v29(*request,
          *(names++));
      typename idlyami::skel::skel_type< P30 >::type __v30(*request,
          *(names++));
      typename idlyami::skel::skel_type< P31 >::type __v31(*request,
          *(names++));
      typename idlyami::skel::skel_type< P32 >::type __v32(*request,
          *(names++));
      typename idlyami::skel::skel_type< P33 >::type __v33(*request,
          *(names++));
      typename idlyami::skel::skel_type< P34 >::type __v34(*request,
          *(names++));
      typename idlyami::skel::skel_type< P35 >::type __v35(*request,
          *(names++));
      typename idlyami::skel::skel_type< P36 >::type __v36(*request,
          *(names++));
      typename idlyami::skel::skel_type< P37 >::type __v37(*request,
          *(names++));
      typename idlyami::skel::skel_type< P38 >::type __v38(*request,
          *(names++));
      typename idlyami::skel::skel_type< P39 >::type __v39(*request,
          *(names++));
      typename idlyami::skel::skel_type< P40 >::type __v40(*request,
          *(names++));
           (dynamic_cast< interface_type* >(_this)->*m_operation)(__v0.val() ,
               __v1.val() , __v2.val() , __v3.val() , __v4.val() , __v5.val() ,
               __v6.val() , __v7.val() , __v8.val() , __v9.val() ,
               __v10.val() , __v11.val() , __v12.val() , __v13.val() ,
               __v14.val() , __v15.val() , __v16.val() , __v17.val() ,
               __v18.val() , __v19.val() , __v20.val() , __v21.val() ,
               __v22.val() , __v23.val() , __v24.val() , __v25.val() ,
               __v26.val() , __v27.val() , __v28.val() , __v29.val() ,
               __v30.val() , __v31.val() , __v32.val() , __v33.val() ,
               __v34.val() , __v35.val() , __v36.val() , __v37.val() ,
               __v38.val() , __v39.val() , __v40.val() );
    	}
	};
};

template< typename Interface, bool IsOneway, typename Return , typename P0 ,
    typename P1 , typename P2 , typename P3 , typename P4 , typename P5 ,
    typename P6 , typename P7 , typename P8 , typename P9 , typename P10 ,
    typename P11 , typename P12 , typename P13 , typename P14 , typename P15 ,
    typename P16 , typename P17 , typename P18 , typename P19 , typename P20 ,
    typename P21 , typename P22 , typename P23 , typename P24 , typename P25 ,
    typename P26 , typename P27 , typename P28 , typename P29 , typename P30 ,
    typename P31 , typename P32 , typename P33 , typename P34 , typename P35 ,
    typename P36 , typename P37 , typename P38 , typename P39 , typename P40 ,
    typename P41  >
struct Operation< Interface, IsOneway, Return , P0 , P1 , P2 , P3 , P4 , P5 ,
    P6 , P7 , P8 , P9 , P10 , P11 , P12 , P13 , P14 , P15 , P16 , P17 , P18 ,
    P19 , P20 , P21 , P22 , P23 , P24 , P25 , P26 , P27 , P28 , P29 , P30 ,
    P31 , P32 , P33 , P34 , P35 , P36 , P37 , P38 , P39 , P40 , P41  ,
    detail::none , detail::none , detail::none , detail::none , detail::none ,
    detail::none , detail::none , detail::none , detail::none  >
{
    typedef Interface interface_type;
    static const bool isOneway = IsOneway;
    typedef typename mapping::return_type< Return >::type return_type;

    typedef typename mapping::arg_type< P0 >::type p0_type;
    typedef typename mapping::arg_type< P1 >::type p1_type;
    typedef typename mapping::arg_type< P2 >::type p2_type;
    typedef typename mapping::arg_type< P3 >::type p3_type;
    typedef typename mapping::arg_type< P4 >::type p4_type;
    typedef typename mapping::arg_type< P5 >::type p5_type;
    typedef typename mapping::arg_type< P6 >::type p6_type;
    typedef typename mapping::arg_type< P7 >::type p7_type;
    typedef typename mapping::arg_type< P8 >::type p8_type;
    typedef typename mapping::arg_type< P9 >::type p9_type;
    typedef typename mapping::arg_type< P10 >::type p10_type;
    typedef typename mapping::arg_type< P11 >::type p11_type;
    typedef typename mapping::arg_type< P12 >::type p12_type;
    typedef typename mapping::arg_type< P13 >::type p13_type;
    typedef typename mapping::arg_type< P14 >::type p14_type;
    typedef typename mapping::arg_type< P15 >::type p15_type;
    typedef typename mapping::arg_type< P16 >::type p16_type;
    typedef typename mapping::arg_type< P17 >::type p17_type;
    typedef typename mapping::arg_type< P18 >::type p18_type;
    typedef typename mapping::arg_type< P19 >::type p19_type;
    typedef typename mapping::arg_type< P20 >::type p20_type;
    typedef typename mapping::arg_type< P21 >::type p21_type;
    typedef typename mapping::arg_type< P22 >::type p22_type;
    typedef typename mapping::arg_type< P23 >::type p23_type;
    typedef typename mapping::arg_type< P24 >::type p24_type;
    typedef typename mapping::arg_type< P25 >::type p25_type;
    typedef typename mapping::arg_type< P26 >::type p26_type;
    typedef typename mapping::arg_type< P27 >::type p27_type;
    typedef typename mapping::arg_type< P28 >::type p28_type;
    typedef typename mapping::arg_type< P29 >::type p29_type;
    typedef typename mapping::arg_type< P30 >::type p30_type;
    typedef typename mapping::arg_type< P31 >::type p31_type;
    typedef typename mapping::arg_type< P32 >::type p32_type;
    typedef typename mapping::arg_type< P33 >::type p33_type;
    typedef typename mapping::arg_type< P34 >::type p34_type;
    typedef typename mapping::arg_type< P35 >::type p35_type;
    typedef typename mapping::arg_type< P36 >::type p36_type;
    typedef typename mapping::arg_type< P37 >::type p37_type;
    typedef typename mapping::arg_type< P38 >::type p38_type;
    typedef typename mapping::arg_type< P39 >::type p39_type;
    typedef typename mapping::arg_type< P40 >::type p40_type;
    typedef typename mapping::arg_type< P41 >::type p41_type;

	struct parameters_t
	{
    		P0 p0;
    		P1 p1;
    		P2 p2;
    		P3 p3;
    		P4 p4;
    		P5 p5;
    		P6 p6;
    		P7 p7;
    		P8 p8;
    		P9 p9;
    		P10 p10;
    		P11 p11;
    		P12 p12;
    		P13 p13;
    		P14 p14;
    		P15 p15;
    		P16 p16;
    		P17 p17;
    		P18 p18;
    		P19 p19;
    		P20 p20;
    		P21 p21;
    		P22 p22;
    		P23 p23;
    		P24 p24;
    		P25 p25;
    		P26 p26;
    		P27 p27;
    		P28 p28;
    		P29 p29;
    		P30 p30;
    		P31 p31;
    		P32 p32;
    		P33 p33;
    		P34 p34;
    		P35 p35;
    		P36 p36;
    		P37 p37;
    		P38 p38;
    		P39 p39;
    		P40 p40;
    		P41 p41;
    	};

    typedef return_type (interface_type::*type)(p0_type , p1_type , p2_type ,
        p3_type , p4_type , p5_type , p6_type , p7_type , p8_type , p9_type ,
        p10_type , p11_type , p12_type , p13_type , p14_type , p15_type ,
        p16_type , p17_type , p18_type , p19_type , p20_type , p21_type ,
        p22_type , p23_type , p24_type , p25_type , p26_type , p27_type ,
        p28_type , p29_type , p30_type , p31_type , p32_type , p33_type ,
        p34_type , p35_type , p36_type , p37_type , p38_type , p39_type ,
        p40_type , p41_type );

    static const unsigned int nparams = 42;

    struct handler_t : public OperationHandler
    {
    	type m_operation;

    	handler_t(type operation) : m_operation(operation)
    	{
    	}

    	void do_call(Servant* _this, ServerRequest* request, const char** names)
    	{

    		typename idlyami::skel::skel_type< P0 >::type __v0(*request, *(names++));
    		typename idlyami::skel::skel_type< P1 >::type __v1(*request, *(names++));
    		typename idlyami::skel::skel_type< P2 >::type __v2(*request, *(names++));
    		typename idlyami::skel::skel_type< P3 >::type __v3(*request, *(names++));
    		typename idlyami::skel::skel_type< P4 >::type __v4(*request, *(names++));
    		typename idlyami::skel::skel_type< P5 >::type __v5(*request, *(names++));
    		typename idlyami::skel::skel_type< P6 >::type __v6(*request, *(names++));
    		typename idlyami::skel::skel_type< P7 >::type __v7(*request, *(names++));
    		typename idlyami::skel::skel_type< P8 >::type __v8(*request, *(names++));
    		typename idlyami::skel::skel_type< P9 >::type __v9(*request, *(names++));
      typename idlyami::skel::skel_type< P10 >::type __v10(*request,
          *(names++));
      typename idlyami::skel::skel_type< P11 >::type __v11(*request,
          *(names++));
      typename idlyami::skel::skel_type< P12 >::type __v12(*request,
          *(names++));
      typename idlyami::skel::skel_type< P13 >::type __v13(*request,
          *(names++));
      typename idlyami::skel::skel_type< P14 >::type __v14(*request,
          *(names++));
      typename idlyami::skel::skel_type< P15 >::type __v15(*request,
          *(names++));
      typename idlyami::skel::skel_type< P16 >::type __v16(*request,
          *(names++));
      typename idlyami::skel::skel_type< P17 >::type __v17(*request,
          *(names++));
      typename idlyami::skel::skel_type< P18 >::type __v18(*request,
          *(names++));
      typename idlyami::skel::skel_type< P19 >::type __v19(*request,
          *(names++));
      typename idlyami::skel::skel_type< P20 >::type __v20(*request,
          *(names++));
      typename idlyami::skel::skel_type< P21 >::type __v21(*request,
          *(names++));
      typename idlyami::skel::skel_type< P22 >::type __v22(*request,
          *(names++));
      typename idlyami::skel::skel_type< P23 >::type __v23(*request,
          *(names++));
      typename idlyami::skel::skel_type< P24 >::type __v24(*request,
          *(names++));
      typename idlyami::skel::skel_type< P25 >::type __v25(*request,
          *(names++));
      typename idlyami::skel::skel_type< P26 >::type __v26(*request,
          *(names++));
      typename idlyami::skel::skel_type< P27 >::type __v27(*request,
          *(names++));
      typename idlyami::skel::skel_type< P28 >::type __v28(*request,
          *(names++));
      typename idlyami::skel::skel_type< P29 >::type __v29(*request,
          *(names++));
      typename idlyami::skel::skel_type< P30 >::type __v30(*request,
          *(names++));
      typename idlyami::skel::skel_type< P31 >::type __v31(*request,
          *(names++));
      typename idlyami::skel::skel_type< P32 >::type __v32(*request,
          *(names++));
      typename idlyami::skel::skel_type< P33 >::type __v33(*request,
          *(names++));
      typename idlyami::skel::skel_type< P34 >::type __v34(*request,
          *(names++));
      typename idlyami::skel::skel_type< P35 >::type __v35(*request,
          *(names++));
      typename idlyami::skel::skel_type< P36 >::type __v36(*request,
          *(names++));
      typename idlyami::skel::skel_type< P37 >::type __v37(*request,
          *(names++));
      typename idlyami::skel::skel_type< P38 >::type __v38(*request,
          *(names++));
      typename idlyami::skel::skel_type< P39 >::type __v39(*request,
          *(names++));
      typename idlyami::skel::skel_type< P40 >::type __v40(*request,
          *(names++));
      typename idlyami::skel::skel_type< P41 >::type __v41(*request,
          *(names++));
           (dynamic_cast< interface_type* >(_this)->*m_operation)(__v0.val() ,
               __v1.val() , __v2.val() , __v3.val() , __v4.val() , __v5.val() ,
               __v6.val() , __v7.val() , __v8.val() , __v9.val() ,
               __v10.val() , __v11.val() , __v12.val() , __v13.val() ,
               __v14.val() , __v15.val() , __v16.val() , __v17.val() ,
               __v18.val() , __v19.val() , __v20.val() , __v21.val() ,
               __v22.val() , __v23.val() , __v24.val() , __v25.val() ,
               __v26.val() , __v27.val() , __v28.val() , __v29.val() ,
               __v30.val() , __v31.val() , __v32.val() , __v33.val() ,
               __v34.val() , __v35.val() , __v36.val() , __v37.val() ,
               __v38.val() , __v39.val() , __v40.val() , __v41.val() );
    	}
	};
};

template< typename Interface, bool IsOneway, typename Return , typename P0 ,
    typename P1 , typename P2 , typename P3 , typename P4 , typename P5 ,
    typename P6 , typename P7 , typename P8 , typename P9 , typename P10 ,
    typename P11 , typename P12 , typename P13 , typename P14 , typename P15 ,
    typename P16 , typename P17 , typename P18 , typename P19 , typename P20 ,
    typename P21 , typename P22 , typename P23 , typename P24 , typename P25 ,
    typename P26 , typename P27 , typename P28 , typename P29 , typename P30 ,
    typename P31 , typename P32 , typename P33 , typename P34 , typename P35 ,
    typename P36 , typename P37 , typename P38 , typename P39 , typename P40 ,
    typename P41 , typename P42  >
struct Operation< Interface, IsOneway, Return , P0 , P1 , P2 , P3 , P4 , P5 ,
    P6 , P7 , P8 , P9 , P10 , P11 , P12 , P13 , P14 , P15 , P16 , P17 , P18 ,
    P19 , P20 , P21 , P22 , P23 , P24 , P25 , P26 , P27 , P28 , P29 , P30 ,
    P31 , P32 , P33 , P34 , P35 , P36 , P37 , P38 , P39 , P40 , P41 , P42  ,
    detail::none , detail::none , detail::none , detail::none , detail::none ,
    detail::none , detail::none , detail::none  >
{
    typedef Interface interface_type;
    static const bool isOneway = IsOneway;
    typedef typename mapping::return_type< Return >::type return_type;

    typedef typename mapping::arg_type< P0 >::type p0_type;
    typedef typename mapping::arg_type< P1 >::type p1_type;
    typedef typename mapping::arg_type< P2 >::type p2_type;
    typedef typename mapping::arg_type< P3 >::type p3_type;
    typedef typename mapping::arg_type< P4 >::type p4_type;
    typedef typename mapping::arg_type< P5 >::type p5_type;
    typedef typename mapping::arg_type< P6 >::type p6_type;
    typedef typename mapping::arg_type< P7 >::type p7_type;
    typedef typename mapping::arg_type< P8 >::type p8_type;
    typedef typename mapping::arg_type< P9 >::type p9_type;
    typedef typename mapping::arg_type< P10 >::type p10_type;
    typedef typename mapping::arg_type< P11 >::type p11_type;
    typedef typename mapping::arg_type< P12 >::type p12_type;
    typedef typename mapping::arg_type< P13 >::type p13_type;
    typedef typename mapping::arg_type< P14 >::type p14_type;
    typedef typename mapping::arg_type< P15 >::type p15_type;
    typedef typename mapping::arg_type< P16 >::type p16_type;
    typedef typename mapping::arg_type< P17 >::type p17_type;
    typedef typename mapping::arg_type< P18 >::type p18_type;
    typedef typename mapping::arg_type< P19 >::type p19_type;
    typedef typename mapping::arg_type< P20 >::type p20_type;
    typedef typename mapping::arg_type< P21 >::type p21_type;
    typedef typename mapping::arg_type< P22 >::type p22_type;
    typedef typename mapping::arg_type< P23 >::type p23_type;
    typedef typename mapping::arg_type< P24 >::type p24_type;
    typedef typename mapping::arg_type< P25 >::type p25_type;
    typedef typename mapping::arg_type< P26 >::type p26_type;
    typedef typename mapping::arg_type< P27 >::type p27_type;
    typedef typename mapping::arg_type< P28 >::type p28_type;
    typedef typename mapping::arg_type< P29 >::type p29_type;
    typedef typename mapping::arg_type< P30 >::type p30_type;
    typedef typename mapping::arg_type< P31 >::type p31_type;
    typedef typename mapping::arg_type< P32 >::type p32_type;
    typedef typename mapping::arg_type< P33 >::type p33_type;
    typedef typename mapping::arg_type< P34 >::type p34_type;
    typedef typename mapping::arg_type< P35 >::type p35_type;
    typedef typename mapping::arg_type< P36 >::type p36_type;
    typedef typename mapping::arg_type< P37 >::type p37_type;
    typedef typename mapping::arg_type< P38 >::type p38_type;
    typedef typename mapping::arg_type< P39 >::type p39_type;
    typedef typename mapping::arg_type< P40 >::type p40_type;
    typedef typename mapping::arg_type< P41 >::type p41_type;
    typedef typename mapping::arg_type< P42 >::type p42_type;

	struct parameters_t
	{
    		P0 p0;
    		P1 p1;
    		P2 p2;
    		P3 p3;
    		P4 p4;
    		P5 p5;
    		P6 p6;
    		P7 p7;
    		P8 p8;
    		P9 p9;
    		P10 p10;
    		P11 p11;
    		P12 p12;
    		P13 p13;
    		P14 p14;
    		P15 p15;
    		P16 p16;
    		P17 p17;
    		P18 p18;
    		P19 p19;
    		P20 p20;
    		P21 p21;
    		P22 p22;
    		P23 p23;
    		P24 p24;
    		P25 p25;
    		P26 p26;
    		P27 p27;
    		P28 p28;
    		P29 p29;
    		P30 p30;
    		P31 p31;
    		P32 p32;
    		P33 p33;
    		P34 p34;
    		P35 p35;
    		P36 p36;
    		P37 p37;
    		P38 p38;
    		P39 p39;
    		P40 p40;
    		P41 p41;
    		P42 p42;
    	};

    typedef return_type (interface_type::*type)(p0_type , p1_type , p2_type ,
        p3_type , p4_type , p5_type , p6_type , p7_type , p8_type , p9_type ,
        p10_type , p11_type , p12_type , p13_type , p14_type , p15_type ,
        p16_type , p17_type , p18_type , p19_type , p20_type , p21_type ,
        p22_type , p23_type , p24_type , p25_type , p26_type , p27_type ,
        p28_type , p29_type , p30_type , p31_type , p32_type , p33_type ,
        p34_type , p35_type , p36_type , p37_type , p38_type , p39_type ,
        p40_type , p41_type , p42_type );

    static const unsigned int nparams = 43;

    struct handler_t : public OperationHandler
    {
    	type m_operation;

    	handler_t(type operation) : m_operation(operation)
    	{
    	}

    	void do_call(Servant* _this, ServerRequest* request, const char** names)
    	{

    		typename idlyami::skel::skel_type< P0 >::type __v0(*request, *(names++));
    		typename idlyami::skel::skel_type< P1 >::type __v1(*request, *(names++));
    		typename idlyami::skel::skel_type< P2 >::type __v2(*request, *(names++));
    		typename idlyami::skel::skel_type< P3 >::type __v3(*request, *(names++));
    		typename idlyami::skel::skel_type< P4 >::type __v4(*request, *(names++));
    		typename idlyami::skel::skel_type< P5 >::type __v5(*request, *(names++));
    		typename idlyami::skel::skel_type< P6 >::type __v6(*request, *(names++));
    		typename idlyami::skel::skel_type< P7 >::type __v7(*request, *(names++));
    		typename idlyami::skel::skel_type< P8 >::type __v8(*request, *(names++));
    		typename idlyami::skel::skel_type< P9 >::type __v9(*request, *(names++));
      typename idlyami::skel::skel_type< P10 >::type __v10(*request,
          *(names++));
      typename idlyami::skel::skel_type< P11 >::type __v11(*request,
          *(names++));
      typename idlyami::skel::skel_type< P12 >::type __v12(*request,
          *(names++));
      typename idlyami::skel::skel_type< P13 >::type __v13(*request,
          *(names++));
      typename idlyami::skel::skel_type< P14 >::type __v14(*request,
          *(names++));
      typename idlyami::skel::skel_type< P15 >::type __v15(*request,
          *(names++));
      typename idlyami::skel::skel_type< P16 >::type __v16(*request,
          *(names++));
      typename idlyami::skel::skel_type< P17 >::type __v17(*request,
          *(names++));
      typename idlyami::skel::skel_type< P18 >::type __v18(*request,
          *(names++));
      typename idlyami::skel::skel_type< P19 >::type __v19(*request,
          *(names++));
      typename idlyami::skel::skel_type< P20 >::type __v20(*request,
          *(names++));
      typename idlyami::skel::skel_type< P21 >::type __v21(*request,
          *(names++));
      typename idlyami::skel::skel_type< P22 >::type __v22(*request,
          *(names++));
      typename idlyami::skel::skel_type< P23 >::type __v23(*request,
          *(names++));
      typename idlyami::skel::skel_type< P24 >::type __v24(*request,
          *(names++));
      typename idlyami::skel::skel_type< P25 >::type __v25(*request,
          *(names++));
      typename idlyami::skel::skel_type< P26 >::type __v26(*request,
          *(names++));
      typename idlyami::skel::skel_type< P27 >::type __v27(*request,
          *(names++));
      typename idlyami::skel::skel_type< P28 >::type __v28(*request,
          *(names++));
      typename idlyami::skel::skel_type< P29 >::type __v29(*request,
          *(names++));
      typename idlyami::skel::skel_type< P30 >::type __v30(*request,
          *(names++));
      typename idlyami::skel::skel_type< P31 >::type __v31(*request,
          *(names++));
      typename idlyami::skel::skel_type< P32 >::type __v32(*request,
          *(names++));
      typename idlyami::skel::skel_type< P33 >::type __v33(*request,
          *(names++));
      typename idlyami::skel::skel_type< P34 >::type __v34(*request,
          *(names++));
      typename idlyami::skel::skel_type< P35 >::type __v35(*request,
          *(names++));
      typename idlyami::skel::skel_type< P36 >::type __v36(*request,
          *(names++));
      typename idlyami::skel::skel_type< P37 >::type __v37(*request,
          *(names++));
      typename idlyami::skel::skel_type< P38 >::type __v38(*request,
          *(names++));
      typename idlyami::skel::skel_type< P39 >::type __v39(*request,
          *(names++));
      typename idlyami::skel::skel_type< P40 >::type __v40(*request,
          *(names++));
      typename idlyami::skel::skel_type< P41 >::type __v41(*request,
          *(names++));
      typename idlyami::skel::skel_type< P42 >::type __v42(*request,
          *(names++));
           (dynamic_cast< interface_type* >(_this)->*m_operation)(__v0.val() ,
               __v1.val() , __v2.val() , __v3.val() , __v4.val() , __v5.val() ,
               __v6.val() , __v7.val() , __v8.val() , __v9.val() ,
               __v10.val() , __v11.val() , __v12.val() , __v13.val() ,
               __v14.val() , __v15.val() , __v16.val() , __v17.val() ,
               __v18.val() , __v19.val() , __v20.val() , __v21.val() ,
               __v22.val() , __v23.val() , __v24.val() , __v25.val() ,
               __v26.val() , __v27.val() , __v28.val() , __v29.val() ,
               __v30.val() , __v31.val() , __v32.val() , __v33.val() ,
               __v34.val() , __v35.val() , __v36.val() , __v37.val() ,
               __v38.val() , __v39.val() , __v40.val() , __v41.val() ,
               __v42.val() );
    	}
	};
};

template< typename Interface, bool IsOneway, typename Return , typename P0 ,
    typename P1 , typename P2 , typename P3 , typename P4 , typename P5 ,
    typename P6 , typename P7 , typename P8 , typename P9 , typename P10 ,
    typename P11 , typename P12 , typename P13 , typename P14 , typename P15 ,
    typename P16 , typename P17 , typename P18 , typename P19 , typename P20 ,
    typename P21 , typename P22 , typename P23 , typename P24 , typename P25 ,
    typename P26 , typename P27 , typename P28 , typename P29 , typename P30 ,
    typename P31 , typename P32 , typename P33 , typename P34 , typename P35 ,
    typename P36 , typename P37 , typename P38 , typename P39 , typename P40 ,
    typename P41 , typename P42 , typename P43  >
struct Operation< Interface, IsOneway, Return , P0 , P1 , P2 , P3 , P4 , P5 ,
    P6 , P7 , P8 , P9 , P10 , P11 , P12 , P13 , P14 , P15 , P16 , P17 , P18 ,
    P19 , P20 , P21 , P22 , P23 , P24 , P25 , P26 , P27 , P28 , P29 , P30 ,
    P31 , P32 , P33 , P34 , P35 , P36 , P37 , P38 , P39 , P40 , P41 , P42 ,
    P43  , detail::none , detail::none , detail::none , detail::none ,
    detail::none , detail::none , detail::none  >
{
    typedef Interface interface_type;
    static const bool isOneway = IsOneway;
    typedef typename mapping::return_type< Return >::type return_type;

    typedef typename mapping::arg_type< P0 >::type p0_type;
    typedef typename mapping::arg_type< P1 >::type p1_type;
    typedef typename mapping::arg_type< P2 >::type p2_type;
    typedef typename mapping::arg_type< P3 >::type p3_type;
    typedef typename mapping::arg_type< P4 >::type p4_type;
    typedef typename mapping::arg_type< P5 >::type p5_type;
    typedef typename mapping::arg_type< P6 >::type p6_type;
    typedef typename mapping::arg_type< P7 >::type p7_type;
    typedef typename mapping::arg_type< P8 >::type p8_type;
    typedef typename mapping::arg_type< P9 >::type p9_type;
    typedef typename mapping::arg_type< P10 >::type p10_type;
    typedef typename mapping::arg_type< P11 >::type p11_type;
    typedef typename mapping::arg_type< P12 >::type p12_type;
    typedef typename mapping::arg_type< P13 >::type p13_type;
    typedef typename mapping::arg_type< P14 >::type p14_type;
    typedef typename mapping::arg_type< P15 >::type p15_type;
    typedef typename mapping::arg_type< P16 >::type p16_type;
    typedef typename mapping::arg_type< P17 >::type p17_type;
    typedef typename mapping::arg_type< P18 >::type p18_type;
    typedef typename mapping::arg_type< P19 >::type p19_type;
    typedef typename mapping::arg_type< P20 >::type p20_type;
    typedef typename mapping::arg_type< P21 >::type p21_type;
    typedef typename mapping::arg_type< P22 >::type p22_type;
    typedef typename mapping::arg_type< P23 >::type p23_type;
    typedef typename mapping::arg_type< P24 >::type p24_type;
    typedef typename mapping::arg_type< P25 >::type p25_type;
    typedef typename mapping::arg_type< P26 >::type p26_type;
    typedef typename mapping::arg_type< P27 >::type p27_type;
    typedef typename mapping::arg_type< P28 >::type p28_type;
    typedef typename mapping::arg_type< P29 >::type p29_type;
    typedef typename mapping::arg_type< P30 >::type p30_type;
    typedef typename mapping::arg_type< P31 >::type p31_type;
    typedef typename mapping::arg_type< P32 >::type p32_type;
    typedef typename mapping::arg_type< P33 >::type p33_type;
    typedef typename mapping::arg_type< P34 >::type p34_type;
    typedef typename mapping::arg_type< P35 >::type p35_type;
    typedef typename mapping::arg_type< P36 >::type p36_type;
    typedef typename mapping::arg_type< P37 >::type p37_type;
    typedef typename mapping::arg_type< P38 >::type p38_type;
    typedef typename mapping::arg_type< P39 >::type p39_type;
    typedef typename mapping::arg_type< P40 >::type p40_type;
    typedef typename mapping::arg_type< P41 >::type p41_type;
    typedef typename mapping::arg_type< P42 >::type p42_type;
    typedef typename mapping::arg_type< P43 >::type p43_type;

	struct parameters_t
	{
    		P0 p0;
    		P1 p1;
    		P2 p2;
    		P3 p3;
    		P4 p4;
    		P5 p5;
    		P6 p6;
    		P7 p7;
    		P8 p8;
    		P9 p9;
    		P10 p10;
    		P11 p11;
    		P12 p12;
    		P13 p13;
    		P14 p14;
    		P15 p15;
    		P16 p16;
    		P17 p17;
    		P18 p18;
    		P19 p19;
    		P20 p20;
    		P21 p21;
    		P22 p22;
    		P23 p23;
    		P24 p24;
    		P25 p25;
    		P26 p26;
    		P27 p27;
    		P28 p28;
    		P29 p29;
    		P30 p30;
    		P31 p31;
    		P32 p32;
    		P33 p33;
    		P34 p34;
    		P35 p35;
    		P36 p36;
    		P37 p37;
    		P38 p38;
    		P39 p39;
    		P40 p40;
    		P41 p41;
    		P42 p42;
    		P43 p43;
    	};

    typedef return_type (interface_type::*type)(p0_type , p1_type , p2_type ,
        p3_type , p4_type , p5_type , p6_type , p7_type , p8_type , p9_type ,
        p10_type , p11_type , p12_type , p13_type , p14_type , p15_type ,
        p16_type , p17_type , p18_type , p19_type , p20_type , p21_type ,
        p22_type , p23_type , p24_type , p25_type , p26_type , p27_type ,
        p28_type , p29_type , p30_type , p31_type , p32_type , p33_type ,
        p34_type , p35_type , p36_type , p37_type , p38_type , p39_type ,
        p40_type , p41_type , p42_type , p43_type );

    static const unsigned int nparams = 44;

    struct handler_t : public OperationHandler
    {
    	type m_operation;

    	handler_t(type operation) : m_operation(operation)
    	{
    	}

    	void do_call(Servant* _this, ServerRequest* request, const char** names)
    	{

    		typename idlyami::skel::skel_type< P0 >::type __v0(*request, *(names++));
    		typename idlyami::skel::skel_type< P1 >::type __v1(*request, *(names++));
    		typename idlyami::skel::skel_type< P2 >::type __v2(*request, *(names++));
    		typename idlyami::skel::skel_type< P3 >::type __v3(*request, *(names++));
    		typename idlyami::skel::skel_type< P4 >::type __v4(*request, *(names++));
    		typename idlyami::skel::skel_type< P5 >::type __v5(*request, *(names++));
    		typename idlyami::skel::skel_type< P6 >::type __v6(*request, *(names++));
    		typename idlyami::skel::skel_type< P7 >::type __v7(*request, *(names++));
    		typename idlyami::skel::skel_type< P8 >::type __v8(*request, *(names++));
    		typename idlyami::skel::skel_type< P9 >::type __v9(*request, *(names++));
      typename idlyami::skel::skel_type< P10 >::type __v10(*request,
          *(names++));
      typename idlyami::skel::skel_type< P11 >::type __v11(*request,
          *(names++));
      typename idlyami::skel::skel_type< P12 >::type __v12(*request,
          *(names++));
      typename idlyami::skel::skel_type< P13 >::type __v13(*request,
          *(names++));
      typename idlyami::skel::skel_type< P14 >::type __v14(*request,
          *(names++));
      typename idlyami::skel::skel_type< P15 >::type __v15(*request,
          *(names++));
      typename idlyami::skel::skel_type< P16 >::type __v16(*request,
          *(names++));
      typename idlyami::skel::skel_type< P17 >::type __v17(*request,
          *(names++));
      typename idlyami::skel::skel_type< P18 >::type __v18(*request,
          *(names++));
      typename idlyami::skel::skel_type< P19 >::type __v19(*request,
          *(names++));
      typename idlyami::skel::skel_type< P20 >::type __v20(*request,
          *(names++));
      typename idlyami::skel::skel_type< P21 >::type __v21(*request,
          *(names++));
      typename idlyami::skel::skel_type< P22 >::type __v22(*request,
          *(names++));
      typename idlyami::skel::skel_type< P23 >::type __v23(*request,
          *(names++));
      typename idlyami::skel::skel_type< P24 >::type __v24(*request,
          *(names++));
      typename idlyami::skel::skel_type< P25 >::type __v25(*request,
          *(names++));
      typename idlyami::skel::skel_type< P26 >::type __v26(*request,
          *(names++));
      typename idlyami::skel::skel_type< P27 >::type __v27(*request,
          *(names++));
      typename idlyami::skel::skel_type< P28 >::type __v28(*request,
          *(names++));
      typename idlyami::skel::skel_type< P29 >::type __v29(*request,
          *(names++));
      typename idlyami::skel::skel_type< P30 >::type __v30(*request,
          *(names++));
      typename idlyami::skel::skel_type< P31 >::type __v31(*request,
          *(names++));
      typename idlyami::skel::skel_type< P32 >::type __v32(*request,
          *(names++));
      typename idlyami::skel::skel_type< P33 >::type __v33(*request,
          *(names++));
      typename idlyami::skel::skel_type< P34 >::type __v34(*request,
          *(names++));
      typename idlyami::skel::skel_type< P35 >::type __v35(*request,
          *(names++));
      typename idlyami::skel::skel_type< P36 >::type __v36(*request,
          *(names++));
      typename idlyami::skel::skel_type< P37 >::type __v37(*request,
          *(names++));
      typename idlyami::skel::skel_type< P38 >::type __v38(*request,
          *(names++));
      typename idlyami::skel::skel_type< P39 >::type __v39(*request,
          *(names++));
      typename idlyami::skel::skel_type< P40 >::type __v40(*request,
          *(names++));
      typename idlyami::skel::skel_type< P41 >::type __v41(*request,
          *(names++));
      typename idlyami::skel::skel_type< P42 >::type __v42(*request,
          *(names++));
      typename idlyami::skel::skel_type< P43 >::type __v43(*request,
          *(names++));
           (dynamic_cast< interface_type* >(_this)->*m_operation)(__v0.val() ,
               __v1.val() , __v2.val() , __v3.val() , __v4.val() , __v5.val() ,
               __v6.val() , __v7.val() , __v8.val() , __v9.val() ,
               __v10.val() , __v11.val() , __v12.val() , __v13.val() ,
               __v14.val() , __v15.val() , __v16.val() , __v17.val() ,
               __v18.val() , __v19.val() , __v20.val() , __v21.val() ,
               __v22.val() , __v23.val() , __v24.val() , __v25.val() ,
               __v26.val() , __v27.val() , __v28.val() , __v29.val() ,
               __v30.val() , __v31.val() , __v32.val() , __v33.val() ,
               __v34.val() , __v35.val() , __v36.val() , __v37.val() ,
               __v38.val() , __v39.val() , __v40.val() , __v41.val() ,
               __v42.val() , __v43.val() );
    	}
	};
};

template< typename Interface, bool IsOneway, typename Return , typename P0 ,
    typename P1 , typename P2 , typename P3 , typename P4 , typename P5 ,
    typename P6 , typename P7 , typename P8 , typename P9 , typename P10 ,
    typename P11 , typename P12 , typename P13 , typename P14 , typename P15 ,
    typename P16 , typename P17 , typename P18 , typename P19 , typename P20 ,
    typename P21 , typename P22 , typename P23 , typename P24 , typename P25 ,
    typename P26 , typename P27 , typename P28 , typename P29 , typename P30 ,
    typename P31 , typename P32 , typename P33 , typename P34 , typename P35 ,
    typename P36 , typename P37 , typename P38 , typename P39 , typename P40 ,
    typename P41 , typename P42 , typename P43 , typename P44  >
struct Operation< Interface, IsOneway, Return , P0 , P1 , P2 , P3 , P4 , P5 ,
    P6 , P7 , P8 , P9 , P10 , P11 , P12 , P13 , P14 , P15 , P16 , P17 , P18 ,
    P19 , P20 , P21 , P22 , P23 , P24 , P25 , P26 , P27 , P28 , P29 , P30 ,
    P31 , P32 , P33 , P34 , P35 , P36 , P37 , P38 , P39 , P40 , P41 , P42 ,
    P43 , P44  , detail::none , detail::none , detail::none , detail::none ,
    detail::none , detail::none  >
{
    typedef Interface interface_type;
    static const bool isOneway = IsOneway;
    typedef typename mapping::return_type< Return >::type return_type;

    typedef typename mapping::arg_type< P0 >::type p0_type;
    typedef typename mapping::arg_type< P1 >::type p1_type;
    typedef typename mapping::arg_type< P2 >::type p2_type;
    typedef typename mapping::arg_type< P3 >::type p3_type;
    typedef typename mapping::arg_type< P4 >::type p4_type;
    typedef typename mapping::arg_type< P5 >::type p5_type;
    typedef typename mapping::arg_type< P6 >::type p6_type;
    typedef typename mapping::arg_type< P7 >::type p7_type;
    typedef typename mapping::arg_type< P8 >::type p8_type;
    typedef typename mapping::arg_type< P9 >::type p9_type;
    typedef typename mapping::arg_type< P10 >::type p10_type;
    typedef typename mapping::arg_type< P11 >::type p11_type;
    typedef typename mapping::arg_type< P12 >::type p12_type;
    typedef typename mapping::arg_type< P13 >::type p13_type;
    typedef typename mapping::arg_type< P14 >::type p14_type;
    typedef typename mapping::arg_type< P15 >::type p15_type;
    typedef typename mapping::arg_type< P16 >::type p16_type;
    typedef typename mapping::arg_type< P17 >::type p17_type;
    typedef typename mapping::arg_type< P18 >::type p18_type;
    typedef typename mapping::arg_type< P19 >::type p19_type;
    typedef typename mapping::arg_type< P20 >::type p20_type;
    typedef typename mapping::arg_type< P21 >::type p21_type;
    typedef typename mapping::arg_type< P22 >::type p22_type;
    typedef typename mapping::arg_type< P23 >::type p23_type;
    typedef typename mapping::arg_type< P24 >::type p24_type;
    typedef typename mapping::arg_type< P25 >::type p25_type;
    typedef typename mapping::arg_type< P26 >::type p26_type;
    typedef typename mapping::arg_type< P27 >::type p27_type;
    typedef typename mapping::arg_type< P28 >::type p28_type;
    typedef typename mapping::arg_type< P29 >::type p29_type;
    typedef typename mapping::arg_type< P30 >::type p30_type;
    typedef typename mapping::arg_type< P31 >::type p31_type;
    typedef typename mapping::arg_type< P32 >::type p32_type;
    typedef typename mapping::arg_type< P33 >::type p33_type;
    typedef typename mapping::arg_type< P34 >::type p34_type;
    typedef typename mapping::arg_type< P35 >::type p35_type;
    typedef typename mapping::arg_type< P36 >::type p36_type;
    typedef typename mapping::arg_type< P37 >::type p37_type;
    typedef typename mapping::arg_type< P38 >::type p38_type;
    typedef typename mapping::arg_type< P39 >::type p39_type;
    typedef typename mapping::arg_type< P40 >::type p40_type;
    typedef typename mapping::arg_type< P41 >::type p41_type;
    typedef typename mapping::arg_type< P42 >::type p42_type;
    typedef typename mapping::arg_type< P43 >::type p43_type;
    typedef typename mapping::arg_type< P44 >::type p44_type;

	struct parameters_t
	{
    		P0 p0;
    		P1 p1;
    		P2 p2;
    		P3 p3;
    		P4 p4;
    		P5 p5;
    		P6 p6;
    		P7 p7;
    		P8 p8;
    		P9 p9;
    		P10 p10;
    		P11 p11;
    		P12 p12;
    		P13 p13;
    		P14 p14;
    		P15 p15;
    		P16 p16;
    		P17 p17;
    		P18 p18;
    		P19 p19;
    		P20 p20;
    		P21 p21;
    		P22 p22;
    		P23 p23;
    		P24 p24;
    		P25 p25;
    		P26 p26;
    		P27 p27;
    		P28 p28;
    		P29 p29;
    		P30 p30;
    		P31 p31;
    		P32 p32;
    		P33 p33;
    		P34 p34;
    		P35 p35;
    		P36 p36;
    		P37 p37;
    		P38 p38;
    		P39 p39;
    		P40 p40;
    		P41 p41;
    		P42 p42;
    		P43 p43;
    		P44 p44;
    	};

    typedef return_type (interface_type::*type)(p0_type , p1_type , p2_type ,
        p3_type , p4_type , p5_type , p6_type , p7_type , p8_type , p9_type ,
        p10_type , p11_type , p12_type , p13_type , p14_type , p15_type ,
        p16_type , p17_type , p18_type , p19_type , p20_type , p21_type ,
        p22_type , p23_type , p24_type , p25_type , p26_type , p27_type ,
        p28_type , p29_type , p30_type , p31_type , p32_type , p33_type ,
        p34_type , p35_type , p36_type , p37_type , p38_type , p39_type ,
        p40_type , p41_type , p42_type , p43_type , p44_type );

    static const unsigned int nparams = 45;

    struct handler_t : public OperationHandler
    {
    	type m_operation;

    	handler_t(type operation) : m_operation(operation)
    	{
    	}

    	void do_call(Servant* _this, ServerRequest* request, const char** names)
    	{

    		typename idlyami::skel::skel_type< P0 >::type __v0(*request, *(names++));
    		typename idlyami::skel::skel_type< P1 >::type __v1(*request, *(names++));
    		typename idlyami::skel::skel_type< P2 >::type __v2(*request, *(names++));
    		typename idlyami::skel::skel_type< P3 >::type __v3(*request, *(names++));
    		typename idlyami::skel::skel_type< P4 >::type __v4(*request, *(names++));
    		typename idlyami::skel::skel_type< P5 >::type __v5(*request, *(names++));
    		typename idlyami::skel::skel_type< P6 >::type __v6(*request, *(names++));
    		typename idlyami::skel::skel_type< P7 >::type __v7(*request, *(names++));
    		typename idlyami::skel::skel_type< P8 >::type __v8(*request, *(names++));
    		typename idlyami::skel::skel_type< P9 >::type __v9(*request, *(names++));
      typename idlyami::skel::skel_type< P10 >::type __v10(*request,
          *(names++));
      typename idlyami::skel::skel_type< P11 >::type __v11(*request,
          *(names++));
      typename idlyami::skel::skel_type< P12 >::type __v12(*request,
          *(names++));
      typename idlyami::skel::skel_type< P13 >::type __v13(*request,
          *(names++));
      typename idlyami::skel::skel_type< P14 >::type __v14(*request,
          *(names++));
      typename idlyami::skel::skel_type< P15 >::type __v15(*request,
          *(names++));
      typename idlyami::skel::skel_type< P16 >::type __v16(*request,
          *(names++));
      typename idlyami::skel::skel_type< P17 >::type __v17(*request,
          *(names++));
      typename idlyami::skel::skel_type< P18 >::type __v18(*request,
          *(names++));
      typename idlyami::skel::skel_type< P19 >::type __v19(*request,
          *(names++));
      typename idlyami::skel::skel_type< P20 >::type __v20(*request,
          *(names++));
      typename idlyami::skel::skel_type< P21 >::type __v21(*request,
          *(names++));
      typename idlyami::skel::skel_type< P22 >::type __v22(*request,
          *(names++));
      typename idlyami::skel::skel_type< P23 >::type __v23(*request,
          *(names++));
      typename idlyami::skel::skel_type< P24 >::type __v24(*request,
          *(names++));
      typename idlyami::skel::skel_type< P25 >::type __v25(*request,
          *(names++));
      typename idlyami::skel::skel_type< P26 >::type __v26(*request,
          *(names++));
      typename idlyami::skel::skel_type< P27 >::type __v27(*request,
          *(names++));
      typename idlyami::skel::skel_type< P28 >::type __v28(*request,
          *(names++));
      typename idlyami::skel::skel_type< P29 >::type __v29(*request,
          *(names++));
      typename idlyami::skel::skel_type< P30 >::type __v30(*request,
          *(names++));
      typename idlyami::skel::skel_type< P31 >::type __v31(*request,
          *(names++));
      typename idlyami::skel::skel_type< P32 >::type __v32(*request,
          *(names++));
      typename idlyami::skel::skel_type< P33 >::type __v33(*request,
          *(names++));
      typename idlyami::skel::skel_type< P34 >::type __v34(*request,
          *(names++));
      typename idlyami::skel::skel_type< P35 >::type __v35(*request,
          *(names++));
      typename idlyami::skel::skel_type< P36 >::type __v36(*request,
          *(names++));
      typename idlyami::skel::skel_type< P37 >::type __v37(*request,
          *(names++));
      typename idlyami::skel::skel_type< P38 >::type __v38(*request,
          *(names++));
      typename idlyami::skel::skel_type< P39 >::type __v39(*request,
          *(names++));
      typename idlyami::skel::skel_type< P40 >::type __v40(*request,
          *(names++));
      typename idlyami::skel::skel_type< P41 >::type __v41(*request,
          *(names++));
      typename idlyami::skel::skel_type< P42 >::type __v42(*request,
          *(names++));
      typename idlyami::skel::skel_type< P43 >::type __v43(*request,
          *(names++));
      typename idlyami::skel::skel_type< P44 >::type __v44(*request,
          *(names++));
           (dynamic_cast< interface_type* >(_this)->*m_operation)(__v0.val() ,
               __v1.val() , __v2.val() , __v3.val() , __v4.val() , __v5.val() ,
               __v6.val() , __v7.val() , __v8.val() , __v9.val() ,
               __v10.val() , __v11.val() , __v12.val() , __v13.val() ,
               __v14.val() , __v15.val() , __v16.val() , __v17.val() ,
               __v18.val() , __v19.val() , __v20.val() , __v21.val() ,
               __v22.val() , __v23.val() , __v24.val() , __v25.val() ,
               __v26.val() , __v27.val() , __v28.val() , __v29.val() ,
               __v30.val() , __v31.val() , __v32.val() , __v33.val() ,
               __v34.val() , __v35.val() , __v36.val() , __v37.val() ,
               __v38.val() , __v39.val() , __v40.val() , __v41.val() ,
               __v42.val() , __v43.val() , __v44.val() );
    	}
	};
};

template< typename Interface, bool IsOneway, typename Return , typename P0 ,
    typename P1 , typename P2 , typename P3 , typename P4 , typename P5 ,
    typename P6 , typename P7 , typename P8 , typename P9 , typename P10 ,
    typename P11 , typename P12 , typename P13 , typename P14 , typename P15 ,
    typename P16 , typename P17 , typename P18 , typename P19 , typename P20 ,
    typename P21 , typename P22 , typename P23 , typename P24 , typename P25 ,
    typename P26 , typename P27 , typename P28 , typename P29 , typename P30 ,
    typename P31 , typename P32 , typename P33 , typename P34 , typename P35 ,
    typename P36 , typename P37 , typename P38 , typename P39 , typename P40 ,
    typename P41 , typename P42 , typename P43 , typename P44 , typename P45  >
struct Operation< Interface, IsOneway, Return , P0 , P1 , P2 , P3 , P4 , P5 ,
    P6 , P7 , P8 , P9 , P10 , P11 , P12 , P13 , P14 , P15 , P16 , P17 , P18 ,
    P19 , P20 , P21 , P22 , P23 , P24 , P25 , P26 , P27 , P28 , P29 , P30 ,
    P31 , P32 , P33 , P34 , P35 , P36 , P37 , P38 , P39 , P40 , P41 , P42 ,
    P43 , P44 , P45  , detail::none , detail::none , detail::none ,
    detail::none , detail::none  >
{
    typedef Interface interface_type;
    static const bool isOneway = IsOneway;
    typedef typename mapping::return_type< Return >::type return_type;

    typedef typename mapping::arg_type< P0 >::type p0_type;
    typedef typename mapping::arg_type< P1 >::type p1_type;
    typedef typename mapping::arg_type< P2 >::type p2_type;
    typedef typename mapping::arg_type< P3 >::type p3_type;
    typedef typename mapping::arg_type< P4 >::type p4_type;
    typedef typename mapping::arg_type< P5 >::type p5_type;
    typedef typename mapping::arg_type< P6 >::type p6_type;
    typedef typename mapping::arg_type< P7 >::type p7_type;
    typedef typename mapping::arg_type< P8 >::type p8_type;
    typedef typename mapping::arg_type< P9 >::type p9_type;
    typedef typename mapping::arg_type< P10 >::type p10_type;
    typedef typename mapping::arg_type< P11 >::type p11_type;
    typedef typename mapping::arg_type< P12 >::type p12_type;
    typedef typename mapping::arg_type< P13 >::type p13_type;
    typedef typename mapping::arg_type< P14 >::type p14_type;
    typedef typename mapping::arg_type< P15 >::type p15_type;
    typedef typename mapping::arg_type< P16 >::type p16_type;
    typedef typename mapping::arg_type< P17 >::type p17_type;
    typedef typename mapping::arg_type< P18 >::type p18_type;
    typedef typename mapping::arg_type< P19 >::type p19_type;
    typedef typename mapping::arg_type< P20 >::type p20_type;
    typedef typename mapping::arg_type< P21 >::type p21_type;
    typedef typename mapping::arg_type< P22 >::type p22_type;
    typedef typename mapping::arg_type< P23 >::type p23_type;
    typedef typename mapping::arg_type< P24 >::type p24_type;
    typedef typename mapping::arg_type< P25 >::type p25_type;
    typedef typename mapping::arg_type< P26 >::type p26_type;
    typedef typename mapping::arg_type< P27 >::type p27_type;
    typedef typename mapping::arg_type< P28 >::type p28_type;
    typedef typename mapping::arg_type< P29 >::type p29_type;
    typedef typename mapping::arg_type< P30 >::type p30_type;
    typedef typename mapping::arg_type< P31 >::type p31_type;
    typedef typename mapping::arg_type< P32 >::type p32_type;
    typedef typename mapping::arg_type< P33 >::type p33_type;
    typedef typename mapping::arg_type< P34 >::type p34_type;
    typedef typename mapping::arg_type< P35 >::type p35_type;
    typedef typename mapping::arg_type< P36 >::type p36_type;
    typedef typename mapping::arg_type< P37 >::type p37_type;
    typedef typename mapping::arg_type< P38 >::type p38_type;
    typedef typename mapping::arg_type< P39 >::type p39_type;
    typedef typename mapping::arg_type< P40 >::type p40_type;
    typedef typename mapping::arg_type< P41 >::type p41_type;
    typedef typename mapping::arg_type< P42 >::type p42_type;
    typedef typename mapping::arg_type< P43 >::type p43_type;
    typedef typename mapping::arg_type< P44 >::type p44_type;
    typedef typename mapping::arg_type< P45 >::type p45_type;

	struct parameters_t
	{
    		P0 p0;
    		P1 p1;
    		P2 p2;
    		P3 p3;
    		P4 p4;
    		P5 p5;
    		P6 p6;
    		P7 p7;
    		P8 p8;
    		P9 p9;
    		P10 p10;
    		P11 p11;
    		P12 p12;
    		P13 p13;
    		P14 p14;
    		P15 p15;
    		P16 p16;
    		P17 p17;
    		P18 p18;
    		P19 p19;
    		P20 p20;
    		P21 p21;
    		P22 p22;
    		P23 p23;
    		P24 p24;
    		P25 p25;
    		P26 p26;
    		P27 p27;
    		P28 p28;
    		P29 p29;
    		P30 p30;
    		P31 p31;
    		P32 p32;
    		P33 p33;
    		P34 p34;
    		P35 p35;
    		P36 p36;
    		P37 p37;
    		P38 p38;
    		P39 p39;
    		P40 p40;
    		P41 p41;
    		P42 p42;
    		P43 p43;
    		P44 p44;
    		P45 p45;
    	};

    typedef return_type (interface_type::*type)(p0_type , p1_type , p2_type ,
        p3_type , p4_type , p5_type , p6_type , p7_type , p8_type , p9_type ,
        p10_type , p11_type , p12_type , p13_type , p14_type , p15_type ,
        p16_type , p17_type , p18_type , p19_type , p20_type , p21_type ,
        p22_type , p23_type , p24_type , p25_type , p26_type , p27_type ,
        p28_type , p29_type , p30_type , p31_type , p32_type , p33_type ,
        p34_type , p35_type , p36_type , p37_type , p38_type , p39_type ,
        p40_type , p41_type , p42_type , p43_type , p44_type , p45_type );

    static const unsigned int nparams = 46;

    struct handler_t : public OperationHandler
    {
    	type m_operation;

    	handler_t(type operation) : m_operation(operation)
    	{
    	}

    	void do_call(Servant* _this, ServerRequest* request, const char** names)
    	{

    		typename idlyami::skel::skel_type< P0 >::type __v0(*request, *(names++));
    		typename idlyami::skel::skel_type< P1 >::type __v1(*request, *(names++));
    		typename idlyami::skel::skel_type< P2 >::type __v2(*request, *(names++));
    		typename idlyami::skel::skel_type< P3 >::type __v3(*request, *(names++));
    		typename idlyami::skel::skel_type< P4 >::type __v4(*request, *(names++));
    		typename idlyami::skel::skel_type< P5 >::type __v5(*request, *(names++));
    		typename idlyami::skel::skel_type< P6 >::type __v6(*request, *(names++));
    		typename idlyami::skel::skel_type< P7 >::type __v7(*request, *(names++));
    		typename idlyami::skel::skel_type< P8 >::type __v8(*request, *(names++));
    		typename idlyami::skel::skel_type< P9 >::type __v9(*request, *(names++));
      typename idlyami::skel::skel_type< P10 >::type __v10(*request,
          *(names++));
      typename idlyami::skel::skel_type< P11 >::type __v11(*request,
          *(names++));
      typename idlyami::skel::skel_type< P12 >::type __v12(*request,
          *(names++));
      typename idlyami::skel::skel_type< P13 >::type __v13(*request,
          *(names++));
      typename idlyami::skel::skel_type< P14 >::type __v14(*request,
          *(names++));
      typename idlyami::skel::skel_type< P15 >::type __v15(*request,
          *(names++));
      typename idlyami::skel::skel_type< P16 >::type __v16(*request,
          *(names++));
      typename idlyami::skel::skel_type< P17 >::type __v17(*request,
          *(names++));
      typename idlyami::skel::skel_type< P18 >::type __v18(*request,
          *(names++));
      typename idlyami::skel::skel_type< P19 >::type __v19(*request,
          *(names++));
      typename idlyami::skel::skel_type< P20 >::type __v20(*request,
          *(names++));
      typename idlyami::skel::skel_type< P21 >::type __v21(*request,
          *(names++));
      typename idlyami::skel::skel_type< P22 >::type __v22(*request,
          *(names++));
      typename idlyami::skel::skel_type< P23 >::type __v23(*request,
          *(names++));
      typename idlyami::skel::skel_type< P24 >::type __v24(*request,
          *(names++));
      typename idlyami::skel::skel_type< P25 >::type __v25(*request,
          *(names++));
      typename idlyami::skel::skel_type< P26 >::type __v26(*request,
          *(names++));
      typename idlyami::skel::skel_type< P27 >::type __v27(*request,
          *(names++));
      typename idlyami::skel::skel_type< P28 >::type __v28(*request,
          *(names++));
      typename idlyami::skel::skel_type< P29 >::type __v29(*request,
          *(names++));
      typename idlyami::skel::skel_type< P30 >::type __v30(*request,
          *(names++));
      typename idlyami::skel::skel_type< P31 >::type __v31(*request,
          *(names++));
      typename idlyami::skel::skel_type< P32 >::type __v32(*request,
          *(names++));
      typename idlyami::skel::skel_type< P33 >::type __v33(*request,
          *(names++));
      typename idlyami::skel::skel_type< P34 >::type __v34(*request,
          *(names++));
      typename idlyami::skel::skel_type< P35 >::type __v35(*request,
          *(names++));
      typename idlyami::skel::skel_type< P36 >::type __v36(*request,
          *(names++));
      typename idlyami::skel::skel_type< P37 >::type __v37(*request,
          *(names++));
      typename idlyami::skel::skel_type< P38 >::type __v38(*request,
          *(names++));
      typename idlyami::skel::skel_type< P39 >::type __v39(*request,
          *(names++));
      typename idlyami::skel::skel_type< P40 >::type __v40(*request,
          *(names++));
      typename idlyami::skel::skel_type< P41 >::type __v41(*request,
          *(names++));
      typename idlyami::skel::skel_type< P42 >::type __v42(*request,
          *(names++));
      typename idlyami::skel::skel_type< P43 >::type __v43(*request,
          *(names++));
      typename idlyami::skel::skel_type< P44 >::type __v44(*request,
          *(names++));
      typename idlyami::skel::skel_type< P45 >::type __v45(*request,
          *(names++));
           (dynamic_cast< interface_type* >(_this)->*m_operation)(__v0.val() ,
               __v1.val() , __v2.val() , __v3.val() , __v4.val() , __v5.val() ,
               __v6.val() , __v7.val() , __v8.val() , __v9.val() ,
               __v10.val() , __v11.val() , __v12.val() , __v13.val() ,
               __v14.val() , __v15.val() , __v16.val() , __v17.val() ,
               __v18.val() , __v19.val() , __v20.val() , __v21.val() ,
               __v22.val() , __v23.val() , __v24.val() , __v25.val() ,
               __v26.val() , __v27.val() , __v28.val() , __v29.val() ,
               __v30.val() , __v31.val() , __v32.val() , __v33.val() ,
               __v34.val() , __v35.val() , __v36.val() , __v37.val() ,
               __v38.val() , __v39.val() , __v40.val() , __v41.val() ,
               __v42.val() , __v43.val() , __v44.val() , __v45.val() );
    	}
	};
};

template< typename Interface, bool IsOneway, typename Return , typename P0 ,
    typename P1 , typename P2 , typename P3 , typename P4 , typename P5 ,
    typename P6 , typename P7 , typename P8 , typename P9 , typename P10 ,
    typename P11 , typename P12 , typename P13 , typename P14 , typename P15 ,
    typename P16 , typename P17 , typename P18 , typename P19 , typename P20 ,
    typename P21 , typename P22 , typename P23 , typename P24 , typename P25 ,
    typename P26 , typename P27 , typename P28 , typename P29 , typename P30 ,
    typename P31 , typename P32 , typename P33 , typename P34 , typename P35 ,
    typename P36 , typename P37 , typename P38 , typename P39 , typename P40 ,
    typename P41 , typename P42 , typename P43 , typename P44 , typename P45 ,
    typename P46  >
struct Operation< Interface, IsOneway, Return , P0 , P1 , P2 , P3 , P4 , P5 ,
    P6 , P7 , P8 , P9 , P10 , P11 , P12 , P13 , P14 , P15 , P16 , P17 , P18 ,
    P19 , P20 , P21 , P22 , P23 , P24 , P25 , P26 , P27 , P28 , P29 , P30 ,
    P31 , P32 , P33 , P34 , P35 , P36 , P37 , P38 , P39 , P40 , P41 , P42 ,
    P43 , P44 , P45 , P46  , detail::none , detail::none , detail::none ,
    detail::none  >
{
    typedef Interface interface_type;
    static const bool isOneway = IsOneway;
    typedef typename mapping::return_type< Return >::type return_type;

    typedef typename mapping::arg_type< P0 >::type p0_type;
    typedef typename mapping::arg_type< P1 >::type p1_type;
    typedef typename mapping::arg_type< P2 >::type p2_type;
    typedef typename mapping::arg_type< P3 >::type p3_type;
    typedef typename mapping::arg_type< P4 >::type p4_type;
    typedef typename mapping::arg_type< P5 >::type p5_type;
    typedef typename mapping::arg_type< P6 >::type p6_type;
    typedef typename mapping::arg_type< P7 >::type p7_type;
    typedef typename mapping::arg_type< P8 >::type p8_type;
    typedef typename mapping::arg_type< P9 >::type p9_type;
    typedef typename mapping::arg_type< P10 >::type p10_type;
    typedef typename mapping::arg_type< P11 >::type p11_type;
    typedef typename mapping::arg_type< P12 >::type p12_type;
    typedef typename mapping::arg_type< P13 >::type p13_type;
    typedef typename mapping::arg_type< P14 >::type p14_type;
    typedef typename mapping::arg_type< P15 >::type p15_type;
    typedef typename mapping::arg_type< P16 >::type p16_type;
    typedef typename mapping::arg_type< P17 >::type p17_type;
    typedef typename mapping::arg_type< P18 >::type p18_type;
    typedef typename mapping::arg_type< P19 >::type p19_type;
    typedef typename mapping::arg_type< P20 >::type p20_type;
    typedef typename mapping::arg_type< P21 >::type p21_type;
    typedef typename mapping::arg_type< P22 >::type p22_type;
    typedef typename mapping::arg_type< P23 >::type p23_type;
    typedef typename mapping::arg_type< P24 >::type p24_type;
    typedef typename mapping::arg_type< P25 >::type p25_type;
    typedef typename mapping::arg_type< P26 >::type p26_type;
    typedef typename mapping::arg_type< P27 >::type p27_type;
    typedef typename mapping::arg_type< P28 >::type p28_type;
    typedef typename mapping::arg_type< P29 >::type p29_type;
    typedef typename mapping::arg_type< P30 >::type p30_type;
    typedef typename mapping::arg_type< P31 >::type p31_type;
    typedef typename mapping::arg_type< P32 >::type p32_type;
    typedef typename mapping::arg_type< P33 >::type p33_type;
    typedef typename mapping::arg_type< P34 >::type p34_type;
    typedef typename mapping::arg_type< P35 >::type p35_type;
    typedef typename mapping::arg_type< P36 >::type p36_type;
    typedef typename mapping::arg_type< P37 >::type p37_type;
    typedef typename mapping::arg_type< P38 >::type p38_type;
    typedef typename mapping::arg_type< P39 >::type p39_type;
    typedef typename mapping::arg_type< P40 >::type p40_type;
    typedef typename mapping::arg_type< P41 >::type p41_type;
    typedef typename mapping::arg_type< P42 >::type p42_type;
    typedef typename mapping::arg_type< P43 >::type p43_type;
    typedef typename mapping::arg_type< P44 >::type p44_type;
    typedef typename mapping::arg_type< P45 >::type p45_type;
    typedef typename mapping::arg_type< P46 >::type p46_type;

	struct parameters_t
	{
    		P0 p0;
    		P1 p1;
    		P2 p2;
    		P3 p3;
    		P4 p4;
    		P5 p5;
    		P6 p6;
    		P7 p7;
    		P8 p8;
    		P9 p9;
    		P10 p10;
    		P11 p11;
    		P12 p12;
    		P13 p13;
    		P14 p14;
    		P15 p15;
    		P16 p16;
    		P17 p17;
    		P18 p18;
    		P19 p19;
    		P20 p20;
    		P21 p21;
    		P22 p22;
    		P23 p23;
    		P24 p24;
    		P25 p25;
    		P26 p26;
    		P27 p27;
    		P28 p28;
    		P29 p29;
    		P30 p30;
    		P31 p31;
    		P32 p32;
    		P33 p33;
    		P34 p34;
    		P35 p35;
    		P36 p36;
    		P37 p37;
    		P38 p38;
    		P39 p39;
    		P40 p40;
    		P41 p41;
    		P42 p42;
    		P43 p43;
    		P44 p44;
    		P45 p45;
    		P46 p46;
    	};

    typedef return_type (interface_type::*type)(p0_type , p1_type , p2_type ,
        p3_type , p4_type , p5_type , p6_type , p7_type , p8_type , p9_type ,
        p10_type , p11_type , p12_type , p13_type , p14_type , p15_type ,
        p16_type , p17_type , p18_type , p19_type , p20_type , p21_type ,
        p22_type , p23_type , p24_type , p25_type , p26_type , p27_type ,
        p28_type , p29_type , p30_type , p31_type , p32_type , p33_type ,
        p34_type , p35_type , p36_type , p37_type , p38_type , p39_type ,
        p40_type , p41_type , p42_type , p43_type , p44_type , p45_type ,
        p46_type );

    static const unsigned int nparams = 47;

    struct handler_t : public OperationHandler
    {
    	type m_operation;

    	handler_t(type operation) : m_operation(operation)
    	{
    	}

    	void do_call(Servant* _this, ServerRequest* request, const char** names)
    	{

    		typename idlyami::skel::skel_type< P0 >::type __v0(*request, *(names++));
    		typename idlyami::skel::skel_type< P1 >::type __v1(*request, *(names++));
    		typename idlyami::skel::skel_type< P2 >::type __v2(*request, *(names++));
    		typename idlyami::skel::skel_type< P3 >::type __v3(*request, *(names++));
    		typename idlyami::skel::skel_type< P4 >::type __v4(*request, *(names++));
    		typename idlyami::skel::skel_type< P5 >::type __v5(*request, *(names++));
    		typename idlyami::skel::skel_type< P6 >::type __v6(*request, *(names++));
    		typename idlyami::skel::skel_type< P7 >::type __v7(*request, *(names++));
    		typename idlyami::skel::skel_type< P8 >::type __v8(*request, *(names++));
    		typename idlyami::skel::skel_type< P9 >::type __v9(*request, *(names++));
      typename idlyami::skel::skel_type< P10 >::type __v10(*request,
          *(names++));
      typename idlyami::skel::skel_type< P11 >::type __v11(*request,
          *(names++));
      typename idlyami::skel::skel_type< P12 >::type __v12(*request,
          *(names++));
      typename idlyami::skel::skel_type< P13 >::type __v13(*request,
          *(names++));
      typename idlyami::skel::skel_type< P14 >::type __v14(*request,
          *(names++));
      typename idlyami::skel::skel_type< P15 >::type __v15(*request,
          *(names++));
      typename idlyami::skel::skel_type< P16 >::type __v16(*request,
          *(names++));
      typename idlyami::skel::skel_type< P17 >::type __v17(*request,
          *(names++));
      typename idlyami::skel::skel_type< P18 >::type __v18(*request,
          *(names++));
      typename idlyami::skel::skel_type< P19 >::type __v19(*request,
          *(names++));
      typename idlyami::skel::skel_type< P20 >::type __v20(*request,
          *(names++));
      typename idlyami::skel::skel_type< P21 >::type __v21(*request,
          *(names++));
      typename idlyami::skel::skel_type< P22 >::type __v22(*request,
          *(names++));
      typename idlyami::skel::skel_type< P23 >::type __v23(*request,
          *(names++));
      typename idlyami::skel::skel_type< P24 >::type __v24(*request,
          *(names++));
      typename idlyami::skel::skel_type< P25 >::type __v25(*request,
          *(names++));
      typename idlyami::skel::skel_type< P26 >::type __v26(*request,
          *(names++));
      typename idlyami::skel::skel_type< P27 >::type __v27(*request,
          *(names++));
      typename idlyami::skel::skel_type< P28 >::type __v28(*request,
          *(names++));
      typename idlyami::skel::skel_type< P29 >::type __v29(*request,
          *(names++));
      typename idlyami::skel::skel_type< P30 >::type __v30(*request,
          *(names++));
      typename idlyami::skel::skel_type< P31 >::type __v31(*request,
          *(names++));
      typename idlyami::skel::skel_type< P32 >::type __v32(*request,
          *(names++));
      typename idlyami::skel::skel_type< P33 >::type __v33(*request,
          *(names++));
      typename idlyami::skel::skel_type< P34 >::type __v34(*request,
          *(names++));
      typename idlyami::skel::skel_type< P35 >::type __v35(*request,
          *(names++));
      typename idlyami::skel::skel_type< P36 >::type __v36(*request,
          *(names++));
      typename idlyami::skel::skel_type< P37 >::type __v37(*request,
          *(names++));
      typename idlyami::skel::skel_type< P38 >::type __v38(*request,
          *(names++));
      typename idlyami::skel::skel_type< P39 >::type __v39(*request,
          *(names++));
      typename idlyami::skel::skel_type< P40 >::type __v40(*request,
          *(names++));
      typename idlyami::skel::skel_type< P41 >::type __v41(*request,
          *(names++));
      typename idlyami::skel::skel_type< P42 >::type __v42(*request,
          *(names++));
      typename idlyami::skel::skel_type< P43 >::type __v43(*request,
          *(names++));
      typename idlyami::skel::skel_type< P44 >::type __v44(*request,
          *(names++));
      typename idlyami::skel::skel_type< P45 >::type __v45(*request,
          *(names++));
      typename idlyami::skel::skel_type< P46 >::type __v46(*request,
          *(names++));
           (dynamic_cast< interface_type* >(_this)->*m_operation)(__v0.val() ,
               __v1.val() , __v2.val() , __v3.val() , __v4.val() , __v5.val() ,
               __v6.val() , __v7.val() , __v8.val() , __v9.val() ,
               __v10.val() , __v11.val() , __v12.val() , __v13.val() ,
               __v14.val() , __v15.val() , __v16.val() , __v17.val() ,
               __v18.val() , __v19.val() , __v20.val() , __v21.val() ,
               __v22.val() , __v23.val() , __v24.val() , __v25.val() ,
               __v26.val() , __v27.val() , __v28.val() , __v29.val() ,
               __v30.val() , __v31.val() , __v32.val() , __v33.val() ,
               __v34.val() , __v35.val() , __v36.val() , __v37.val() ,
               __v38.val() , __v39.val() , __v40.val() , __v41.val() ,
               __v42.val() , __v43.val() , __v44.val() , __v45.val() ,
               __v46.val() );
    	}
	};
};

template< typename Interface, bool IsOneway, typename Return , typename P0 ,
    typename P1 , typename P2 , typename P3 , typename P4 , typename P5 ,
    typename P6 , typename P7 , typename P8 , typename P9 , typename P10 ,
    typename P11 , typename P12 , typename P13 , typename P14 , typename P15 ,
    typename P16 , typename P17 , typename P18 , typename P19 , typename P20 ,
    typename P21 , typename P22 , typename P23 , typename P24 , typename P25 ,
    typename P26 , typename P27 , typename P28 , typename P29 , typename P30 ,
    typename P31 , typename P32 , typename P33 , typename P34 , typename P35 ,
    typename P36 , typename P37 , typename P38 , typename P39 , typename P40 ,
    typename P41 , typename P42 , typename P43 , typename P44 , typename P45 ,
    typename P46 , typename P47  >
struct Operation< Interface, IsOneway, Return , P0 , P1 , P2 , P3 , P4 , P5 ,
    P6 , P7 , P8 , P9 , P10 , P11 , P12 , P13 , P14 , P15 , P16 , P17 , P18 ,
    P19 , P20 , P21 , P22 , P23 , P24 , P25 , P26 , P27 , P28 , P29 , P30 ,
    P31 , P32 , P33 , P34 , P35 , P36 , P37 , P38 , P39 , P40 , P41 , P42 ,
    P43 , P44 , P45 , P46 , P47  , detail::none , detail::none ,
    detail::none  >
{
    typedef Interface interface_type;
    static const bool isOneway = IsOneway;
    typedef typename mapping::return_type< Return >::type return_type;

    typedef typename mapping::arg_type< P0 >::type p0_type;
    typedef typename mapping::arg_type< P1 >::type p1_type;
    typedef typename mapping::arg_type< P2 >::type p2_type;
    typedef typename mapping::arg_type< P3 >::type p3_type;
    typedef typename mapping::arg_type< P4 >::type p4_type;
    typedef typename mapping::arg_type< P5 >::type p5_type;
    typedef typename mapping::arg_type< P6 >::type p6_type;
    typedef typename mapping::arg_type< P7 >::type p7_type;
    typedef typename mapping::arg_type< P8 >::type p8_type;
    typedef typename mapping::arg_type< P9 >::type p9_type;
    typedef typename mapping::arg_type< P10 >::type p10_type;
    typedef typename mapping::arg_type< P11 >::type p11_type;
    typedef typename mapping::arg_type< P12 >::type p12_type;
    typedef typename mapping::arg_type< P13 >::type p13_type;
    typedef typename mapping::arg_type< P14 >::type p14_type;
    typedef typename mapping::arg_type< P15 >::type p15_type;
    typedef typename mapping::arg_type< P16 >::type p16_type;
    typedef typename mapping::arg_type< P17 >::type p17_type;
    typedef typename mapping::arg_type< P18 >::type p18_type;
    typedef typename mapping::arg_type< P19 >::type p19_type;
    typedef typename mapping::arg_type< P20 >::type p20_type;
    typedef typename mapping::arg_type< P21 >::type p21_type;
    typedef typename mapping::arg_type< P22 >::type p22_type;
    typedef typename mapping::arg_type< P23 >::type p23_type;
    typedef typename mapping::arg_type< P24 >::type p24_type;
    typedef typename mapping::arg_type< P25 >::type p25_type;
    typedef typename mapping::arg_type< P26 >::type p26_type;
    typedef typename mapping::arg_type< P27 >::type p27_type;
    typedef typename mapping::arg_type< P28 >::type p28_type;
    typedef typename mapping::arg_type< P29 >::type p29_type;
    typedef typename mapping::arg_type< P30 >::type p30_type;
    typedef typename mapping::arg_type< P31 >::type p31_type;
    typedef typename mapping::arg_type< P32 >::type p32_type;
    typedef typename mapping::arg_type< P33 >::type p33_type;
    typedef typename mapping::arg_type< P34 >::type p34_type;
    typedef typename mapping::arg_type< P35 >::type p35_type;
    typedef typename mapping::arg_type< P36 >::type p36_type;
    typedef typename mapping::arg_type< P37 >::type p37_type;
    typedef typename mapping::arg_type< P38 >::type p38_type;
    typedef typename mapping::arg_type< P39 >::type p39_type;
    typedef typename mapping::arg_type< P40 >::type p40_type;
    typedef typename mapping::arg_type< P41 >::type p41_type;
    typedef typename mapping::arg_type< P42 >::type p42_type;
    typedef typename mapping::arg_type< P43 >::type p43_type;
    typedef typename mapping::arg_type< P44 >::type p44_type;
    typedef typename mapping::arg_type< P45 >::type p45_type;
    typedef typename mapping::arg_type< P46 >::type p46_type;
    typedef typename mapping::arg_type< P47 >::type p47_type;

	struct parameters_t
	{
    		P0 p0;
    		P1 p1;
    		P2 p2;
    		P3 p3;
    		P4 p4;
    		P5 p5;
    		P6 p6;
    		P7 p7;
    		P8 p8;
    		P9 p9;
    		P10 p10;
    		P11 p11;
    		P12 p12;
    		P13 p13;
    		P14 p14;
    		P15 p15;
    		P16 p16;
    		P17 p17;
    		P18 p18;
    		P19 p19;
    		P20 p20;
    		P21 p21;
    		P22 p22;
    		P23 p23;
    		P24 p24;
    		P25 p25;
    		P26 p26;
    		P27 p27;
    		P28 p28;
    		P29 p29;
    		P30 p30;
    		P31 p31;
    		P32 p32;
    		P33 p33;
    		P34 p34;
    		P35 p35;
    		P36 p36;
    		P37 p37;
    		P38 p38;
    		P39 p39;
    		P40 p40;
    		P41 p41;
    		P42 p42;
    		P43 p43;
    		P44 p44;
    		P45 p45;
    		P46 p46;
    		P47 p47;
    	};

    typedef return_type (interface_type::*type)(p0_type , p1_type , p2_type ,
        p3_type , p4_type , p5_type , p6_type , p7_type , p8_type , p9_type ,
        p10_type , p11_type , p12_type , p13_type , p14_type , p15_type ,
        p16_type , p17_type , p18_type , p19_type , p20_type , p21_type ,
        p22_type , p23_type , p24_type , p25_type , p26_type , p27_type ,
        p28_type , p29_type , p30_type , p31_type , p32_type , p33_type ,
        p34_type , p35_type , p36_type , p37_type , p38_type , p39_type ,
        p40_type , p41_type , p42_type , p43_type , p44_type , p45_type ,
        p46_type , p47_type );

    static const unsigned int nparams = 48;

    struct handler_t : public OperationHandler
    {
    	type m_operation;

    	handler_t(type operation) : m_operation(operation)
    	{
    	}

    	void do_call(Servant* _this, ServerRequest* request, const char** names)
    	{

    		typename idlyami::skel::skel_type< P0 >::type __v0(*request, *(names++));
    		typename idlyami::skel::skel_type< P1 >::type __v1(*request, *(names++));
    		typename idlyami::skel::skel_type< P2 >::type __v2(*request, *(names++));
    		typename idlyami::skel::skel_type< P3 >::type __v3(*request, *(names++));
    		typename idlyami::skel::skel_type< P4 >::type __v4(*request, *(names++));
    		typename idlyami::skel::skel_type< P5 >::type __v5(*request, *(names++));
    		typename idlyami::skel::skel_type< P6 >::type __v6(*request, *(names++));
    		typename idlyami::skel::skel_type< P7 >::type __v7(*request, *(names++));
    		typename idlyami::skel::skel_type< P8 >::type __v8(*request, *(names++));
    		typename idlyami::skel::skel_type< P9 >::type __v9(*request, *(names++));
      typename idlyami::skel::skel_type< P10 >::type __v10(*request,
          *(names++));
      typename idlyami::skel::skel_type< P11 >::type __v11(*request,
          *(names++));
      typename idlyami::skel::skel_type< P12 >::type __v12(*request,
          *(names++));
      typename idlyami::skel::skel_type< P13 >::type __v13(*request,
          *(names++));
      typename idlyami::skel::skel_type< P14 >::type __v14(*request,
          *(names++));
      typename idlyami::skel::skel_type< P15 >::type __v15(*request,
          *(names++));
      typename idlyami::skel::skel_type< P16 >::type __v16(*request,
          *(names++));
      typename idlyami::skel::skel_type< P17 >::type __v17(*request,
          *(names++));
      typename idlyami::skel::skel_type< P18 >::type __v18(*request,
          *(names++));
      typename idlyami::skel::skel_type< P19 >::type __v19(*request,
          *(names++));
      typename idlyami::skel::skel_type< P20 >::type __v20(*request,
          *(names++));
      typename idlyami::skel::skel_type< P21 >::type __v21(*request,
          *(names++));
      typename idlyami::skel::skel_type< P22 >::type __v22(*request,
          *(names++));
      typename idlyami::skel::skel_type< P23 >::type __v23(*request,
          *(names++));
      typename idlyami::skel::skel_type< P24 >::type __v24(*request,
          *(names++));
      typename idlyami::skel::skel_type< P25 >::type __v25(*request,
          *(names++));
      typename idlyami::skel::skel_type< P26 >::type __v26(*request,
          *(names++));
      typename idlyami::skel::skel_type< P27 >::type __v27(*request,
          *(names++));
      typename idlyami::skel::skel_type< P28 >::type __v28(*request,
          *(names++));
      typename idlyami::skel::skel_type< P29 >::type __v29(*request,
          *(names++));
      typename idlyami::skel::skel_type< P30 >::type __v30(*request,
          *(names++));
      typename idlyami::skel::skel_type< P31 >::type __v31(*request,
          *(names++));
      typename idlyami::skel::skel_type< P32 >::type __v32(*request,
          *(names++));
      typename idlyami::skel::skel_type< P33 >::type __v33(*request,
          *(names++));
      typename idlyami::skel::skel_type< P34 >::type __v34(*request,
          *(names++));
      typename idlyami::skel::skel_type< P35 >::type __v35(*request,
          *(names++));
      typename idlyami::skel::skel_type< P36 >::type __v36(*request,
          *(names++));
      typename idlyami::skel::skel_type< P37 >::type __v37(*request,
          *(names++));
      typename idlyami::skel::skel_type< P38 >::type __v38(*request,
          *(names++));
      typename idlyami::skel::skel_type< P39 >::type __v39(*request,
          *(names++));
      typename idlyami::skel::skel_type< P40 >::type __v40(*request,
          *(names++));
      typename idlyami::skel::skel_type< P41 >::type __v41(*request,
          *(names++));
      typename idlyami::skel::skel_type< P42 >::type __v42(*request,
          *(names++));
      typename idlyami::skel::skel_type< P43 >::type __v43(*request,
          *(names++));
      typename idlyami::skel::skel_type< P44 >::type __v44(*request,
          *(names++));
      typename idlyami::skel::skel_type< P45 >::type __v45(*request,
          *(names++));
      typename idlyami::skel::skel_type< P46 >::type __v46(*request,
          *(names++));
      typename idlyami::skel::skel_type< P47 >::type __v47(*request,
          *(names++));
           (dynamic_cast< interface_type* >(_this)->*m_operation)(__v0.val() ,
               __v1.val() , __v2.val() , __v3.val() , __v4.val() , __v5.val() ,
               __v6.val() , __v7.val() , __v8.val() , __v9.val() ,
               __v10.val() , __v11.val() , __v12.val() , __v13.val() ,
               __v14.val() , __v15.val() , __v16.val() , __v17.val() ,
               __v18.val() , __v19.val() , __v20.val() , __v21.val() ,
               __v22.val() , __v23.val() , __v24.val() , __v25.val() ,
               __v26.val() , __v27.val() , __v28.val() , __v29.val() ,
               __v30.val() , __v31.val() , __v32.val() , __v33.val() ,
               __v34.val() , __v35.val() , __v36.val() , __v37.val() ,
               __v38.val() , __v39.val() , __v40.val() , __v41.val() ,
               __v42.val() , __v43.val() , __v44.val() , __v45.val() ,
               __v46.val() , __v47.val() );
    	}
	};
};

template< typename Interface, bool IsOneway, typename Return , typename P0 ,
    typename P1 , typename P2 , typename P3 , typename P4 , typename P5 ,
    typename P6 , typename P7 , typename P8 , typename P9 , typename P10 ,
    typename P11 , typename P12 , typename P13 , typename P14 , typename P15 ,
    typename P16 , typename P17 , typename P18 , typename P19 , typename P20 ,
    typename P21 , typename P22 , typename P23 , typename P24 , typename P25 ,
    typename P26 , typename P27 , typename P28 , typename P29 , typename P30 ,
    typename P31 , typename P32 , typename P33 , typename P34 , typename P35 ,
    typename P36 , typename P37 , typename P38 , typename P39 , typename P40 ,
    typename P41 , typename P42 , typename P43 , typename P44 , typename P45 ,
    typename P46 , typename P47 , typename P48  >
struct Operation< Interface, IsOneway, Return , P0 , P1 , P2 , P3 , P4 , P5 ,
    P6 , P7 , P8 , P9 , P10 , P11 , P12 , P13 , P14 , P15 , P16 , P17 , P18 ,
    P19 , P20 , P21 , P22 , P23 , P24 , P25 , P26 , P27 , P28 , P29 , P30 ,
    P31 , P32 , P33 , P34 , P35 , P36 , P37 , P38 , P39 , P40 , P41 , P42 ,
    P43 , P44 , P45 , P46 , P47 , P48  , detail::none , detail::none  >
{
    typedef Interface interface_type;
    static const bool isOneway = IsOneway;
    typedef typename mapping::return_type< Return >::type return_type;

    typedef typename mapping::arg_type< P0 >::type p0_type;
    typedef typename mapping::arg_type< P1 >::type p1_type;
    typedef typename mapping::arg_type< P2 >::type p2_type;
    typedef typename mapping::arg_type< P3 >::type p3_type;
    typedef typename mapping::arg_type< P4 >::type p4_type;
    typedef typename mapping::arg_type< P5 >::type p5_type;
    typedef typename mapping::arg_type< P6 >::type p6_type;
    typedef typename mapping::arg_type< P7 >::type p7_type;
    typedef typename mapping::arg_type< P8 >::type p8_type;
    typedef typename mapping::arg_type< P9 >::type p9_type;
    typedef typename mapping::arg_type< P10 >::type p10_type;
    typedef typename mapping::arg_type< P11 >::type p11_type;
    typedef typename mapping::arg_type< P12 >::type p12_type;
    typedef typename mapping::arg_type< P13 >::type p13_type;
    typedef typename mapping::arg_type< P14 >::type p14_type;
    typedef typename mapping::arg_type< P15 >::type p15_type;
    typedef typename mapping::arg_type< P16 >::type p16_type;
    typedef typename mapping::arg_type< P17 >::type p17_type;
    typedef typename mapping::arg_type< P18 >::type p18_type;
    typedef typename mapping::arg_type< P19 >::type p19_type;
    typedef typename mapping::arg_type< P20 >::type p20_type;
    typedef typename mapping::arg_type< P21 >::type p21_type;
    typedef typename mapping::arg_type< P22 >::type p22_type;
    typedef typename mapping::arg_type< P23 >::type p23_type;
    typedef typename mapping::arg_type< P24 >::type p24_type;
    typedef typename mapping::arg_type< P25 >::type p25_type;
    typedef typename mapping::arg_type< P26 >::type p26_type;
    typedef typename mapping::arg_type< P27 >::type p27_type;
    typedef typename mapping::arg_type< P28 >::type p28_type;
    typedef typename mapping::arg_type< P29 >::type p29_type;
    typedef typename mapping::arg_type< P30 >::type p30_type;
    typedef typename mapping::arg_type< P31 >::type p31_type;
    typedef typename mapping::arg_type< P32 >::type p32_type;
    typedef typename mapping::arg_type< P33 >::type p33_type;
    typedef typename mapping::arg_type< P34 >::type p34_type;
    typedef typename mapping::arg_type< P35 >::type p35_type;
    typedef typename mapping::arg_type< P36 >::type p36_type;
    typedef typename mapping::arg_type< P37 >::type p37_type;
    typedef typename mapping::arg_type< P38 >::type p38_type;
    typedef typename mapping::arg_type< P39 >::type p39_type;
    typedef typename mapping::arg_type< P40 >::type p40_type;
    typedef typename mapping::arg_type< P41 >::type p41_type;
    typedef typename mapping::arg_type< P42 >::type p42_type;
    typedef typename mapping::arg_type< P43 >::type p43_type;
    typedef typename mapping::arg_type< P44 >::type p44_type;
    typedef typename mapping::arg_type< P45 >::type p45_type;
    typedef typename mapping::arg_type< P46 >::type p46_type;
    typedef typename mapping::arg_type< P47 >::type p47_type;
    typedef typename mapping::arg_type< P48 >::type p48_type;

	struct parameters_t
	{
    		P0 p0;
    		P1 p1;
    		P2 p2;
    		P3 p3;
    		P4 p4;
    		P5 p5;
    		P6 p6;
    		P7 p7;
    		P8 p8;
    		P9 p9;
    		P10 p10;
    		P11 p11;
    		P12 p12;
    		P13 p13;
    		P14 p14;
    		P15 p15;
    		P16 p16;
    		P17 p17;
    		P18 p18;
    		P19 p19;
    		P20 p20;
    		P21 p21;
    		P22 p22;
    		P23 p23;
    		P24 p24;
    		P25 p25;
    		P26 p26;
    		P27 p27;
    		P28 p28;
    		P29 p29;
    		P30 p30;
    		P31 p31;
    		P32 p32;
    		P33 p33;
    		P34 p34;
    		P35 p35;
    		P36 p36;
    		P37 p37;
    		P38 p38;
    		P39 p39;
    		P40 p40;
    		P41 p41;
    		P42 p42;
    		P43 p43;
    		P44 p44;
    		P45 p45;
    		P46 p46;
    		P47 p47;
    		P48 p48;
    	};

    typedef return_type (interface_type::*type)(p0_type , p1_type , p2_type ,
        p3_type , p4_type , p5_type , p6_type , p7_type , p8_type , p9_type ,
        p10_type , p11_type , p12_type , p13_type , p14_type , p15_type ,
        p16_type , p17_type , p18_type , p19_type , p20_type , p21_type ,
        p22_type , p23_type , p24_type , p25_type , p26_type , p27_type ,
        p28_type , p29_type , p30_type , p31_type , p32_type , p33_type ,
        p34_type , p35_type , p36_type , p37_type , p38_type , p39_type ,
        p40_type , p41_type , p42_type , p43_type , p44_type , p45_type ,
        p46_type , p47_type , p48_type );

    static const unsigned int nparams = 49;

    struct handler_t : public OperationHandler
    {
    	type m_operation;

    	handler_t(type operation) : m_operation(operation)
    	{
    	}

    	void do_call(Servant* _this, ServerRequest* request, const char** names)
    	{

    		typename idlyami::skel::skel_type< P0 >::type __v0(*request, *(names++));
    		typename idlyami::skel::skel_type< P1 >::type __v1(*request, *(names++));
    		typename idlyami::skel::skel_type< P2 >::type __v2(*request, *(names++));
    		typename idlyami::skel::skel_type< P3 >::type __v3(*request, *(names++));
    		typename idlyami::skel::skel_type< P4 >::type __v4(*request, *(names++));
    		typename idlyami::skel::skel_type< P5 >::type __v5(*request, *(names++));
    		typename idlyami::skel::skel_type< P6 >::type __v6(*request, *(names++));
    		typename idlyami::skel::skel_type< P7 >::type __v7(*request, *(names++));
    		typename idlyami::skel::skel_type< P8 >::type __v8(*request, *(names++));
    		typename idlyami::skel::skel_type< P9 >::type __v9(*request, *(names++));
      typename idlyami::skel::skel_type< P10 >::type __v10(*request,
          *(names++));
      typename idlyami::skel::skel_type< P11 >::type __v11(*request,
          *(names++));
      typename idlyami::skel::skel_type< P12 >::type __v12(*request,
          *(names++));
      typename idlyami::skel::skel_type< P13 >::type __v13(*request,
          *(names++));
      typename idlyami::skel::skel_type< P14 >::type __v14(*request,
          *(names++));
      typename idlyami::skel::skel_type< P15 >::type __v15(*request,
          *(names++));
      typename idlyami::skel::skel_type< P16 >::type __v16(*request,
          *(names++));
      typename idlyami::skel::skel_type< P17 >::type __v17(*request,
          *(names++));
      typename idlyami::skel::skel_type< P18 >::type __v18(*request,
          *(names++));
      typename idlyami::skel::skel_type< P19 >::type __v19(*request,
          *(names++));
      typename idlyami::skel::skel_type< P20 >::type __v20(*request,
          *(names++));
      typename idlyami::skel::skel_type< P21 >::type __v21(*request,
          *(names++));
      typename idlyami::skel::skel_type< P22 >::type __v22(*request,
          *(names++));
      typename idlyami::skel::skel_type< P23 >::type __v23(*request,
          *(names++));
      typename idlyami::skel::skel_type< P24 >::type __v24(*request,
          *(names++));
      typename idlyami::skel::skel_type< P25 >::type __v25(*request,
          *(names++));
      typename idlyami::skel::skel_type< P26 >::type __v26(*request,
          *(names++));
      typename idlyami::skel::skel_type< P27 >::type __v27(*request,
          *(names++));
      typename idlyami::skel::skel_type< P28 >::type __v28(*request,
          *(names++));
      typename idlyami::skel::skel_type< P29 >::type __v29(*request,
          *(names++));
      typename idlyami::skel::skel_type< P30 >::type __v30(*request,
          *(names++));
      typename idlyami::skel::skel_type< P31 >::type __v31(*request,
          *(names++));
      typename idlyami::skel::skel_type< P32 >::type __v32(*request,
          *(names++));
      typename idlyami::skel::skel_type< P33 >::type __v33(*request,
          *(names++));
      typename idlyami::skel::skel_type< P34 >::type __v34(*request,
          *(names++));
      typename idlyami::skel::skel_type< P35 >::type __v35(*request,
          *(names++));
      typename idlyami::skel::skel_type< P36 >::type __v36(*request,
          *(names++));
      typename idlyami::skel::skel_type< P37 >::type __v37(*request,
          *(names++));
      typename idlyami::skel::skel_type< P38 >::type __v38(*request,
          *(names++));
      typename idlyami::skel::skel_type< P39 >::type __v39(*request,
          *(names++));
      typename idlyami::skel::skel_type< P40 >::type __v40(*request,
          *(names++));
      typename idlyami::skel::skel_type< P41 >::type __v41(*request,
          *(names++));
      typename idlyami::skel::skel_type< P42 >::type __v42(*request,
          *(names++));
      typename idlyami::skel::skel_type< P43 >::type __v43(*request,
          *(names++));
      typename idlyami::skel::skel_type< P44 >::type __v44(*request,
          *(names++));
      typename idlyami::skel::skel_type< P45 >::type __v45(*request,
          *(names++));
      typename idlyami::skel::skel_type< P46 >::type __v46(*request,
          *(names++));
      typename idlyami::skel::skel_type< P47 >::type __v47(*request,
          *(names++));
      typename idlyami::skel::skel_type< P48 >::type __v48(*request,
          *(names++));
           (dynamic_cast< interface_type* >(_this)->*m_operation)(__v0.val() ,
               __v1.val() , __v2.val() , __v3.val() , __v4.val() , __v5.val() ,
               __v6.val() , __v7.val() , __v8.val() , __v9.val() ,
               __v10.val() , __v11.val() , __v12.val() , __v13.val() ,
               __v14.val() , __v15.val() , __v16.val() , __v17.val() ,
               __v18.val() , __v19.val() , __v20.val() , __v21.val() ,
               __v22.val() , __v23.val() , __v24.val() , __v25.val() ,
               __v26.val() , __v27.val() , __v28.val() , __v29.val() ,
               __v30.val() , __v31.val() , __v32.val() , __v33.val() ,
               __v34.val() , __v35.val() , __v36.val() , __v37.val() ,
               __v38.val() , __v39.val() , __v40.val() , __v41.val() ,
               __v42.val() , __v43.val() , __v44.val() , __v45.val() ,
               __v46.val() , __v47.val() , __v48.val() );
    	}
	};
};

template< typename Interface, bool IsOneway, typename Return , typename P0 ,
    typename P1 , typename P2 , typename P3 , typename P4 , typename P5 ,
    typename P6 , typename P7 , typename P8 , typename P9 , typename P10 ,
    typename P11 , typename P12 , typename P13 , typename P14 , typename P15 ,
    typename P16 , typename P17 , typename P18 , typename P19 , typename P20 ,
    typename P21 , typename P22 , typename P23 , typename P24 , typename P25 ,
    typename P26 , typename P27 , typename P28 , typename P29 , typename P30 ,
    typename P31 , typename P32 , typename P33 , typename P34 , typename P35 ,
    typename P36 , typename P37 , typename P38 , typename P39 , typename P40 ,
    typename P41 , typename P42 , typename P43 , typename P44 , typename P45 ,
    typename P46 , typename P47 , typename P48 , typename P49  >
struct Operation< Interface, IsOneway, Return , P0 , P1 , P2 , P3 , P4 , P5 ,
    P6 , P7 , P8 , P9 , P10 , P11 , P12 , P13 , P14 , P15 , P16 , P17 , P18 ,
    P19 , P20 , P21 , P22 , P23 , P24 , P25 , P26 , P27 , P28 , P29 , P30 ,
    P31 , P32 , P33 , P34 , P35 , P36 , P37 , P38 , P39 , P40 , P41 , P42 ,
    P43 , P44 , P45 , P46 , P47 , P48 , P49  , detail::none  >
{
    typedef Interface interface_type;
    static const bool isOneway = IsOneway;
    typedef typename mapping::return_type< Return >::type return_type;

    typedef typename mapping::arg_type< P0 >::type p0_type;
    typedef typename mapping::arg_type< P1 >::type p1_type;
    typedef typename mapping::arg_type< P2 >::type p2_type;
    typedef typename mapping::arg_type< P3 >::type p3_type;
    typedef typename mapping::arg_type< P4 >::type p4_type;
    typedef typename mapping::arg_type< P5 >::type p5_type;
    typedef typename mapping::arg_type< P6 >::type p6_type;
    typedef typename mapping::arg_type< P7 >::type p7_type;
    typedef typename mapping::arg_type< P8 >::type p8_type;
    typedef typename mapping::arg_type< P9 >::type p9_type;
    typedef typename mapping::arg_type< P10 >::type p10_type;
    typedef typename mapping::arg_type< P11 >::type p11_type;
    typedef typename mapping::arg_type< P12 >::type p12_type;
    typedef typename mapping::arg_type< P13 >::type p13_type;
    typedef typename mapping::arg_type< P14 >::type p14_type;
    typedef typename mapping::arg_type< P15 >::type p15_type;
    typedef typename mapping::arg_type< P16 >::type p16_type;
    typedef typename mapping::arg_type< P17 >::type p17_type;
    typedef typename mapping::arg_type< P18 >::type p18_type;
    typedef typename mapping::arg_type< P19 >::type p19_type;
    typedef typename mapping::arg_type< P20 >::type p20_type;
    typedef typename mapping::arg_type< P21 >::type p21_type;
    typedef typename mapping::arg_type< P22 >::type p22_type;
    typedef typename mapping::arg_type< P23 >::type p23_type;
    typedef typename mapping::arg_type< P24 >::type p24_type;
    typedef typename mapping::arg_type< P25 >::type p25_type;
    typedef typename mapping::arg_type< P26 >::type p26_type;
    typedef typename mapping::arg_type< P27 >::type p27_type;
    typedef typename mapping::arg_type< P28 >::type p28_type;
    typedef typename mapping::arg_type< P29 >::type p29_type;
    typedef typename mapping::arg_type< P30 >::type p30_type;
    typedef typename mapping::arg_type< P31 >::type p31_type;
    typedef typename mapping::arg_type< P32 >::type p32_type;
    typedef typename mapping::arg_type< P33 >::type p33_type;
    typedef typename mapping::arg_type< P34 >::type p34_type;
    typedef typename mapping::arg_type< P35 >::type p35_type;
    typedef typename mapping::arg_type< P36 >::type p36_type;
    typedef typename mapping::arg_type< P37 >::type p37_type;
    typedef typename mapping::arg_type< P38 >::type p38_type;
    typedef typename mapping::arg_type< P39 >::type p39_type;
    typedef typename mapping::arg_type< P40 >::type p40_type;
    typedef typename mapping::arg_type< P41 >::type p41_type;
    typedef typename mapping::arg_type< P42 >::type p42_type;
    typedef typename mapping::arg_type< P43 >::type p43_type;
    typedef typename mapping::arg_type< P44 >::type p44_type;
    typedef typename mapping::arg_type< P45 >::type p45_type;
    typedef typename mapping::arg_type< P46 >::type p46_type;
    typedef typename mapping::arg_type< P47 >::type p47_type;
    typedef typename mapping::arg_type< P48 >::type p48_type;
    typedef typename mapping::arg_type< P49 >::type p49_type;

	struct parameters_t
	{
    		P0 p0;
    		P1 p1;
    		P2 p2;
    		P3 p3;
    		P4 p4;
    		P5 p5;
    		P6 p6;
    		P7 p7;
    		P8 p8;
    		P9 p9;
    		P10 p10;
    		P11 p11;
    		P12 p12;
    		P13 p13;
    		P14 p14;
    		P15 p15;
    		P16 p16;
    		P17 p17;
    		P18 p18;
    		P19 p19;
    		P20 p20;
    		P21 p21;
    		P22 p22;
    		P23 p23;
    		P24 p24;
    		P25 p25;
    		P26 p26;
    		P27 p27;
    		P28 p28;
    		P29 p29;
    		P30 p30;
    		P31 p31;
    		P32 p32;
    		P33 p33;
    		P34 p34;
    		P35 p35;
    		P36 p36;
    		P37 p37;
    		P38 p38;
    		P39 p39;
    		P40 p40;
    		P41 p41;
    		P42 p42;
    		P43 p43;
    		P44 p44;
    		P45 p45;
    		P46 p46;
    		P47 p47;
    		P48 p48;
    		P49 p49;
    	};

    typedef return_type (interface_type::*type)(p0_type , p1_type , p2_type ,
        p3_type , p4_type , p5_type , p6_type , p7_type , p8_type , p9_type ,
        p10_type , p11_type , p12_type , p13_type , p14_type , p15_type ,
        p16_type , p17_type , p18_type , p19_type , p20_type , p21_type ,
        p22_type , p23_type , p24_type , p25_type , p26_type , p27_type ,
        p28_type , p29_type , p30_type , p31_type , p32_type , p33_type ,
        p34_type , p35_type , p36_type , p37_type , p38_type , p39_type ,
        p40_type , p41_type , p42_type , p43_type , p44_type , p45_type ,
        p46_type , p47_type , p48_type , p49_type );

    static const unsigned int nparams = 50;

    struct handler_t : public OperationHandler
    {
    	type m_operation;

    	handler_t(type operation) : m_operation(operation)
    	{
    	}

    	void do_call(Servant* _this, ServerRequest* request, const char** names)
    	{

    		typename idlyami::skel::skel_type< P0 >::type __v0(*request, *(names++));
    		typename idlyami::skel::skel_type< P1 >::type __v1(*request, *(names++));
    		typename idlyami::skel::skel_type< P2 >::type __v2(*request, *(names++));
    		typename idlyami::skel::skel_type< P3 >::type __v3(*request, *(names++));
    		typename idlyami::skel::skel_type< P4 >::type __v4(*request, *(names++));
    		typename idlyami::skel::skel_type< P5 >::type __v5(*request, *(names++));
    		typename idlyami::skel::skel_type< P6 >::type __v6(*request, *(names++));
    		typename idlyami::skel::skel_type< P7 >::type __v7(*request, *(names++));
    		typename idlyami::skel::skel_type< P8 >::type __v8(*request, *(names++));
    		typename idlyami::skel::skel_type< P9 >::type __v9(*request, *(names++));
      typename idlyami::skel::skel_type< P10 >::type __v10(*request,
          *(names++));
      typename idlyami::skel::skel_type< P11 >::type __v11(*request,
          *(names++));
      typename idlyami::skel::skel_type< P12 >::type __v12(*request,
          *(names++));
      typename idlyami::skel::skel_type< P13 >::type __v13(*request,
          *(names++));
      typename idlyami::skel::skel_type< P14 >::type __v14(*request,
          *(names++));
      typename idlyami::skel::skel_type< P15 >::type __v15(*request,
          *(names++));
      typename idlyami::skel::skel_type< P16 >::type __v16(*request,
          *(names++));
      typename idlyami::skel::skel_type< P17 >::type __v17(*request,
          *(names++));
      typename idlyami::skel::skel_type< P18 >::type __v18(*request,
          *(names++));
      typename idlyami::skel::skel_type< P19 >::type __v19(*request,
          *(names++));
      typename idlyami::skel::skel_type< P20 >::type __v20(*request,
          *(names++));
      typename idlyami::skel::skel_type< P21 >::type __v21(*request,
          *(names++));
      typename idlyami::skel::skel_type< P22 >::type __v22(*request,
          *(names++));
      typename idlyami::skel::skel_type< P23 >::type __v23(*request,
          *(names++));
      typename idlyami::skel::skel_type< P24 >::type __v24(*request,
          *(names++));
      typename idlyami::skel::skel_type< P25 >::type __v25(*request,
          *(names++));
      typename idlyami::skel::skel_type< P26 >::type __v26(*request,
          *(names++));
      typename idlyami::skel::skel_type< P27 >::type __v27(*request,
          *(names++));
      typename idlyami::skel::skel_type< P28 >::type __v28(*request,
          *(names++));
      typename idlyami::skel::skel_type< P29 >::type __v29(*request,
          *(names++));
      typename idlyami::skel::skel_type< P30 >::type __v30(*request,
          *(names++));
      typename idlyami::skel::skel_type< P31 >::type __v31(*request,
          *(names++));
      typename idlyami::skel::skel_type< P32 >::type __v32(*request,
          *(names++));
      typename idlyami::skel::skel_type< P33 >::type __v33(*request,
          *(names++));
      typename idlyami::skel::skel_type< P34 >::type __v34(*request,
          *(names++));
      typename idlyami::skel::skel_type< P35 >::type __v35(*request,
          *(names++));
      typename idlyami::skel::skel_type< P36 >::type __v36(*request,
          *(names++));
      typename idlyami::skel::skel_type< P37 >::type __v37(*request,
          *(names++));
      typename idlyami::skel::skel_type< P38 >::type __v38(*request,
          *(names++));
      typename idlyami::skel::skel_type< P39 >::type __v39(*request,
          *(names++));
      typename idlyami::skel::skel_type< P40 >::type __v40(*request,
          *(names++));
      typename idlyami::skel::skel_type< P41 >::type __v41(*request,
          *(names++));
      typename idlyami::skel::skel_type< P42 >::type __v42(*request,
          *(names++));
      typename idlyami::skel::skel_type< P43 >::type __v43(*request,
          *(names++));
      typename idlyami::skel::skel_type< P44 >::type __v44(*request,
          *(names++));
      typename idlyami::skel::skel_type< P45 >::type __v45(*request,
          *(names++));
      typename idlyami::skel::skel_type< P46 >::type __v46(*request,
          *(names++));
      typename idlyami::skel::skel_type< P47 >::type __v47(*request,
          *(names++));
      typename idlyami::skel::skel_type< P48 >::type __v48(*request,
          *(names++));
      typename idlyami::skel::skel_type< P49 >::type __v49(*request,
          *(names++));
           (dynamic_cast< interface_type* >(_this)->*m_operation)(__v0.val() ,
               __v1.val() , __v2.val() , __v3.val() , __v4.val() , __v5.val() ,
               __v6.val() , __v7.val() , __v8.val() , __v9.val() ,
               __v10.val() , __v11.val() , __v12.val() , __v13.val() ,
               __v14.val() , __v15.val() , __v16.val() , __v17.val() ,
               __v18.val() , __v19.val() , __v20.val() , __v21.val() ,
               __v22.val() , __v23.val() , __v24.val() , __v25.val() ,
               __v26.val() , __v27.val() , __v28.val() , __v29.val() ,
               __v30.val() , __v31.val() , __v32.val() , __v33.val() ,
               __v34.val() , __v35.val() , __v36.val() , __v37.val() ,
               __v38.val() , __v39.val() , __v40.val() , __v41.val() ,
               __v42.val() , __v43.val() , __v44.val() , __v45.val() ,
               __v46.val() , __v47.val() , __v48.val() , __v49.val() );
    	}
	};
};

} // idlyami

#endif // IDLYAMI_OPERATION_HPP

