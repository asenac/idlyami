module workflow.IDLFileGenerator

import org.eclipse.emf.mwe.utils.*

var fileEncoding = "UTF-8"
var modelFile = "src/model/hello.idl"

// Parameters
var targetDir = "src-gen"
var genStub = true
var genSkelImpl = true
var StubHppSuffix = "\'C.hpp\'"
var StubCppSuffix = "\'C.cpp\'"
var SkelImplHppSuffix = "\'I.hpp\'"
var SkelImplCppSuffix = "\'I.cpp\'"

Workflow {

	bean = StandaloneSetup {
		registerGeneratedEPackage = "org.csu.idl.idlmm.IdlmmPackage"
		platformUri = "."
	}

	component = org.eclipse.xtext.mwe.UriBasedReader {
		uri = modelFile

		// this class will be generated by the xtext generator 
		register = org.csu.idl.xtext.IDLStandaloneSetup {}
		load = {
			slot = "model"
			type = "TranslationUnit"
		}
	}

	component = org.eclipse.xtend.XtendComponent {
		invoke = "templates::common::Transformations::allTransformations(model)"
		metaModel = org.eclipse.xtend.type.impl.java.JavaBeansMetaModel {}
	}

	component = org.eclipse.xpand2.Generator {
		expand = "templates::idlyami::Main::main FOREACH model"
		metaModel = org.eclipse.xtend.type.impl.java.JavaBeansMetaModel {}
		outlet = {
			path = targetDir
			// postprocessor = org.csu.cpp.output.CppBeautifier {}
		}
		fileEncoding = fileEncoding

		// Regiones protegidas
		prSrcPaths = "${targetDir}"
		
		// Variables globales
		globalVarDef = {
			name = "genStub"
			value = "${genStub}"
		}
		globalVarDef = {
			name = "genSkelImpl"
			value = "${genSkelImpl}"
		}
		globalVarDef = {
			name = "StubHppSuffix"
			value = "${StubHppSuffix}"
		}
		globalVarDef = {
			name = "StubCppSuffix"
			value = "${StubCppSuffix}"
		}
		globalVarDef = {
			name = "SkelImplHppSuffix"
			value = "${SkelImplHppSuffix}"
		}
		globalVarDef = {
			name = "SkelImplCppSuffix"
			value = "${SkelImplCppSuffix}"
		}
	}

}
