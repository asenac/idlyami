import org::csu::idl::idlmm;

extension templates::common::Expression reexport;

/* fully Qualified Name */
String getFQN(Contained this) : getFQN(this, "::");
String getFQN(Contained this, String separator ) : this.definedIn != null ? this.definedIn.getFQN(separator) + separator + identifier : identifier;

IDLType getType(Typed this) : containedType != null ? containedType : sharedType;

/* get original type, ignoring alias */
IDLType getOriginalType(Typed this) : AliasDef.isInstance(getType())? (((AliasDef) getType()).getOriginalType()) : getType();
IDLType getOriginalType(IDLType this) : this;
IDLType getOriginalType(AliasDef this) : getType().getOriginalType();
IDLType getOriginalType(SequenceDef this) : this;
IDLType getOriginalType(ArrayDef this) : this;

/* get the type of an array (useful for multidimensional arrays) */
IDLType getArrayType(ArrayDef this) :
	let type = getType() :
		ArrayDef.isInstance(type)?
			((ArrayDef)type).getArrayType()
		:
			type
	;

/* get a list containing the dimensions of an array */
String getArrayDimensionsDecl(ArrayDef this) :
    bounds.getArrayDimensions("[", "]", "")
;

String getArrayDimensionsComma(ArrayDef this) :
    bounds.getArrayDimensions("", "", ", ")
;

String getArrayDimensionsMult(ArrayDef this) :
    bounds.getArrayDimensions("", "", " * ")
;

/* get the dimensions of the slice of an array */
String getArraySliceDimensions(ArrayDef this) :
	bounds.withoutFirst().getArrayDimensions("[", "]", "")
;

/* get the dimensions of an array */
private String getArrayDimensions(List[Expression] this, String prefix, String suffix, String separator) :
    if isEmpty then
        ""
    else if size == 1 then
        prefix+first().exp2strInteger(true)+suffix
    else
        prefix+first().exp2strInteger(true)+suffix+separator+withoutFirst().getArrayDimensions(prefix, suffix, separator)
;

Boolean isObjectRef(IDLType this)
	: ( InterfaceDef.isInstance(this) 
	  || (PrimitiveDef.isInstance(this) && ((PrimitiveDef)this).kind == PrimitiveKind::PK_OBJREF)
	  );



// Returns true if the operation returns void
Boolean returnVoid(OperationDef this) :
    (PrimitiveDef.isInstance(getType()) && ((PrimitiveDef) getType()).kind == PrimitiveKind::PK_VOID)
;

/*** All contents ***/
cached List[Contained] getAllContents(TranslationUnit this) :
    contains.addAll(contains.typeSelect(Container).getAllContents())
;
cached List[Contained] getAllContents(Container this) :
    contains.addAll(contains.typeSelect(Container).getAllContents())
;


/** get the set of upper interfaces in inheritance hierarchy **/
cached Set[InterfaceDef] getAllParentsSet(InterfaceDef this) :
	getAllParentsList().toSet()
;

private cached List[InterfaceDef] getAllParentsList(InterfaceDef this) :
	if derivesFrom.isEmpty then
		derivesFrom
	else
		derivesFrom.addAll(derivesFrom.getAllParentsList())
;

String getFileName(TranslationUnit tu) : JAVA templates.common.FileNameHelper.getFileName(org.csu.idl.idlmm.TranslationUnit);
String getFileName(Include tu) : JAVA templates.common.FileNameHelper.getFileName(org.csu.idl.idlmm.Include);

cached List[OperationDef] get_AllOperations(InterfaceDef this) :
	if derivesFrom.isEmpty then
		contains.typeSelect(OperationDef)
	else 
		contains.typeSelect(OperationDef).addAll(derivesFrom.get_AllOperations())
;

InterfaceDef getInterface(OperationDef this) : (InterfaceDef) definedIn;
